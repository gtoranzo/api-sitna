TC.feature=TC.feature||{};TC.Feature||TC.syncLoadJS(TC.apiLocation+"TC/Feature");TC.feature.MultiPolygon=function(t,o){const r=this;TC.Feature.apply(r,arguments);r.wrap.isNative(t)||r.wrap.createMultiPolygon(t,o)};TC.inherit(TC.feature.MultiPolygon,TC.Feature);TC.feature.MultiPolygon.prototype.STYLETYPE=TC.Consts.geom.POLYGON;TC.feature.MultiPolygon.prototype.CLASSNAME="TC.feature.MultiPolygon";TC.feature.MultiPolygon.prototype.getCoords=function(t){t=t||{};const o=TC.Feature.prototype.getCoords.call(this,t);return t.pointArray?[].concat.apply([],[].concat.apply([],o)):o};TC.feature.MultiPolygon.prototype.setCoords=function(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new Error("Coordinates not valid for multipolygon");Array.isArray(t[0][0])?Array.isArray(t[0][0][0])||(t=[t]):t=[[t]];t.forEach(function(t){t.forEach(function(t){const o=t[0],r=t[t.length-1];o[0]===r[0]&&o[1]===r[1]||(t[t.length]=o)})});return TC.Feature.prototype.setCoords.call(this,t)};TC.feature.MultiPolygon.prototype.getLength=function(t){return this.wrap.getLength(t)};
//# sourceMappingURL=../maps/feature/MultiPolygon.min.js.map