{"version":3,"sources":["control/WFSEdit.js"],"names":["TC","control","SWCacheClient","syncLoadJS","apiLocation","WFSEdit","self","this","apply","arguments","_classSelector","CLASS","layer","callback","Util","isFunction","options","layersEditData","showsOriginalFeatures","showOriginalFeatures","highlightsAdded","highlightsModified","highlightsRemoved","highlightChanges","getBeforeEditLayerStyleFunction","getBeforeEditLayerStyle","styles","point","fillColor","fillOpacity","strokeColor","strokeWidth","strokeOpacity","radius","line","polygon","inherit","newFeatureIdNumber","setSyncState","ctl","layerEditData","getLayerEditData","_saveBtn","disabled","navigator","onLine","checkedOut","isSyncing","setEditState","enabled","div","querySelector","classList","toggle","Consts","classes","HIDDEN","type","layerType","WFS","WMS","wfsLayer","isLayerCropped","filter","Bbox","properties","_recropBtn","setChangesButtonsState","_discardBtn","setChangedState","isChanged","loadJS","window","localforage","url","LOCALFORAGE","storagePrefix","getStoragePrefix","keys","then","i","len","length","indexOf","storeFeature","key","feature","Promise","resolve","reject","obj","geometryType","Polygon","geom","POLYGON","Polyline","POLYLINE","Point","POINT","MultiPolygon","MULTIPOLYGON","MultiPolyline","MULTIPOLYLINE","id","provId","attributes","data","geometry","setItem","catch","error","deleteFeature","removeItem","Error","LOCAL_STORAGE_KEY_PREFIX","featureType","featureNS","getLayerStoreID","getAddedStoragePrefix","LOCAL_STORAGE_ADDED_KEY_PREFIX","getModifiedStoragePrefix","LOCAL_STORAGE_MODIFIED_KEY_PREFIX","getRemovedStoragePrefix","LOCAL_STORAGE_REMOVED_KEY_PREFIX","getLayerTitle","getPath","join","title","ctlProto","prototype","template","dust","register","body_0","chk","ctx","w","h","$key","s","get","block","body_1","f","x","body_2","body_3","body_4","body_5","__dustBody","map","call","addEventListener","_editPromise","addControl","getUID","downloadElevation","snapping","editControl","getAvailableFeaturesToImport","candidates","Object","getPrototypeOf","getLayer","addedFeaturesLayer","modifiedFeaturesLayer","removedFeaturesLayer","beforeEditLayer","importFeatures","features","featuresToImport","newFeatures","constructor","geometryName","on","event","DRAWEND","e","serializable","_storeFeatureAdd","FEATUREMODIFY","feat","fid","storeSuccess","storeFailure","getLocaleString","storedFeature","getFeatureById","setCoords","setData","getData","addFeature","_createAuxFeature","FEATUREADD","FEATUREREMOVE","_storeFeatureRemove","workLayers","forEach","addLayer","LAYERUPDATE","readOnly","getEditableLayer","l","cacheLayer","ZOOM","LAYERADD","LAYERREMOVE","_removingLayer","wmsLayer","setLayer","option","_layerSelect","parentElement","removeChild","LAYERERROR","reason","WFSErrors","MAX_NUM_FEATURES","toast","limit","msgType","WARNING","removeLayer","loaded","wfsLayers","elm","stealth","ready","getControlsByClass","addLayerTool","renderFn","container","layerId","className","button","text","document","createElement","innerHTML","setAttribute","add","dataset","appendChild","LOADING","getWFSCapabilities","finally","remove","updateEvents","BEFORELAYERUPDATE","CONTROLACTIVATE","CONTROLDEACTIVATE","updateFn","setTimeout","ACTIVE","isRaster","names","actionFn","prevLayer","openEditSession","render","editLayers","wl","push","_set1stRenderPromise","Control","renderData","layers","controlId","_layerDiv","value","viewToolsDiv","_editingWatch","_beforeEditLayerWatch","_addedWatch","_modifiedWatch","_removedWatch","target","checked","highlightAdded","highlightModified","highlightRemoved","colorRegExp","RegExp","onColorClick","input","match","click","onColorChange","prefix","newColor","setStyles","src","getLegendImage","addedColorInputId","CLICK","getElementById","modifiedColorInputId","removedColorInputId","confirm","layerTitle","applyEdits","discardEdits","reload","getExtent","getCRS","refresh","editedFeatures","concat","Geometry","featuresOutside","extent","bbox","ii","intersects","isBase","renderPromise","appendOption","err","console","log","message","selector","mapLayer","setNewLayer","editableLayer","endProcess","_enableEditSerialization","getEditControl","c","setMode","closeEditSession","newFeature","removeFeature","removedStoragePrefix","result","setStyle","setId","getServiceWorker","gfUrl","wrap","getGetFeatureUrl","dftUrl","getDescribeFeatureTypeUrl","createCache","urlList","getFeatureType","li","getLoadingIndicator","waitId","addWait","describeFeatureType","attr","getGeometryType","name","substr","removeWait","_addAuxLayersToMap","beLayer","afLayer","mfLayer","rfLayer","all","idx","setVisibility","insertLayer","newIdx","getAddedFeaturesLayerStyle","getModifiedFeaturesLayerStyle","getRemovedFeaturesLayerStyle","setComplexGeometry","activate","modes","Edit","mode","MODIFY","OTHER","ADDPOINT","ADDLINE","ADDPOLYGON","constrainModes","VECTOR","deactivate","BLANK_IMAGE","previousLayer","removePromises","notEditableErrorMsg","getCapabilitiesPromise","capabilities","getDisgregatedLayerNames","fullLayerName","colonIdx","shortLayerName","substring","FeatureTypes","hasOwnProperty","Vector","wfsLayerOptions","replace","outputFormat","format","JSON","isLayerEdited","some","optionalLayer","MULTIPOINT","getLegendImageFromStyle","baseTitle","extend","owner","aflIsOld","zIndex","mflIsOld","rflIsOld","featurePromises","removedFeature","modifiedFeature","addedFeature","addedStoragePrefix","modifiedStoragePrefix","res","rej","getItem","readFeature","k","clone","addPromise","idNumber","parseInt","lastIndexOf","Math","max","addPoint","addPolyline","addPolygon","addMultiPolyline","addMultiPolygon","newFeat","state","Layer","IDLE","onLayerUpdate","off","modified","unmodifiedFeature","newData","oldValue","newValue","response","transactionSummary","totalInserted","totalUpdated","totalDeleted","deleteCache","INFO","code","ERROR","_joinedFeatureAttributes","clearFeatures","setSelectedFeatures","modifyControl","closeAttributes","show","highlight","getStyleFromFeatureType","getNegativeColor","color","rgba","getRGBA","toString","padStart","dash","lineDash","colorizeLayer","addedCustomColor","modifiedCustomColor","removedCustomColor"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.SWCacheClient) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/SWCacheClient');\r\n}\r\n\r\nTC.control.WFSEdit = function () {\r\n    const self = this;\r\n\r\n    TC.control.SWCacheClient.apply(this, arguments);\r\n\r\n    self._classSelector = '.' + self.CLASS;\r\n\r\n    self.layer = null;\r\n    //self.feature = self.options.feature ? self.options.feature : null;\r\n    self.callback = TC.Util.isFunction(arguments[2]) ? arguments[2] : (self.options.callback ? self.options.callback : null);\r\n    self.layersEditData = {};\r\n    self.showsOriginalFeatures = (typeof self.options.showOriginalFeatures === 'boolean') ? self.options.showOriginalFeatures : false;\r\n    self.highlightsAdded = self.highlightsModified = self.highlightsRemoved = (typeof self.options.highlightChanges === 'boolean') ? self.options.highlightChanges : true;\r\n    if (!TC.Util.isFunction(self.options.getBeforeEditLayerStyleFunction)) {\r\n        self.getBeforeEditLayerStyleFunction = self.getBeforeEditLayerStyle;\r\n    }\r\n    self.styles = self.options.styles || {\r\n        point: {\r\n            fillColor: \"#0000aa\",\r\n            fillOpacity: 0.1,\r\n            strokeColor: \"#0000aa\",\r\n            strokeWidth: 2,\r\n            strokeOpacity: 1,\r\n            radius: 6\r\n        },\r\n        line: {\r\n            strokeColor: \"#0000aa\",\r\n            strokeWidth: 2,\r\n            strokeOpacity: 1\r\n        },\r\n        polygon: {\r\n            fillColor: \"#0000aa\",\r\n            fillOpacity: 0.1,\r\n            strokeColor: \"#0000aa\",\r\n            strokeWidth: 2,\r\n            strokeOpacity: 1\r\n        }\r\n    }\r\n};\r\n\r\nTC.inherit(TC.control.WFSEdit, TC.control.SWCacheClient);\r\n\r\n(function () {\r\n    var newFeatureIdNumber = 0;\r\n    const getNewFeatureId = function () {\r\n        return \"NewFeature.\" + newFeatureIdNumber++;\r\n    };\r\n\r\n    const setSyncState = function (ctl) {\r\n        const layerEditData = ctl.getLayerEditData();\r\n        ctl._saveBtn.disabled = !(navigator.onLine && layerEditData && layerEditData.checkedOut) || ctl.isSyncing;\r\n    };\r\n\r\n    const setEditState = function (ctl, enabled) {\r\n        ctl.div.querySelector(ctl._classSelector + '-view').classList.toggle(TC.Consts.classes.HIDDEN, !enabled || !ctl.layer || !(ctl.layer.type === TC.Consts.layerType.WFS || ctl.layer.type === TC.Consts.layerType.WMS));\r\n        if (ctl.layer && ctl.layer.wfsLayer) {\r\n            const isLayerCropped = TC.filter && TC.filter.Bbox && ctl.layer.wfsLayer.properties instanceof TC.filter.Bbox;\r\n            ctl._recropBtn.classList.toggle(TC.Consts.classes.HIDDEN, !isLayerCropped);\r\n        }\r\n        ctl.div.querySelector(ctl._classSelector + '-edit').classList.toggle(TC.Consts.classes.HIDDEN, !enabled);\r\n    };\r\n\r\n    const setChangesButtonsState = function (ctl) {\r\n        setSyncState(ctl);\r\n        const layerEditData = ctl.getLayerEditData();\r\n        ctl._discardBtn.disabled = !layerEditData || !layerEditData.checkedOut;\r\n    };\r\n\r\n    const setChangedState = function (ctl, isChanged) {\r\n        if (ctl.layer) {\r\n            const layerEditData = ctl.getLayerEditData();\r\n            if (typeof isChanged !== 'undefined') {\r\n                layerEditData.checkedOut = isChanged;\r\n                setChangesButtonsState(ctl);\r\n            }\r\n            else {\r\n                TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                    var storagePrefix = getStoragePrefix(ctl);\r\n                    localforage.keys().then(function (keys) {\r\n                        if (keys) {\r\n                            var disabled = true;\r\n                            for (var i = 0, len = keys.length; i < len; i++) {\r\n                                if (keys[i].indexOf(storagePrefix) === 0) {\r\n                                    disabled = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            layerEditData.checkedOut = !disabled;\r\n                            setChangesButtonsState(ctl);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            setChangesButtonsState(ctl);\r\n        }\r\n    };\r\n\r\n    const storeFeature = function (key, feature) {\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                var obj;\r\n                var geometryType;\r\n                switch (true) {\r\n                    case feature instanceof TC.feature.Polygon:\r\n                        geometryType = TC.Consts.geom.POLYGON;\r\n                        break;\r\n                    case feature instanceof TC.feature.Polyline:\r\n                        geometryType = TC.Consts.geom.POLYLINE;\r\n                        break;\r\n                    case feature instanceof TC.feature.Point:\r\n                        geometryType = TC.Consts.geom.POINT;\r\n                        break;\r\n                    case feature instanceof TC.feature.MultiPolygon:\r\n                        geometryType = TC.Consts.geom.MULTIPOLYGON;\r\n                        break;\r\n                    case feature instanceof TC.feature.MultiPolyline:\r\n                        geometryType = TC.Consts.geom.MULTIPOLYLINE;\r\n                        break;\r\n                }\r\n                obj = {\r\n                    id: feature.id || feature.provId,\r\n                    attributes: feature.data,\r\n                    type: geometryType,\r\n                    geometry: feature.geometry,\r\n                }\r\n                localforage.setItem(key, obj)\r\n                    .then(function () {\r\n                        resolve({ feature: feature });\r\n                    })\r\n                    .catch(function (error) {\r\n                        reject({ feature: feature, error: error });\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n    const deleteFeature = function (key) {\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                localforage.removeItem(key)\r\n                    .then(function () {\r\n                        resolve(key);\r\n                    })\r\n                    .catch(function (error) {\r\n                        reject(Error(error));\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n    const readFeature = function (key) {\r\n        return new Promise(function (resolve, reject) {\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                localforage.getItem(key)\r\n                    .then(function (value) {\r\n                        resolve({\r\n                            key: key,\r\n                            feature: value\r\n                        });\r\n                    })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        });\r\n    };\r\n\r\n    const getLayerStoreID = function (layer) {\r\n        let featureType = layer.options.featureType[0];\r\n        if (featureType.indexOf(':') < 0) {\r\n            featureType = layer.options.featureNS + ':' + featureType;\r\n        }\r\n        return featureType + '@' + layer.options.url;\r\n    };\r\n\r\n    const getStoragePrefix = function (ctl, layer) {\r\n        return ctl.LOCAL_STORAGE_KEY_PREFIX + getLayerStoreID(layer || ctl.layer.wfsLayer || ctl.layer);\r\n    };\r\n\r\n    const getAddedStoragePrefix = function (ctl, layer) {\r\n        return getStoragePrefix(ctl, layer) + ctl.LOCAL_STORAGE_ADDED_KEY_PREFIX;\r\n    };\r\n\r\n    const getModifiedStoragePrefix = function (ctl, layer) {\r\n        return getStoragePrefix(ctl, layer) + ctl.LOCAL_STORAGE_MODIFIED_KEY_PREFIX;\r\n    };\r\n\r\n    const getRemovedStoragePrefix = function (ctl, layer) {\r\n        return getStoragePrefix(ctl, layer) + ctl.LOCAL_STORAGE_REMOVED_KEY_PREFIX;\r\n    };\r\n\r\n    const getLayerTitle = function (layer) {\r\n        return layer.getPath ? layer.getPath().join(' • ') : (layer.title || layer.id)\r\n    };\r\n\r\n    const ctlProto = TC.control.WFSEdit.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-wfsedit';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/WFSEdit.html\";\r\n\r\n    ctlProto.LOCAL_STORAGE_KEY_PREFIX = \"TC.offline.edit.\";\r\n    ctlProto.LOCAL_STORAGE_ADDED_KEY_PREFIX = \".added.\";\r\n    ctlProto.LOCAL_STORAGE_MODIFIED_KEY_PREFIX = \".modified.\";\r\n    ctlProto.LOCAL_STORAGE_REMOVED_KEY_PREFIX = \".removed.\";\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            TC.control.SWCacheClient.prototype.register.call(self, map).then(function () {\r\n\r\n                window.addEventListener('online', function () {\r\n                    setSyncState(self);\r\n                });\r\n                window.addEventListener('offline', function () {\r\n                    setSyncState(self);\r\n                });\r\n\r\n                self._editPromise = map.addControl('edit', {\r\n                    id: self.getUID(),\r\n                    div: self.div.querySelector(`.${self.CLASS}-edit`),\r\n                    styles: self.styles,\r\n                    downloadElevation: self.options.downloadElevation,\r\n                    snapping: self.options.snapping\r\n                });\r\n                self._editPromise.then(function (ctl) {\r\n                    self.editControl = ctl;\r\n\r\n                    self.editControl.getAvailableFeaturesToImport = function () {\r\n                        const candidates = Object.getPrototypeOf(self.editControl).getAvailableFeaturesToImport.call(self.editControl);\r\n                        const layerEditData = self.getLayerEditData();\r\n                        return candidates.filter(obj => {\r\n                            const layer = map.getLayer(obj.id);\r\n                            return layer !== layerEditData.addedFeaturesLayer &&\r\n                                layer !== layerEditData.modifiedFeaturesLayer &&\r\n                                layer !== layerEditData.removedFeaturesLayer &&\r\n                                layer !== layerEditData.beforeEditLayer;\r\n                        });\r\n                    };\r\n                    self.editControl.importFeatures = function (features) {\r\n                        const featuresToImport = (features || this.featuresToImport || []);\r\n                        const layerEditData = self.getLayerEditData();\r\n                        const newFeatures = layerEditData.attributes ? featuresToImport.map(function (feature) {\r\n                            const properties = {};\r\n                            for (let key in layerEditData.attributes) {\r\n                                properties[key] = feature.data[key];\r\n                            }\r\n                            return new feature.constructor(feature.geometry, { geometryName: layerEditData.geometryName, data: properties });\r\n                        }) : features;\r\n                        Object.getPrototypeOf(self.editControl).importFeatures.call(self.editControl, newFeatures);\r\n                    };\r\n                    self.editControl\r\n                        .on(TC.Consts.event.DRAWEND, function (e) {\r\n                            if (self.getLayerEditData().serializable) {\r\n                                self._storeFeatureAdd(e.feature);\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREMODIFY, function (e) {\r\n                            const feat = e.feature;\r\n                            const fid = feat.provId || feat.id;\r\n                            const storeSuccess = function () {\r\n                                setChangedState(self, true);\r\n                            };\r\n                            const storeFailure = function () {\r\n                                TC.error(self.getLocaleString('failedWhenSavingModifyOperationInSession'));\r\n                            };\r\n                            const layerEditData = self.getLayerEditData();\r\n                            if (layerEditData.serializable) {\r\n                                let storedFeature = layerEditData.addedFeaturesLayer.getFeatureById(fid);\r\n                                if (storedFeature) {\r\n                                    storedFeature.setCoords(feat.geometry);\r\n                                    storedFeature.setData(feat.getData());\r\n                                    storeFeature(getAddedStoragePrefix(self) + fid, feat).then(storeSuccess, storeFailure);\r\n                                }\r\n                                else {\r\n                                    storedFeature = layerEditData.modifiedFeaturesLayer.getFeatureById(fid);\r\n                                    if (storedFeature) {\r\n                                        storedFeature.setCoords(feat.geometry);\r\n                                        storedFeature.setData(feat.getData());\r\n                                    }\r\n                                    else {\r\n                                        layerEditData.modifiedFeaturesLayer.addFeature(self._createAuxFeature(feat));\r\n                                    }\r\n                                    storeFeature(getModifiedStoragePrefix(self) + fid, feat).then(storeSuccess, storeFailure);\r\n                                }\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREADD, function (e) {\r\n                            if (self.getLayerEditData().serializable) {\r\n                                self._storeFeatureAdd(e.feature);\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREREMOVE, function (e) {\r\n                            if (self.getLayerEditData().serializable) {\r\n                                self._storeFeatureRemove(e.feature);\r\n                            }\r\n                        });\r\n\r\n                    map.workLayers.forEach(layer => self.addLayer(layer));\r\n\r\n                    map\r\n                        .on(TC.Consts.event.LAYERUPDATE, function (e) {\r\n                            const layer = e.layer;\r\n                            if (layer.type === TC.Consts.layerType.WFS && !layer.options.readOnly) {\r\n                                self.getEditableLayer(layer)\r\n                                    .then(l => self.cacheLayer(l));\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.ZOOM, function (e) {\r\n                            map.workLayers\r\n                                .filter(l => l.wfsLayer)\r\n                                .filter(l => self.layer !== l)\r\n                                .forEach(function (layer) {\r\n                                    layer.wfsLayer = null;\r\n                                    self.getEditableLayer(layer);\r\n                                });\r\n                        })\r\n                        .on(TC.Consts.event.LAYERADD, function (e) {\r\n                            self.addLayer(e.layer);\r\n                        })\r\n                        .on(TC.Consts.event.LAYERREMOVE, function (e) {\r\n                            const layer = e.layer;\r\n                            if (self._removingLayer === layer) {\r\n                                return;\r\n                            }\r\n                            if (self.layer === layer || (layer.wmsLayer && self.layer === layer.wmsLayer)) {\r\n                                self.setLayer(null);\r\n                            }\r\n                            const option = self._layerSelect.querySelector(`option[value=\"${layer.id}\"]`);\r\n                            if (option) {\r\n                                option.parentElement.removeChild(option);\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.LAYERERROR, function (e) {\r\n                            const layer = e.layer;\r\n                            if (layer.type === TC.Consts.layerType.WFS && !layer.options.readOnly) {\r\n                                if (e.reason === TC.Consts.WFSErrors.MAX_NUM_FEATURES) {\r\n                                    map.toast(self.getLocaleString('query.msgTooManyResults', { limit: e.data.limit }), { type: TC.Consts.msgType.WARNING });\r\n                                }\r\n                                if (self.layer === layer || (self.layer && self.layer.wfsLayer === layer)) {\r\n                                    delete self.layersEditData[self.layer.id];\r\n                                    self.setLayer(null);\r\n                                }\r\n                                if (layer.wmsLayer) {\r\n                                    map.removeLayer(layer);\r\n                                    layer.wmsLayer.wfsLayer = null;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                    resolve(self);\r\n                });\r\n\r\n                map.loaded(function () {\r\n                    self._layerSelect.disabled = false;\r\n\r\n                    if (self.options.layer) {\r\n                        self.setLayer(self.options.layer);\r\n                    }\r\n                    else {\r\n                        const wfsLayers = map.workLayers.filter(function (elm) {\r\n                            return elm.type === TC.Consts.layerType.WFS && !elm.options.stealth;\r\n                        });\r\n                        if (wfsLayers.length === 1) {\r\n                            self.setLayer(wfsLayers[0].id);\r\n                        }\r\n                        else {\r\n                            self.setLayer(null);\r\n                        }\r\n                    }\r\n\r\n                    self.showOriginalFeatures(self.showsOriginalFeatures);\r\n                });\r\n\r\n                map.ready(function () {\r\n                    map.getControlsByClass('TC.control.WorkLayerManager').forEach(function (ctl) {\r\n                        ctl.addLayerTool({\r\n                            renderFn: function (container, layerId) {\r\n                                const className = self.CLASS + '-btn-edit';\r\n                                let button = container.querySelector('button.' + className);\r\n                                if (!button) {\r\n                                    const text = self.getLocaleString('featureEditing');\r\n                                    button = document.createElement('button');\r\n                                    button.innerHTML = text;\r\n                                    button.setAttribute('title', text);\r\n                                    button.classList.add(className);\r\n                                    button.dataset.layerId = layerId;\r\n                                    container.appendChild(button);\r\n                                    const layer = map.getLayer(layerId);\r\n                                    if (layer.type === TC.Consts.layerType.WMS) {\r\n                                        button.classList.add(TC.Consts.classes.LOADING);\r\n                                        layer.getWFSCapabilities()\r\n                                            .catch(() => button.classList.add(TC.Consts.classes.HIDDEN))\r\n                                            .finally(() => button.classList.remove(TC.Consts.classes.LOADING));\r\n                                    }\r\n                                }\r\n                                return button;\r\n                            },\r\n                            updateEvents: [TC.Consts.event.BEFORELAYERUPDATE, TC.Consts.event.LAYERUPDATE, TC.Consts.event.LAYERERROR, TC.Consts.event.CONTROLACTIVATE, TC.Consts.event.CONTROLDEACTIVATE],\r\n                            updateFn: function (e) {\r\n                                const button = this;\r\n                                const layer = map.getLayer(button.dataset.layerId);\r\n                                setTimeout(() => {\r\n                                    button.classList.toggle(TC.Consts.classes.ACTIVE, self.layer === layer);\r\n                                }, 500);\r\n                                button.disabled = !layer || (layer.isRaster() && layer.names.length !== 1);\r\n                            },\r\n                            actionFn: function () {\r\n                                const button = this;\r\n                                const layer = map.getLayer(button.dataset.layerId);\r\n                                const prevLayer = self.layer;\r\n                                button.classList.remove(TC.Consts.classes.ACTIVE);\r\n                                if ((layer.names && layer.names.length === 1) || !layer.isRaster()) {\r\n                                    if (layer && prevLayer !== layer) {\r\n                                        self.setLayer(layer).then(() => {\r\n                                            //button.classList.toggle(TC.Consts.classes.ACTIVE, self.layer === layer);\r\n                                            self.openEditSession();\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        self.setLayer(null);\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        var editLayers = [];\r\n        if (self.map) {\r\n            for (var i = 0, len = self.map.workLayers.length; i < len; i++) {\r\n                var wl = self.map.workLayers[i];\r\n                if (wl.type === TC.Consts.layerType.WFS && !wl.options.stealth) {\r\n                    editLayers.push({\r\n                        id: wl.id,\r\n                        title: wl.title || wl.id\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return self._set1stRenderPromise(TC.Control.prototype.renderData.call(self, {\r\n            layers: editLayers,\r\n            showOriginalFeatures: self.showsOriginalFeatures,\r\n            highlightChanges: self.highlightsAdded || self.highlightsModified || self.highlightsRemoved,\r\n            controlId: self.id\r\n        }, function () {\r\n\r\n            self._layerDiv = self.div.querySelector(self._classSelector + '-layer');\r\n            self._layerSelect = self._layerDiv.querySelector(self._classSelector + '-layer-sel');\r\n            self._layerSelect.addEventListener('change', function (e) {\r\n                setEditState(self, false);\r\n                self.getEditableLayer(self._layerSelect.value)\r\n                    .then(function (layer) {\r\n                        self.setLayer(layer.wmsLayer || layer).then(function () {\r\n                            if (self.layer) {\r\n                                self.openEditSession();\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(() => {\r\n                        self.setLayer(null);\r\n                    });\r\n            });\r\n\r\n            const viewToolsDiv = self.div.querySelector(self._classSelector + '-view');\r\n\r\n            self._editingWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-watch`);\r\n            self._beforeEditLayerWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-original-watch`);\r\n            self._addedWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-added-watch`);\r\n            self._modifiedWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-modified-watch`);\r\n            self._removedWatch = viewToolsDiv.querySelector(`.${self.CLASS}-view-removed-watch`);\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-original-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.showOriginalFeatures(e.target.checked);\r\n            });\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-added-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.highlightAdded(e.target.checked);\r\n            });\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-modified-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.highlightModified(e.target.checked);\r\n            });\r\n\r\n            viewToolsDiv.querySelector(`#${self.CLASS}-view-removed-cb-${self.id}`).addEventListener('change', function (e) {\r\n                self.highlightRemoved(e.target.checked);\r\n            });\r\n\r\n            const colorRegExp = new RegExp(`${self.CLASS}-view-clr-(.+)-${self.id}`);\r\n            const onColorClick = function (e) {\r\n                const input = this.parentElement.querySelector('input[type=color]');\r\n                const layerEditData = self.getLayerEditData();\r\n                const layer = layerEditData[input.id.match(colorRegExp)[1] + 'FeaturesLayer'];\r\n                switch (layerEditData.geometryType) {\r\n                    case TC.Consts.geom.POINT:\r\n                        input.value = layer.styles.point.strokeColor;\r\n                        break;\r\n                    case TC.Consts.geom.POLYLINE:\r\n                    case TC.Consts.geom.MULTIPOLYLINE:\r\n                        input.value = layer.styles.line.strokeColor;\r\n                        break;\r\n                    default:\r\n                        input.value = layer.styles.polygon.strokeColor;\r\n                        break;\r\n                }\r\n                input.click();\r\n            };\r\n\r\n            const onColorChange = function (e) {\r\n                const input = e.target;\r\n                const layerEditData = self.getLayerEditData();\r\n                const prefix = input.id.match(colorRegExp)[1];\r\n                const layer = layerEditData[prefix + 'FeaturesLayer'];\r\n                const newColor = layerEditData[prefix + 'CustomColor'] = input.value;\r\n                switch (layerEditData.geometryType) {\r\n                    case TC.Consts.geom.POINT:\r\n                        layer.styles.point.strokeColor = newColor;\r\n                        break;\r\n                    case TC.Consts.geom.POLYLINE:\r\n                    case TC.Consts.geom.MULTIPOLYLINE:\r\n                        layer.styles.line.strokeColor = newColor;\r\n                        break;\r\n                    default:\r\n                        layer.styles.polygon.strokeColor = newColor;\r\n                        layer.styles.polygon.fillColor = newColor;\r\n                        break;\r\n                }\r\n                layer.setStyles(layer.styles);\r\n                self[`_${prefix}Watch`].src = getLegendImage(layer, layerEditData.geometryType);\r\n            };\r\n\r\n            const addedColorInputId = `${self.CLASS}-view-clr-added-${self.id}`;\r\n            viewToolsDiv.querySelector(`label[for=\"${addedColorInputId}\"]`).addEventListener(TC.Consts.event.CLICK, onColorClick);\r\n            document.getElementById(addedColorInputId).addEventListener('change', onColorChange);\r\n\r\n            const modifiedColorInputId = `${self.CLASS}-view-clr-modified-${self.id}`;\r\n            viewToolsDiv.querySelector(`label[for=\"${modifiedColorInputId}\"]`).addEventListener(TC.Consts.event.CLICK, onColorClick);\r\n            document.getElementById(modifiedColorInputId).addEventListener('change', onColorChange);\r\n\r\n            const removedColorInputId = `${self.CLASS}-view-clr-removed-${self.id}`;\r\n            viewToolsDiv.querySelector(`label[for=\"${removedColorInputId}\"]`).addEventListener(TC.Consts.event.CLICK, onColorClick);\r\n            document.getElementById(removedColorInputId).addEventListener('change', onColorChange);\r\n\r\n            self._saveBtn = self.div.querySelector(self._classSelector + '-btn-save');\r\n            self._saveBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                TC.confirm(self.getLocaleString('edit.applyEdits.confirm', { layerTitle: getLayerTitle(self.layer) }), function () {\r\n                    self.applyEdits();\r\n                });\r\n            });\r\n            \r\n            self._discardBtn = self.div.querySelector(self._classSelector + '-btn-discard');\r\n            self._discardBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                TC.confirm(self.getLocaleString('edit.discardEdits.confirm', { layerTitle: getLayerTitle(self.layer) }), function () {\r\n                    self.discardEdits();\r\n                });\r\n            });\r\n\r\n            self._recropBtn = self.div.querySelector(`.${self.CLASS}-view button.${self.CLASS}-btn-crop`);\r\n            self._recropBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                if (self.layer) {\r\n                    const reload = () => {\r\n                        if (self.layer && self.layer.wfsLayer && TC.filter && TC.filter.Bbox && self.layer.wfsLayer.properties instanceof TC.filter.Bbox) {\r\n                            const layerEditData = self.getLayerEditData();\r\n                            self.layer.wfsLayer.properties = new TC.filter.Bbox(null, self.map.getExtent(), self.map.getCRS());\r\n                            self.layer.wfsLayer.refresh();\r\n                            if (layerEditData.beforeEditLayer) {\r\n                                layerEditData.beforeEditLayer.properties = self.layer.wfsLayer.properties;\r\n                                layerEditData.beforeEditLayer.refresh();\r\n                            }\r\n                        }\r\n                    };\r\n                    const layerEditData = self.getLayerEditData();\r\n                    const editedFeatures = layerEditData.addedFeaturesLayer.features.concat(layerEditData.modifiedFeaturesLayer.features, layerEditData.removedFeaturesLayer.features);\r\n                    if (editedFeatures.length) {\r\n                        TC.loadJS(\r\n                            !TC.Geometry,\r\n                            TC.apiLocation + 'TC/Geometry',\r\n                            function () {\r\n                                let featuresOutside = false;\r\n                                const extent = self.map.getExtent();\r\n                                const bbox = [[extent[0], extent[1]], [extent[0], extent[3]], [extent[2], extent[3]], [extent[2], extent[1]]];\r\n                                for (var i = 0, ii = editedFeatures.length; i < ii; i++) {\r\n                                    if (!TC.Geometry.intersects(editedFeatures[i].geometry, bbox)) {\r\n                                        featuresOutside = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (featuresOutside) {\r\n                                    TC.confirm(self.getLocaleString('refreshLayerToCurrentExtent.confirm'), function () {\r\n                                        reload();\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    reload();\r\n                                }\r\n                            }\r\n                        );\r\n                    }\r\n                    else {\r\n                        reload();\r\n                    }\r\n                    \r\n                }\r\n            });\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto.addLayer = function (layer) {\r\n        const self = this;\r\n        const appendOption = function (layer) {\r\n            const option = document.createElement('option');\r\n            option.setAttribute('value', layer.id);\r\n            option.innerHTML = getLayerTitle(layer);\r\n            self.renderPromise().then(function () {\r\n                self._layerSelect.appendChild(option);\r\n            });\r\n        };\r\n        if (!layer.isBase && !layer.options.readOnly && !layer.options.stealth) {\r\n            self.getEditableLayer(layer)\r\n                .then(function (l) {\r\n                    // Añadimos opción cuando es una capa WMS con WFS asociado o una capa WFS independiente\r\n                    if (layer.isRaster() || !l.wmsLayer) {\r\n                        appendOption(layer);\r\n                    }\r\n                })\r\n                .catch((err) => console.log(`Layer ${layer.id} not editable. Reason: ${err.message}`));\r\n        }\r\n    };\r\n\r\n    ctlProto.setLayer = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            const map = self.map;\r\n            const selector = self.div.querySelector(self._classSelector + '-layer-sel');\r\n\r\n            layer = map.getLayer(layer);\r\n            const mapLayer = map.workLayers.filter(l => l === layer)[0];\r\n\r\n            const setNewLayer = function () {\r\n                if (mapLayer) {\r\n                    self.getEditableLayer(mapLayer)\r\n                        .then(function (editableLayer) {\r\n                            const endProcess = function () {\r\n                                self.layer = mapLayer;\r\n                                self._enableEditSerialization(mapLayer)\r\n                                    .then(function () {\r\n                                        self.getEditControl().then(c => {\r\n                                            selector.value = self.layer.id;\r\n                                            c.setMode(null);\r\n                                            c.setLayer(editableLayer);\r\n                                            resolve(self.layer);\r\n                                        });\r\n                                    })\r\n                                    .catch((err) => {\r\n                                        self.setLayer(null);\r\n                                        reject(err);\r\n                                    });\r\n                            };\r\n\r\n                            if (map.workLayers.indexOf(editableLayer) >= 0) {\r\n                                endProcess();\r\n                            }\r\n                            else {\r\n                                map.addLayer(editableLayer).then(endProcess);\r\n                            }\r\n                        })\r\n                        .catch(() => {\r\n                            self.setLayer(null);\r\n                            resolve(null);\r\n                        });\r\n                }\r\n                else {\r\n                    if (self.layer && self.layer.wfsLayer) {\r\n                        self._removingLayer = self.layer.wfsLayer;\r\n                    }\r\n                    self.getEditControl().then(c => {\r\n                        setEditState(self, false);\r\n                        //setChangedState(self, false);\r\n                        self.closeEditSession()\r\n                            .then(() => {\r\n                                selector.value = '';\r\n                                c.setMode(null);\r\n                                c.setLayer(null);\r\n                                self.layer = null;\r\n                                resolve(null);\r\n                            })\r\n                            .finally(() => {\r\n                                delete self._removingLayer;\r\n                            });\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (layer === null || !self.layer) {\r\n                setNewLayer();\r\n            }\r\n            else {\r\n                if (self.layer.wfsLayer) {\r\n                    self._removingLayer = self.layer.wfsLayer;\r\n                }\r\n                self.closeEditSession().then(() => {\r\n                    if (mapLayer) {\r\n                        setNewLayer();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto._storeFeatureAdd = function (feature) {\r\n        const self = this;\r\n        feature.provId = getNewFeatureId();\r\n        const layerEditData = self.getLayerEditData();\r\n        const newFeature = self._createAuxFeature(feature);\r\n        layerEditData.addedFeaturesLayer.addFeature(newFeature);\r\n        storeFeature(getAddedStoragePrefix(self) + feature.provId, newFeature).then(function () {\r\n            setChangedState(self, true);\r\n            //self.map.toast(self.getLocaleString('addOperationSavedInSession'));\r\n        }, function () {\r\n            TC.error(self.getLocaleString('failedWhenSavingAddOperationInSession'));\r\n        });\r\n    };\r\n\r\n    ctlProto._storeFeatureRemove = function (feature) {\r\n        const self = this;\r\n        var fid = feature.provId || feature.id;\r\n        var storeSuccess = function () {\r\n            setChangedState(self);\r\n            //self.map.toast(self.getLocaleString('removeOperationSavedInSession'));\r\n        };\r\n        var storeFailure = function () {\r\n            TC.error(self.getLocaleString('failedWhenSavingRemoveOperationInSession'));\r\n        };\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData.serializable) {\r\n            let storedFeature = layerEditData.addedFeaturesLayer.getFeatureById(fid);\r\n            if (!storedFeature) {\r\n                var removedStoragePrefix = getRemovedStoragePrefix(self);\r\n                storedFeature = layerEditData.modifiedFeaturesLayer.getFeatureById(fid);\r\n                if (!storedFeature) {\r\n                    storedFeature = layerEditData.removedFeaturesLayer.getFeatureById(fid);\r\n                    if (!storedFeature) {\r\n                        layerEditData.removedFeaturesLayer.addFeature(self._createAuxFeature(feature));\r\n                        storeFeature(removedStoragePrefix + fid, feature).then(storeSuccess, storeFailure);\r\n                    }\r\n                }\r\n                else {\r\n                    layerEditData.modifiedFeaturesLayer.removeFeature(storedFeature);\r\n                    layerEditData.removedFeaturesLayer.addFeature(self._createAuxFeature(feature));\r\n                    deleteFeature(getModifiedStoragePrefix(self) + fid).then(function () {\r\n                        storeSuccess();\r\n                        storeFeature(removedStoragePrefix + fid, feature).then(storeSuccess, storeFailure);\r\n                    }, storeFailure);\r\n                }\r\n            }\r\n            else {\r\n                layerEditData.addedFeaturesLayer.removeFeature(storedFeature);\r\n                deleteFeature(getAddedStoragePrefix(self) + fid).then(storeSuccess, storeFailure);\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto._createAuxFeature = function (feature) {\r\n        const self = this;\r\n        const fid = feature.provId || feature.id;\r\n        const layerEditData = self.getLayerEditData();\r\n        const result = new feature.constructor(feature.geometry, { geometryName: layerEditData.geometryName, data: feature.getData() });\r\n        result.setStyle(null);\r\n        result.setId(fid);\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getEditControl = function () {\r\n        const self = this;\r\n        return self._editPromise || new Promise(function (resolve, reject) {\r\n            self.renderPromise().then(() => resolve(self.editControl));\r\n        });\r\n    };\r\n\r\n    ctlProto.cacheLayer = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getServiceWorker().then(function () {\r\n                if (navigator.onLine) {\r\n                    const gfUrl = layer.wrap.getGetFeatureUrl();\r\n                    const dftUrl = layer.getDescribeFeatureTypeUrl();\r\n                    if (gfUrl && dftUrl) {\r\n                        self.createCache(getStoragePrefix(self, layer), {\r\n                            urlList: [gfUrl, dftUrl]\r\n                        }).then(() => resolve(), error => reject(error));\r\n                    }\r\n                    else {\r\n                        resolve();\r\n                    }\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            }).catch(error => reject(error));\r\n        });\r\n    };\r\n\r\n    ctlProto.getFeatureType = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            layer = layer || self.layer;\r\n            const li = map.getLoadingIndicator();\r\n            const waitId = li && li.addWait();\r\n            layer.describeFeatureType()\r\n                .then(function (attributes) {\r\n                    self.getEditControl().then(function (editControl) {\r\n                        const layerEditData = self.getLayerEditData(layer);\r\n                        // recogemos los atributos no geométricos y definimos la geometría\r\n                        layerEditData.attributes = {};\r\n                        for (var key in attributes) {\r\n                            const attr = attributes[key];\r\n                            const geometryType = editControl.getGeometryType(attr.type);\r\n                            if (geometryType) {\r\n                                layerEditData.geometryName = attr.name;\r\n                                layerEditData.geometryType = typeof geometryType === 'boolean' ? null : geometryType;\r\n                            }\r\n                            else {\r\n                                layerEditData.attributes[key] = attr;\r\n                            }\r\n                        }\r\n                        for (var key in layerEditData.attributes) {\r\n                            const attr = layerEditData.attributes[key];\r\n                            attr.type = attr.type.substr(attr.type.indexOf(':') + 1);\r\n                        }\r\n                        resolve(layerEditData);\r\n                    });\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                })\r\n                .finally(() => li && li.removeWait(waitId));\r\n        });\r\n    };\r\n\r\n    ctlProto._addAuxLayersToMap = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            layer = layer || self.layer;\r\n            const layerEditData = self.getLayerEditData(layer);\r\n            const beLayer = layerEditData.beforeEditLayer;\r\n            if (beLayer) {\r\n                const afLayer = layerEditData.addedFeaturesLayer;\r\n                const mfLayer = layerEditData.modifiedFeaturesLayer;\r\n                const rfLayer = layerEditData.removedFeaturesLayer;\r\n                Promise.all([\r\n                    map.addLayer(beLayer),\r\n                    map.addLayer(afLayer),\r\n                    map.addLayer(mfLayer),\r\n                    map.addLayer(rfLayer)\r\n                ]).then(function () {\r\n                    self.getEditableLayer(layer).then(function (editableLayer) {\r\n                        let idx = map.layers.indexOf(editableLayer);\r\n                        beLayer.setVisibility(self.showsOriginalFeatures);\r\n                        afLayer.setVisibility(self.highlightsAdded);\r\n                        mfLayer.setVisibility(self.highlightsModified);\r\n                        rfLayer.setVisibility(self.highlightsRemoved);\r\n                        self.map.insertLayer(beLayer, ++idx, function () {\r\n                            const newIdx = idx + 1;\r\n                            map.insertLayer(afLayer, newIdx);\r\n                            map.insertLayer(mfLayer, newIdx);\r\n                            map.insertLayer(rfLayer, newIdx);\r\n\r\n                            beLayer.setStyles(self.getBeforeEditLayerStyle(editableLayer));\r\n                            afLayer.setStyles(self.getAddedFeaturesLayerStyle(editableLayer));\r\n                            mfLayer.setStyles(self.getModifiedFeaturesLayerStyle(editableLayer));\r\n                            rfLayer.setStyles(self.getRemovedFeaturesLayerStyle(editableLayer));\r\n                            self._editingWatch.src = getLegendImage(editableLayer, layerEditData.geometryType);\r\n                            self._beforeEditLayerWatch.src = getLegendImage(beLayer, layerEditData.geometryType);\r\n                            self._addedWatch.src = getLegendImage(afLayer, layerEditData.geometryType);\r\n                            self._modifiedWatch.src = getLegendImage(mfLayer, layerEditData.geometryType);\r\n                            self._removedWatch.src = getLegendImage(rfLayer, layerEditData.geometryType);\r\n                            resolve();\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                reject(new Error(`No auxiliary layers for ${layer.id}`));\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.openEditSession = function () {\r\n        const self = this;\r\n        if (!self.layer) {\r\n            return Promise.reject(Error('No layer set for editing'));\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            self.getFeatureType() // Obtenemos datos de los atributos y la geometría\r\n                .then(function (layerEditData) {\r\n\r\n                    self.getEditControl().then(function (editControl) {\r\n                        self.getEditableLayer(self.layer).then(function (editableLayer) {\r\n                            editControl.setLayer(editableLayer);\r\n                            switch (layerEditData.geometryType) {\r\n                                case TC.Consts.geom.MULTIPOLYLINE:\r\n                                case TC.Consts.geom.MULTIPOLYGON:\r\n                                    editControl.setComplexGeometry(true);\r\n                                    break;\r\n                                default:\r\n                                    editControl.setComplexGeometry(false);\r\n                                    break;\r\n                            }\r\n                            editControl.activate();\r\n                            setEditState(self, true);\r\n                            setChangedState(self);\r\n\r\n                            const modes = [TC.control.Edit.mode.MODIFY, TC.control.Edit.mode.OTHER];\r\n                            switch (layerEditData.geometryType) {\r\n                                case TC.Consts.geom.POINT:\r\n                                    modes.push(TC.control.Edit.mode.ADDPOINT);\r\n                                    break;\r\n                                case TC.Consts.geom.POLYLINE:\r\n                                case TC.Consts.geom.MULTIPOLYLINE:\r\n                                    modes.push(TC.control.Edit.mode.ADDLINE);\r\n                                    //modes.push(TC.control.Edit.mode.CUT);\r\n                                    break;\r\n                                case TC.Consts.geom.POLYGON:\r\n                                case TC.Consts.geom.MULTIPOLYGON:\r\n                                    modes.push(TC.control.Edit.mode.ADDPOLYGON);\r\n                                    //modes.push(TC.control.Edit.mode.CUT);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            editControl.constrainModes(modes);\r\n                            editControl.setMode(TC.control.Edit.mode.MODIFY);\r\n\r\n                            self._addAuxLayersToMap()\r\n                                .then(() => resolve())\r\n                                .catch ((err) => reject(err));\r\n                        })\r\n                    });\r\n                })\r\n                .catch(function (err) {\r\n                    if (self.layer && self.layer.type === TC.Consts.layerType.VECTOR) {\r\n                        self.getEditControl().then(function (editControl) {\r\n                            editControl.activate();\r\n                            setEditState(self, true);\r\n                            editControl.setMode(TC.control.Edit.mode.MODIFY);\r\n                            resolve();\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject(err);\r\n                    }\r\n                });\r\n        });\r\n    };\r\n\r\n    ctlProto.closeEditSession = function () {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.renderPromise().then(function () {\r\n                setChangedState(self, false);\r\n                self.getEditControl().then(c => c.deactivate());\r\n                const layerEditData = self.getLayerEditData();\r\n                if (layerEditData && layerEditData.beforeEditLayer) {\r\n                    self._editingWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._beforeEditLayerWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._addedWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._modifiedWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    self._removedWatch.src = TC.Consts.BLANK_IMAGE;\r\n                    const previousLayer = self.layer;\r\n                    self.getEditableLayer(self.layer).then(function (editableLayer) {\r\n                        const removePromises = []\r\n                        const removeLayer = function (layer) {\r\n                            if (map.workLayers.indexOf(layer) >= 0) {\r\n                                removePromises.push(map.removeLayer(layer));\r\n                            }\r\n                        };\r\n                        removeLayer(layerEditData.beforeEditLayer);\r\n                        removeLayer(layerEditData.beforeEditLayer);\r\n                        removeLayer(layerEditData.addedFeaturesLayer);\r\n                        removeLayer(layerEditData.modifiedFeaturesLayer);\r\n                        removeLayer(layerEditData.removedFeaturesLayer);\r\n                        if (previousLayer !== editableLayer) {\r\n                            previousLayer.wfsLayer = null;\r\n                            removeLayer(editableLayer);\r\n                        }\r\n                        Promise.all(removePromises).then(() => resolve());\r\n                    });\r\n                }\r\n                else {\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.getEditableLayer = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const notEditableErrorMsg = `Layer ${layer.id} not editable`;\r\n            layer = self.map ? map.getLayer(layer) : layer;\r\n            if (layer) {\r\n                if (layer.type === TC.Consts.layerType.WFS && (layer.wmsLayer || (!layer.options.stealth && !layer.options.readOnly))) {\r\n                    layer.getCapabilitiesPromise().then(() => resolve(layer));\r\n                }\r\n                else if (layer.type === TC.Consts.layerType.WMS) {\r\n                    if (layer.wfsLayer) {\r\n                        layer.wfsLayer.getCapabilitiesPromise().then(() => resolve(layer.wfsLayer));\r\n                    }\r\n                    else {\r\n                        layer.getWFSCapabilities()\r\n                            .then(function (capabilities) {\r\n                                //comprobamos que la solo es una capa y existe en el capabilities del WFS\r\n                                const layers = layer.getDisgregatedLayerNames();\r\n                                const fullLayerName = layers[0];\r\n                                const colonIdx = fullLayerName.indexOf(':');\r\n                                const shortLayerName = fullLayerName.substring(colonIdx + 1);\r\n                                const prefix = 'Edicion'; //fullLayerName.substr(0, colonIdx + 1);\r\n                                if (layers.length !== 1 || capabilities.FeatureTypes.hasOwnProperty(shortLayerName)) {\r\n                                    TC.loadJS(\r\n                                        !TC.layer.Vector,\r\n                                        TC.apiLocation + 'TC/layer/Vector',\r\n                                        function () {\r\n                                            const wfsLayerOptions = {\r\n                                                id: self.getUID(),\r\n                                                type: TC.Consts.layerType.WFS,\r\n                                                url: layer.options.url.replace(/wms/gi, 'wfs'),\r\n                                                properties: self.map ? new TC.filter.Bbox(null, map.getExtent(), map.getCRS()) : null,\r\n                                                outputFormat: TC.Consts.format.JSON,\r\n                                                title: `${layer.getPath().join(' • ')} - ${self.getLocaleString('featureEditing')}`,\r\n                                                geometryName: 'geom',\r\n                                                featureType: [fullLayerName],\r\n                                                featureNS: prefix,\r\n                                                styles: self.styles,\r\n                                                stealth: true\r\n                                            };\r\n                                            layer.wfsLayer = new TC.layer.Vector(wfsLayerOptions);\r\n                                            layer.wfsLayer.wmsLayer = layer;\r\n                                            resolve(layer.wfsLayer);\r\n                                        }\r\n                                    );\r\n                                }\r\n                                else {\r\n                                    reject(new Error(notEditableErrorMsg));\r\n                                }\r\n                            })\r\n                            .catch((err) => reject(err));\r\n                    }\r\n                }\r\n                else if (layer.type === TC.Consts.layerType.VECTOR) {\r\n                    resolve(layer);\r\n                }\r\n                else {\r\n                    reject(new Error(notEditableErrorMsg));\r\n                }\r\n            }\r\n            else {\r\n                reject(new Error('No layer to edit'));\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.isLayerEdited = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const storagePrefix = getStoragePrefix(self, layer);\r\n            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                localforage.keys().then(function (keys) {\r\n                    if (keys) {\r\n                        resolve(keys.some(key => key.indexOf(storagePrefix) === 0));\r\n                    }\r\n                    else {\r\n                        resolve(false);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.getLayerEditData = function (optionalLayer) {\r\n        const self = this;\r\n        const layer = optionalLayer || self.layer;\r\n        if (!layer) {\r\n            return null;\r\n        }\r\n        return self.layersEditData[layer.id] = self.layersEditData[layer.id] || {\r\n            checkedOut: false\r\n        };\r\n    };\r\n\r\n    const getLegendImage = function (layer, geometryType) {\r\n        switch (geometryType) {\r\n            case TC.Consts.geom.POINT:\r\n            case TC.Consts.geom.MULTIPOINT:\r\n                return TC.Util.getLegendImageFromStyle(layer.styles.point, { geometryType: TC.Consts.geom.POINT });\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                return TC.Util.getLegendImageFromStyle(layer.styles.line, { geometryType: TC.Consts.geom.POLYLINE });\r\n            default:\r\n                return TC.Util.getLegendImageFromStyle(layer.styles.polygon, { geometryType: TC.Consts.geom.POLYGON });\r\n        }\r\n    };\r\n\r\n    ctlProto._enableEditSerialization = function (layer) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getEditableLayer(layer)\r\n                .then(function (editableLayer) {\r\n\r\n                    const endProcess = function () {\r\n                        const layerEditData = self.getLayerEditData(layer);\r\n\r\n                        const baseTitle = layer.getPath ? layer.getPath().join(' • ') : (layer.title || layer.id);\r\n\r\n                        var beforeEditLayer = layerEditData.beforeEditLayer;\r\n                        if (!beforeEditLayer) {\r\n                            beforeEditLayer = layerEditData.beforeEditLayer = new TC.layer.Vector(TC.Util.extend({}, editableLayer.options, {\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('dataBeforeEdits')}`,\r\n                                readOnly: true,\r\n                                owner: self,\r\n                                stealth: true\r\n                            }));\r\n                        }\r\n\r\n                        var addedFeaturesLayer = layerEditData.addedFeaturesLayer;\r\n                        let aflIsOld = true;\r\n                        if (!addedFeaturesLayer) {\r\n                            aflIsOld = false;\r\n                            addedFeaturesLayer = layerEditData.addedFeaturesLayer = new TC.layer.Vector({\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('addedFeatures')}`,\r\n                                owner: self,\r\n                                stealth: true,\r\n                                zIndex: 2\r\n                            });\r\n                        }\r\n\r\n                        var modifiedFeaturesLayer = layerEditData.modifiedFeaturesLayer;\r\n                        let mflIsOld = true;\r\n                        if (!modifiedFeaturesLayer) {\r\n                            mflIsOld = false;\r\n                            modifiedFeaturesLayer = layerEditData.modifiedFeaturesLayer = new TC.layer.Vector({\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('modifiedFeatures')}`,\r\n                                owner: self,\r\n                                stealth: true,\r\n                                zIndex: 2\r\n                            });\r\n                        }\r\n\r\n                        var removedFeaturesLayer = layerEditData.removedFeaturesLayer;\r\n                        let rflIsOld = true;\r\n                        if (!removedFeaturesLayer) {\r\n                            rflIsOld = false;\r\n                            removedFeaturesLayer = layerEditData.removedFeaturesLayer = new TC.layer.Vector({\r\n                                id: self.getUID(),\r\n                                title: `${baseTitle} - ${self.getLocaleString('removedFeatures')}`,\r\n                                owner: self,\r\n                                stealth: true,\r\n                                zIndex: 2\r\n                            });\r\n                        }\r\n\r\n                        const featurePromises = [];\r\n                        if (aflIsOld && mflIsOld && rflIsOld) {\r\n                            // Existen de antes las capas de adiciones, modificaciones y eliminaciones. Leemos de ahí.\r\n                            removedFeaturesLayer.features.forEach(function (removedFeature) {\r\n                                const f = editableLayer.getFeatureById(removedFeature.id);\r\n                                if (f) {\r\n                                    editableLayer.removeFeature(f);\r\n                                }\r\n                            });\r\n                            modifiedFeaturesLayer.features.forEach(function (modifiedFeature) {\r\n                                const f = editableLayer.getFeatureById(modifiedFeature.id);\r\n                                if (f) {\r\n                                    f.setCoords(modifiedFeature.geometry);\r\n                                    f.setData(modifiedFeature.getData());\r\n                                }\r\n                            });\r\n                            addedFeaturesLayer.features.forEach(function (addedFeature) {\r\n                                if (!editableLayer.getFeatureById(addedFeature.id)) {\r\n                                    featurePromises.push(editableLayer.addFeature(self._createAuxFeature(addedFeature)));\r\n                                }\r\n                            });\r\n                            Promise.all(featurePromises).then(() => {\r\n                                layerEditData.serializable = true;\r\n                                resolve(editableLayer);\r\n                            });\r\n                        }\r\n                        else {\r\n                            // Las capas de adiciones, modificaciones y eliminaciones son nuevas. Leemos de local storage.\r\n                            const storagePrefix = getStoragePrefix(self, editableLayer);\r\n                            const addedStoragePrefix = getAddedStoragePrefix(self, editableLayer);\r\n                            const modifiedStoragePrefix = getModifiedStoragePrefix(self, editableLayer);\r\n                            const removedStoragePrefix = getRemovedStoragePrefix(self, editableLayer);\r\n                            TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n                                //var li = map.getLoadingIndicator();\r\n                                localforage.keys().then(function (keys) {\r\n                                    if (keys) {\r\n                                        keys\r\n                                            .filter(key => key.indexOf(storagePrefix) === 0)\r\n                                            .forEach(function (key) {\r\n                                                //li && li.addWait(uid);\r\n                                                featurePromises.push(new Promise(function (res, rej) {\r\n                                                    readFeature(key).then(function(obj) {\r\n                                                        var id;\r\n                                                        var k = obj.key;\r\n                                                        if (k.indexOf(removedStoragePrefix) === 0) {\r\n                                                            id = k.substr(removedStoragePrefix.length);\r\n                                                            const feature = editableLayer.getFeatureById(id);\r\n                                                            editableLayer.removeFeature(feature);\r\n                                                            removedFeaturesLayer.addFeature(feature).then(() => res(feature));\r\n                                                            //li && li.removeWait(uid);\r\n                                                        }\r\n                                                        else if (k.indexOf(modifiedStoragePrefix) === 0) {\r\n                                                            id = k.substr(modifiedStoragePrefix.length);\r\n                                                            const feature = editableLayer.getFeatureById(id);\r\n                                                            if (feature) {\r\n                                                                feature.setCoords(obj.feature.geometry);\r\n                                                                feature.setData(obj.feature.attributes);\r\n                                                                const newFeature = feature.clone();\r\n                                                                newFeature.setId(feature.id);\r\n                                                                modifiedFeaturesLayer.addFeature(newFeature).then(() => res(feature));\r\n                                                                //li && li.removeWait(uid);\r\n                                                            }\r\n                                                            else {\r\n                                                                res(feature);\r\n                                                            }\r\n                                                        }\r\n                                                        else if (k.indexOf(addedStoragePrefix) === 0) {\r\n                                                            id = k.substr(addedStoragePrefix.length);\r\n                                                            var idNumber = parseInt(id.substr(id.lastIndexOf('.') + 1));\r\n                                                            newFeatureIdNumber = Math.max(newFeatureIdNumber, idNumber + 1);\r\n                                                            var addPromise;\r\n                                                            switch (obj.feature.type) {\r\n                                                                case TC.Consts.geom.POINT:\r\n                                                                    addPromise = editableLayer.addPoint(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.POLYLINE:\r\n                                                                    addPromise = editableLayer.addPolyline(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.POLYGON:\r\n                                                                    addPromise = editableLayer.addPolygon(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.MULTIPOLYLINE:\r\n                                                                    addPromise = editableLayer.addMultiPolyline(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                case TC.Consts.geom.MULTIPOLYGON:\r\n                                                                    addPromise = editableLayer.addMultiPolygon(obj.feature.geometry);\r\n                                                                    break;\r\n                                                                default:\r\n                                                                    break;\r\n                                                            };\r\n                                                            addPromise.then(function (feat) {\r\n                                                                //feat.setStyle(TC.Util.extend({}, layer.styles.line, layer.styles.polygon));\r\n                                                                feat.provId = id;\r\n                                                                feat.setData(obj.feature.attributes);\r\n                                                                const newFeat = feat.clone();\r\n                                                                newFeat.setStyle(null);\r\n                                                                newFeat.setId(feat.provId);\r\n                                                                addedFeaturesLayer.addFeature(newFeat).then(() =>  res(newFeat));\r\n                                                                //li && li.removeWait(uid);\r\n                                                            });\r\n                                                        }\r\n                                                    });\r\n                                                }));\r\n                                            });\r\n                                    }\r\n                                    Promise.all(featurePromises).then(() => {\r\n                                        layerEditData.serializable = true;\r\n                                        resolve(editableLayer);\r\n                                    });\r\n                                });\r\n                            });\r\n                        }\r\n                    };\r\n\r\n                    if (editableLayer.type === TC.Consts.layerType.WFS) {\r\n                        if (editableLayer.state === TC.Layer.state.IDLE) {\r\n                            endProcess();\r\n                        }\r\n                        else {\r\n                            const onLayerUpdate = function (e) {\r\n                                if (e.layer === editableLayer) {\r\n                                    endProcess();\r\n                                    self.map.off(TC.Consts.event.LAYERUPDATE, onLayerUpdate);\r\n                                }\r\n                            }\r\n                            self.map.on(TC.Consts.event.LAYERUPDATE, onLayerUpdate);\r\n                        }\r\n                    }\r\n                    else {\r\n                        resolve(editableLayer);\r\n                    }\r\n                });\r\n        });\r\n    };\r\n\r\n    ctlProto.applyEdits = function () {\r\n        const self = this;\r\n        if (self.layer) {\r\n            const layerEditData = self.getLayerEditData();\r\n            if (layerEditData.serializable) {\r\n                self.isSyncing = true;\r\n                setSyncState(self);\r\n                const li = self.map.getLoadingIndicator();\r\n                const waitId = li && li.addWait();\r\n                // Copiamos modificadas para ponerle el nombre de atributo de geometría descrito en DescribeFeatureType.\r\n                const modified = layerEditData.modifiedFeaturesLayer.features.map(function (feature) {\r\n                    const result = new feature.constructor(feature.geometry, { geometryName: layerEditData.geometryName });\r\n                    const unmodifiedFeature = layerEditData.beforeEditLayer.features.filter(f => f.id === feature.id)[0];\r\n                    let newData;\r\n                    if (unmodifiedFeature) {\r\n                        newData = {};\r\n                        for (var key in feature.data) {\r\n                            if (key !== 'id') {\r\n                                const oldValue = unmodifiedFeature.data[key];\r\n                                const newValue = feature.data[key];\r\n                                if (oldValue !== newValue) {\r\n                                    newData[key] = newValue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        newData = feature.data;\r\n                    }\r\n                    result.setData(newData);\r\n                    result.setId(feature.id);\r\n                    return result;\r\n                });\r\n                self.getEditableLayer(self.layer)\r\n                    .then(function (l) {\r\n                        l.applyEdits(layerEditData.addedFeaturesLayer.features, modified, layerEditData.removedFeaturesLayer.features)\r\n                            .then(function (response) {\r\n                                // SONDA DE PRUEBA, BORRAR EN PRO //\r\n                                if (response.transactionSummary.totalInserted !== layerEditData.addedFeaturesLayer.features.length ||\r\n                                    response.transactionSummary.totalUpdated !== modified.length ||\r\n                                    response.transactionSummary.totalDeleted !== layerEditData.removedFeaturesLayer.features.length) {\r\n                                    TC.error(\"Error de concordancia de número de entidades en transacción\");\r\n                                    console.log(response, layerEditData.addedFeaturesLayer, modified, layerEditData.removedFeaturesLayer);\r\n                                    throw new Error(`Error en transacción: Insertados ${response.transactionSummary.totalInserted}, hay ${layerEditData.addedFeaturesLayer.features.length} en capa`);\r\n                                }\r\n                                ////////////////////////////////////\r\n                                if (self.layer.type === TC.Consts.layerType.WMS) {\r\n                                    self.layer.refresh();\r\n                                }\r\n                                self.deleteCache(getStoragePrefix(self)).then(function () {\r\n                                    self.cacheLayer(l).then(function () {\r\n                                        self.isSyncing = false;\r\n                                        li && li.removeWait(waitId);\r\n                                        // Las acciones a realizar a partir de este punto son las mismas que al descartar una edición\r\n                                        self.discardEdits();\r\n                                        self.map.toast(self.getLocaleString('changesSuccessfullySyncedWithServer'), { type: TC.Consts.msgType.INFO });\r\n                                    });\r\n                                });\r\n                            })\r\n                            .catch(function (obj) {\r\n                                self.isSyncing = false;\r\n                                setSyncState(self);\r\n                                TC.error(self.getLocaleString('errorSyncingChanges', { code: obj.code, reason: obj.reason }), { type: TC.Consts.msgType.ERROR });\r\n                            });\r\n                    });\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.discardEdits = function () {\r\n        var self = this;\r\n        self._joinedFeatureAttributes = [];\r\n        var storagePrefix = getStoragePrefix(self);\r\n        TC.loadJS(!window.localforage, [TC.Consts.url.LOCALFORAGE], function () {\r\n            localforage.keys().then(function (keys) {\r\n                if (keys) {\r\n                    for (var i = 0, len = keys.length; i < len; i++) {\r\n                        var key = keys[i];\r\n                        if (key.indexOf(storagePrefix) === 0) {\r\n                            localforage.removeItem(key);\r\n                        }\r\n                    }\r\n                    if (self.layer) {\r\n                        const layerEditData = self.getLayerEditData();\r\n                        if (layerEditData.serializable) {\r\n                            layerEditData.addedFeaturesLayer.clearFeatures();\r\n                            layerEditData.modifiedFeaturesLayer.clearFeatures();\r\n                            layerEditData.removedFeaturesLayer.clearFeatures();\r\n                            self.editControl.setSelectedFeatures([]);\r\n                            self.editControl.modifyControl.closeAttributes();\r\n                            self.getEditableLayer(self.layer).then(l => l.refresh());\r\n                        }\r\n                    }\r\n                    setChangedState(self, false);\r\n                }\r\n            });\r\n            self.editControl.setMode(null);\r\n        });\r\n    };\r\n\r\n    ctlProto.showOriginalFeatures = function (show) {\r\n        const self = this;\r\n        self.showsOriginalFeatures = show;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData) {\r\n            layerEditData.beforeEditLayer.setVisibility(show);\r\n        }\r\n    };\r\n\r\n    ctlProto.highlightAdded = function (highlight) {\r\n        const self = this;\r\n        self.highlightsAdded = highlight;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData && layerEditData.addedFeaturesLayer) {\r\n            layerEditData.addedFeaturesLayer.setVisibility(highlight);\r\n        }\r\n    };\r\n\r\n    ctlProto.highlightModified = function (highlight) {\r\n        const self = this;\r\n        self.highlightsModified = highlight;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData && layerEditData.modifiedFeaturesLayer) {\r\n            layerEditData.modifiedFeaturesLayer.setVisibility(highlight);\r\n        }\r\n    };\r\n\r\n    ctlProto.highlightRemoved = function (highlight) {\r\n        const self = this;\r\n        self.highlightsRemoved = highlight;\r\n        const layerEditData = self.getLayerEditData();\r\n        if (layerEditData && layerEditData.removedFeaturesLayer) {\r\n            layerEditData.removedFeaturesLayer.setVisibility(highlight);\r\n        }\r\n    };\r\n\r\n    const getStyleFromFeatureType = function (ctl, layer) {\r\n        const result = {};\r\n        const layerEditData = ctl.getLayerEditData(layer.wmsLayer || layer);\r\n        switch (layerEditData.geometryType) {\r\n            case TC.Consts.geom.POLYGON:\r\n            case TC.Consts.geom.MULTIPOLYGON:\r\n                result.polygon = layer.map.options.styles.polygon;\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                result.line = layer.map.options.styles.line;\r\n                break;\r\n            default:\r\n                result.point = layer.map.options.styles.point;\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getBeforeEditLayerStyle = function (layer) {\r\n        const self = this;\r\n        const getNegativeColor = function (color) {\r\n            const rgba = layer.wrap.getRGBA(color);\r\n            for (var i = 0; i < 3; i++) {\r\n                rgba[i] = 255 - rgba[i];\r\n            }\r\n            return '#' + (rgba[0] * 65536 + rgba[1] * 256 + rgba[2]).toString(16).padStart(6, '0');\r\n        };\r\n\r\n        const dash = [1, 3];\r\n        const result = TC.Util.extend(true, {}, layer.options.styles || getStyleFromFeatureType(self, layer));\r\n        if (result.point) {\r\n            result.point.strokeColor = getNegativeColor(result.point.strokeColor);\r\n            result.point.lineDash = dash;\r\n        }\r\n        if (result.line) {\r\n            result.line.strokeColor = getNegativeColor(result.line.strokeColor);\r\n            result.line.lineDash = dash;\r\n        }\r\n        if (result.polygon) {\r\n            result.polygon.strokeColor = getNegativeColor(result.polygon.strokeColor);\r\n            result.polygon.lineDash = dash;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    const colorizeLayer = function (ctl, layer, color) {\r\n        const result = TC.Util.extend(true, {}, layer.options.styles || getStyleFromFeatureType(ctl, layer));\r\n        if (result.point) {\r\n            result.point.strokeColor = color;\r\n            result.point.fillColor = color;\r\n        }\r\n        if (result.line) {\r\n            result.line.strokeColor = color;\r\n        }\r\n        if (result.polygon) {\r\n            result.polygon.strokeColor = color;\r\n            result.polygon.fillColor = color;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getAddedFeaturesLayerStyle = function (layer) {\r\n        const self = this;\r\n        const layerEditData = self.getLayerEditData(layer.wmsLayer || layer);\r\n        return colorizeLayer(self, layer, layerEditData.addedCustomColor || '#00ff00');\r\n    };\r\n\r\n    ctlProto.getModifiedFeaturesLayerStyle = function (layer) {\r\n        const self = this;\r\n        const layerEditData = self.getLayerEditData(layer.wmsLayer || layer);\r\n        return colorizeLayer(self, layer, layerEditData.modifiedCustomColor || '#ff7f00');\r\n    };\r\n\r\n    ctlProto.getRemovedFeaturesLayerStyle = function (layer) {\r\n        const self = this;\r\n        const layerEditData = self.getLayerEditData(layer.wmsLayer || layer);\r\n        return colorizeLayer(self, layer, layerEditData.removedCustomColor || '#ff0000');\r\n    };\r\n\r\n})();"]}