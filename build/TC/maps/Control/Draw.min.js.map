{"version":3,"sources":["control/Draw.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Feature","feature","Point","Polyline","Polygon","Consts","event","DRAWSTART","DRAWEND","DRAWCANCEL","DRAWUNDO","DRAWREDO","POINT","MEASURE","MEASUREPARTIAL","STYLECHANGE","CHANGE","formatColor","color","match","length","Draw","self","this","apply","arguments","browserFeatures","inputTypeColor","window","CP","loadCSS","_classSelector","CLASS","_pointClass","_lineClass","_polygonClass","history","historyIndex","exportsState","on","e","resetValues","layer","persistent","features","clearFeatures","point","setDrawState","setFeatureAddReadyState","setId","getUID","getLocaleString","callBack","_layerPromise","inherit","ctlProto","prototype","ctl","_endBtn","disabled","mode","geom","POLYGON","POLYLINE","_redoBtn","_undoBtn","_cancelBtn","template","dust","register","body_0","chk","ctx","w","f","get","h","$key","x","block","body_1","__dustBody","render","callback","strToolTip","strokeColor","strokeWidth","options","MULTIPOLYLINE","div","classList","add","Cfg","styles","line","MULTIPOLYGON","polygon","MULTIPOINT","renderObject","tooltip","styleTools","_set1stRenderPromise","renderData","input","querySelector","style","backgroundColor","value","picker","document","body","onclick","preventDefault","onfocus","blur","onchange","map","loaded","setStrokeColor","reset","measure","_cancelClick","Util","isFunction","undefined","wrap","_newBtn","addEventListener","CLICK","new","cancel","end","undo","redo","_strokeColorPicker","target","_strokeWidthSelector","setStrokeWidth","_strokeWidthWatch","result","call","VIEWCHANGE","view","PRINTING","Promise","resolve","reject","setLayer","addLayer","id","title","stealth","owner","type","layerType","VECTOR","then","putLayerOnTop","setMode","trigger","ctrl","activate","classes","ACTIVE","remove","deactivate","clear","clearFatures","isExclusive","setStyle","extend","isActive","getModeStyle","setStrokeColorWatch","property","setStrokeWidthWatch","width","parseInt","Number","NaN","borderBottomWidth","getLayer","layerStyles","exportState","importState","state"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\nif (!TC.Feature || !TC.feature.Point) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/feature/Point');\r\n}\r\nif (!TC.Feature || !TC.feature.Polyline) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/feature/Polyline');\r\n}\r\nif (!TC.Feature || !TC.feature.Polygon) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/feature/Polygon');\r\n}\r\n\r\nTC.Consts.event.DRAWSTART = 'drawstart.tc';\r\nTC.Consts.event.DRAWEND = 'drawend.tc';\r\nTC.Consts.event.DRAWCANCEL = 'drawcancel.tc';\r\nTC.Consts.event.DRAWUNDO = 'drawundo.tc';\r\nTC.Consts.event.DRAWREDO = 'drawredo.tc';\r\nTC.Consts.event.POINT = 'point.tc';\r\nTC.Consts.event.MEASURE = 'measure.tc';\r\nTC.Consts.event.MEASUREPARTIAL = 'measurepartial.tc';\r\nTC.Consts.event.STYLECHANGE = 'stylechange.tc';\r\nTC.Consts.event.CHANGE = 'change';\r\n\r\n(function () {\r\n\r\n    const formatColor = function (color) {\r\n        const match = color.match(/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i);\r\n        if (match && match.length) {\r\n            return '#' + match[1] + match[1] + match[2] + match[2] + match[3] + match[3];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    TC.control.Draw = function () {\r\n        var self = this;\r\n\r\n        TC.Control.apply(self, arguments);\r\n\r\n        if (!TC.browserFeatures.inputTypeColor() && !window.CP) {\r\n            TC.loadCSS(TC.apiLocation + 'lib/color-picker/color-picker.min.css');\r\n            TC.syncLoadJS(TC.apiLocation + 'lib/color-picker/color-picker.min.js');\r\n        }\r\n\r\n        self._classSelector = '.' + self.CLASS;\r\n\r\n        self._pointClass = self.CLASS + '-point';\r\n        self._lineClass = self.CLASS + '-line';\r\n        self._polygonClass = self.CLASS + '-polygon';\r\n\r\n        self.history = [];\r\n        self.historyIndex = 0;\r\n        self.exportsState = true;\r\n\r\n        self\r\n            .on(TC.Consts.event.DRAWSTART, function (e) {\r\n                self.resetValues();\r\n            })\r\n            .on(TC.Consts.event.POINT, function (e) {\r\n                if (self.layer && !self.persistent && self.layer.features && self.layer.features.length > 0) {\r\n                    self.layer.clearFeatures();\r\n                }\r\n\r\n                self.history.length = self.historyIndex;\r\n                self.history[self.historyIndex++] = e.point;\r\n\r\n                setDrawState(self);\r\n            })\r\n            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                setFeatureAddReadyState(self);\r\n\r\n                e.feature.setId(TC.getUID(self.getLocaleString('sketch') + '.'));\r\n\r\n                if (self.callBack) {\r\n                    self.callBack(e.feature);\r\n                }\r\n            });\r\n\r\n        self._layerPromise = null;\r\n    };\r\n\r\n    TC.inherit(TC.control.Draw, TC.Control);\r\n\r\n    var ctlProto = TC.control.Draw.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-draw';\r\n\r\n    var setDrawState = function (ctl) {\r\n        ctl._endBtn.disabled =\r\n            ctl.historyIndex === 0 ||\r\n            (ctl.mode === TC.Consts.geom.POLYGON && ctl.historyIndex < 3) ||\r\n            (ctl.mode === TC.Consts.geom.POLYLINE && ctl.historyIndex < 2);\r\n        ctl._redoBtn.disabled = ctl.history.length === ctl.historyIndex;\r\n        ctl._undoBtn.disabled = ctl.historyIndex === 0;\r\n    };\r\n\r\n    var setFeatureAddReadyState = function (ctl) {\r\n        ctl.resetValues();\r\n        ctl._endBtn.disabled = true;\r\n        ctl._cancelBtn.disabled = false;\r\n    };\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/Draw.html\";\r\n\r\n    ctlProto.render = function (callback) {\r\n        var self = this;\r\n        var strToolTip;\r\n        var strokeColor;\r\n        var strokeWidth;\r\n        switch (self.options.mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                strToolTip = self.getLocaleString('drawLine');\r\n                self.div.classList.add(self._lineClass);\r\n                strokeColor = TC.Cfg.styles.line.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.line.strokeWidth;\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n            case TC.Consts.geom.MULTIPOLYGON:\r\n                strToolTip = self.getLocaleString('drawPolygon');\r\n                self.div.classList.add(self._polygonClass);\r\n                strokeColor = TC.Cfg.styles.polygon.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.polygon.strokeWidth;\r\n                break;\r\n            case TC.Consts.geom.POINT:\r\n            case TC.Consts.geom.MULTIPOINT:\r\n                strToolTip = self.getLocaleString('drawPoint');\r\n                self.div.classList.add(self._pointClass);\r\n                strokeColor = TC.Cfg.styles.point.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.point.strokeWidth;\r\n                break;\r\n            default:\r\n                strToolTip = self.getLocaleString('draw');\r\n                strokeColor = TC.Cfg.styles.line.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.line.strokeWidth;\r\n                break;\r\n        }\r\n        const renderObject = {\r\n            tooltip: strToolTip,\r\n            strokeColor: formatColor(strokeColor),\r\n            strokeWidth: strokeWidth,\r\n            styleTools: self.options.styleTools\r\n        };\r\n        return self._set1stRenderPromise(self.renderData(renderObject, function () {\r\n            if (!TC.browserFeatures.inputTypeColor()) {\r\n                // El navegador no soporta input[type=color], usamos polyfill\r\n                const input = self.div.querySelector('input[type=color]');\r\n                if (input) {\r\n                    input.style.backgroundColor = input.value;\r\n                    input.style.color = 'transparent';\r\n                    const picker = new CP(input, 'click', document.body);\r\n\r\n                    input.onclick = function (e) {\r\n                        e.preventDefault();\r\n                    };\r\n\r\n                    // Evitamos que salga el teclado virtual en iOS\r\n                    input.onfocus = function (e) {\r\n                        this.blur();\r\n                    };\r\n\r\n                    input.onchange = function (e) {\r\n                        this.style.backgroundColor = this.value;\r\n                    };\r\n\r\n                    self.map.loaded(function () {\r\n                        picker.on(\"change\", function (color) {\r\n                            self.setStrokeColor('#' + color);\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n            self.reset = true;\r\n            self.callBack = null;\r\n            self.measure = false;\r\n            self._cancelClick = false;\r\n\r\n            self.mode = self.options.mode || TC.Consts.geom.POLYLINE;\r\n\r\n            if (self.options.measure)\r\n                self.measure = self.options.measure\r\n            if (TC.Util.isFunction(self.options.callback))\r\n                self.callBack = self.options.callback;\r\n            if (self.options.persistent === undefined) {\r\n                self.persistent = true;\r\n            }\r\n            else {\r\n                self.persistent = self.options.persistent;\r\n            }\r\n\r\n            self.wrap = new TC.wrap.control.Draw(self);\r\n\r\n            self._newBtn = self.div.querySelector(self._classSelector + '-btn-new');\r\n            self._newBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.new();\r\n            });\r\n\r\n            self._cancelBtn = self.div.querySelector(self._classSelector + '-btn-cancel');\r\n            self._cancelBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.cancel();\r\n            });\r\n\r\n            self._endBtn = self.div.querySelector(self._classSelector + '-btn-end');\r\n            self._endBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.end();\r\n            });\r\n\r\n            self._undoBtn = self.div.querySelector(self._classSelector + '-btn-undo');\r\n            self._undoBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.undo();\r\n            });\r\n\r\n            self._redoBtn = self.div.querySelector(self._classSelector + '-btn-redo');\r\n            self._redoBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.redo();\r\n            });\r\n\r\n            if (self.options.styleTools) {\r\n                self._strokeColorPicker = self.div.querySelector(self._classSelector + '-str-c');\r\n                self._strokeColorPicker.addEventListener(TC.Consts.event.CHANGE, function (e) {\r\n                    self.setStrokeColor(e.target.value);\r\n                });\r\n\r\n                self._strokeWidthSelector = self.div.querySelector(self._classSelector + '-str-w');\r\n                self._strokeWidthSelector.addEventListener(TC.Consts.event.CHANGE, function (e) {\r\n                    self.setStrokeWidth(e.target.value);\r\n                });\r\n                self._strokeWidthWatch = self.div.querySelector(self._classSelector + '-str-w-watch');\r\n            }\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        self.map.on(TC.Consts.event.VIEWCHANGE, function () {\r\n            if (self.map.view === TC.Consts.view.PRINTING) {\r\n                self.end();\r\n\r\n                // No lanzo el evento porque da error al no llegar una feature\r\n                // self.trigger(TC.Consts.event.DRAWEND);\r\n            }\r\n        });\r\n\r\n        self._layerPromise = new Promise(function (resolve, reject) {\r\n            map.loaded(function () {\r\n                if (self.options.layer) {\r\n                    self.setLayer(self.options.layer);\r\n                    resolve(self.layer);\r\n                }\r\n                else {\r\n                    // Si self.options.layer === false se instancia el control sin capa asociada\r\n                    if (self.options.layer === false) {\r\n                        self.setLayer(null);\r\n                        resolve(null);\r\n                    }\r\n                    else {\r\n                        map.addLayer({\r\n                            id: self.getUID(),\r\n                            title: 'DrawControl',\r\n                            stealth: true,\r\n                            owner: self,\r\n                            type: TC.Consts.layerType.VECTOR,\r\n                            styles: {\r\n                                point: map.options.styles.point,\r\n                                line: map.options.styles.line,\r\n                                polygon: map.options.styles.polygon\r\n                            }\r\n                        }).then(function (layer) {\r\n                            map.putLayerOnTop(layer);\r\n                            self.setLayer(layer);\r\n                            resolve(self.layer);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.new = function () {\r\n        var self = this;\r\n        if (self.layer && !self.persistent) {\r\n            self.layer.clearFeatures();\r\n        }\r\n        self._cancelBtn.disabled = false;\r\n        self.setMode(self.mode, true);\r\n        return self;\r\n    };\r\n\r\n    ctlProto.undo = function () {\r\n        var self = this;\r\n        var result = self.wrap.undo();\r\n        if (result) {\r\n            self.historyIndex--;\r\n            setDrawState(self);\r\n\r\n            if (self.historyIndex <= 0) {\r\n                self.resetValues();\r\n            }\r\n            self.trigger(TC.Consts.event.DRAWUNDO);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.redo = function () {\r\n        var self = this;\r\n        var result = this.wrap.redo();\r\n        if (result) {\r\n            self.historyIndex++;\r\n            setDrawState(self);\r\n            self.trigger(TC.Consts.event.DRAWREDO);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.cancel = function () {\r\n        var self = this;\r\n        self._cancelClick = true;\r\n        this.setMode(null, false);\r\n        self.resetValues();\r\n        setFeatureAddReadyState(self);\r\n        self._cancelBtn.disabled = true;\r\n        self.trigger(TC.Consts.event.DRAWCANCEL, { ctrl: self });\r\n        return self;\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        self._newBtn.classList.add(TC.Consts.classes.ACTIVE);\r\n        self._cancelBtn.disabled = false;\r\n        TC.Control.prototype.activate.call(self);\r\n        self.wrap.activate(self.mode);\r\n        self.div.classList.remove(self._pointClass, self._lineClass, self._polygonClass);\r\n        switch (self.mode) {\r\n            case TC.Consts.geom.POINT:\r\n                self.div.classList.add(self._pointClass);\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n                self.div.classList.add(self._lineClass);\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self.div.classList.add(self._polygonClass);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        var self = this;\r\n        if (self._newBtn) {\r\n            self._newBtn.classList.remove(TC.Consts.classes.ACTIVE);\r\n        }\r\n        if (self._cancelBtn) {\r\n            self._cancelBtn.disabled = true;\r\n        }\r\n        TC.Control.prototype.deactivate.call(self, !self._cancelClick);\r\n        if (self.wrap) {\r\n            self.wrap.deactivate();\r\n        }\r\n        self.resetValues();\r\n        //self.trigger(TC.Consts.event.DRAWCANCEL, { ctrl: self });\r\n        self._cancelClick = false;\r\n    };\r\n\r\n    ctlProto.clear = function () {\r\n        const self = this;\r\n        if (self.layer) {\r\n            self.layer.clearFatures();\r\n        }\r\n        self.resetValues();\r\n        return self;\r\n    };\r\n\r\n    ctlProto.isExclusive = function () {\r\n        return true;\r\n    };\r\n\r\n    ctlProto.end = function () {\r\n        const self = this;\r\n        self.wrap.end();\r\n        self.resetValues();\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setMode = function (mode, activate) {\r\n        const self = this;\r\n\r\n        if (mode)\r\n            self.mode = mode;\r\n\r\n        if (activate && mode) {\r\n            //if (self.layer) {\r\n                //self.layer.map.putLayerOnTop(self.layer);\r\n            //}\r\n            self.activate();\r\n        }\r\n        else {\r\n            self.deactivate();\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStyle = function (style) {\r\n        const self = this;\r\n        if (style) {\r\n            self.style = TC.Util.extend(self.style, style);\r\n        }\r\n        else {\r\n            switch (self.options.mode) {\r\n                case TC.Consts.geom.POLYLINE:\r\n                case TC.Consts.geom.MULTIPOLYLINE:\r\n                    style = { line: self.styles.line };\r\n                    break;\r\n                case TC.Consts.geom.POLYGON:\r\n                case TC.Consts.geom.MULTIPOLYGON:\r\n                    style = { polygon: self.styles.polygon };\r\n                    break;\r\n                case TC.Consts.geom.POINT:\r\n                case TC.Consts.geom.MULTIPOINT:\r\n                    style = { point: self.styles.point };\r\n                    break;\r\n                default:\r\n                    style = {};\r\n                    break;\r\n            }\r\n        }\r\n        if (self.isActive) {\r\n            self.wrap.setStyle(style);\r\n        }\r\n    };\r\n\r\n    ctlProto.getModeStyle = function(mode) {\r\n        const self = this;\r\n        mode = mode || self.options.mode;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                return self.styles.line;\r\n            case TC.Consts.geom.POLYGON:\r\n            case TC.Consts.geom.MULTIPOLYGON:\r\n                return self.styles.polygon;\r\n            case TC.Consts.geom.POINT:\r\n            case TC.Consts.geom.MULTIPOINT:\r\n                return self.styles.point;\r\n            default:\r\n                return null;\r\n                break;\r\n        }\r\n    };\r\n\r\n    ctlProto.setStrokeColorWatch = function (color) {\r\n        const self = this;\r\n        if (self.options.styleTools) {\r\n            if (color === undefined) {\r\n                color = self.getModeStyle().strokeColor;\r\n            }\r\n            const match = color.match(/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i);\r\n            if (match && match.length) {\r\n                color = '#' + match[1] + match[1] + match[2] + match[2] + match[3] + match[3];\r\n            }\r\n            self._strokeColorPicker.value = color;\r\n            if (!TC.browserFeatures.inputTypeColor()) {\r\n                const input = self._strokeColorPicker;\r\n                input.style.backgroundColor = color;\r\n                input.blur();\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStrokeColor = function (color) {\r\n        const self = this;\r\n        const style = self.getModeStyle();\r\n        if (style) {\r\n            style.strokeColor = color;\r\n        }\r\n\r\n        // Resetea el estilo\r\n        if (self.isActive) {\r\n            self.setStyle();\r\n        }\r\n\r\n        self.setStrokeColorWatch(color);\r\n        self.trigger(TC.Consts.event.STYLECHANGE, { property: 'strokeColor', value: color });\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStrokeWidthWatch = function (width) {\r\n        const self = this;\r\n        if (self.options.styleTools) {\r\n            if (width === undefined) {\r\n                width = self.getModeStyle().strokeWidth;\r\n            }\r\n            width = parseInt(width, 10);\r\n            if (width !== Number.NaN) {\r\n                self._strokeWidthSelector.value = width;\r\n                self._strokeWidthWatch.style.borderBottomWidth = width + 'px';\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStrokeWidth = function(width) {\r\n        const self = this;\r\n        width = parseInt(width, 10);\r\n        if (width !== Number.NaN) {\r\n            const style = self.getModeStyle();\r\n            if (style) {\r\n                style.strokeWidth = width;\r\n            }\r\n\r\n            // Resetea el estilo\r\n            if (self.isActive) {\r\n                self.setStyle();\r\n            }\r\n\r\n            self.setStrokeWidthWatch(width);\r\n            self.trigger(TC.Consts.event.STYLECHANGE, { property: 'strokeWidth', value: width });\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getLayer = function () {\r\n        const self = this;\r\n        if (self.layer) {\r\n            return Promise.resolve(self.layer);\r\n        }\r\n        return this._layerPromise;\r\n    };\r\n\r\n    ctlProto.setLayer = function (layer) {\r\n        const self = this;\r\n        if (self.map) {\r\n            if (typeof (layer) === \"string\") {\r\n                self.layer = self.map.getLayer(layer);\r\n            }\r\n            else {\r\n                self.layer = layer;\r\n            }\r\n\r\n            self.styles = {};\r\n            const layerStyles = (self.layer && self.layer.styles) || TC.Cfg.styles;\r\n            TC.Util.extend(true, self.styles, self.options.styles || layerStyles);\r\n\r\n        }\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        self.history.length = 0;\r\n        self.historyIndex = 0;\r\n        setDrawState(self);\r\n        return self;\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState) {\r\n            return {\r\n                id: self.id,\r\n                layer: self.layer.exportState()\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n        const self = this;\r\n        self.getLayer().then(function (layer) {\r\n            layer.importState(state.layer);\r\n        });\r\n    };\r\n})();"]}