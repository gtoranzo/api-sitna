{"version":3,"sources":["control/Draw.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Feature","feature","Point","Polyline","Polygon","Consts","event","DRAWSTART","DRAWEND","DRAWCANCEL","DRAWUNDO","DRAWREDO","MEASURE","MEASUREPARTIAL","STYLECHANGE","CHANGE","Draw","self","this","apply","arguments","Modernizr","inputtypes","color","window","CP","loadCSS","_classSelector","CLASS","_pointClass","_lineClass","_polygonClass","history","historyIndex","exportsState","on","e","resetValues","POINT","layer","persistent","features","length","clearFeatures","point","setDrawState","setFeatureAddReadyState","setId","getUID","getLocaleString","callBack","_layerPromise","inherit","ctlProto","prototype","ctl","_endBtn","disabled","mode","geom","POLYGON","POLYLINE","_redoBtn","_undoBtn","_cancelBtn","isDebug","template","dust","register","body_0","chk","ctx","w","f","get","h","$key","x","block","body_1","__dustBody","render","callback","strToolTip","strokeColor","strokeWidth","options","MULTIPOLYLINE","div","classList","add","Cfg","styles","line","MULTIPOLYGON","polygon","MULTIPOINT","renderObject","tooltip","match","formatColor","styleTools","_set1stRenderPromise","renderData","input","querySelector","style","backgroundColor","value","picker","document","body","onclick","preventDefault","onfocus","blur","onchange","map","loaded","setStrokeColor","reset","measure","_cancelClick","$","isFunction","undefined","wrap","_newBtn","addEventListener","CLICK","new","cancel","end","undo","redo","_strokeColorPicker","target","_strokeWidthSelector","setStrokeWidth","_strokeWidthWatch","result","call","VIEWCHANGE","view","PRINTING","setStyles","extend","Promise","resolve","reject","setLayer","addLayer","id","title","stealth","type","layerType","VECTOR","then","putLayerOnTop","setMode","trigger","ctrl","activate","classes","ACTIVE","remove","deactivate","clear","clearFatures","isExclusive","setStyle","isActive","getModeStyle","setStrokeColorWatch","property","setStrokeWidthWatch","width","parseInt","Number","NaN","borderBottomWidth","getLayer","exportState","importState","state"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\nif (!TC.Feature || !TC.feature.Point) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/feature/Point');\r\n}\r\nif (!TC.Feature || !TC.feature.Polyline) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/feature/Polyline');\r\n}\r\nif (!TC.Feature || !TC.feature.Polygon) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/feature/Polygon');\r\n}\r\n\r\nTC.Consts.event.DRAWSTART = 'drawstart.tc';\r\nTC.Consts.event.DRAWEND = 'drawend.tc';\r\nTC.Consts.event.DRAWCANCEL = 'drawcancel.tc';\r\nTC.Consts.event.DRAWUNDO = 'drawundo.tc';\r\nTC.Consts.event.DRAWREDO = 'drawredo.tc';\r\nTC.Consts.event.MEASURE = 'measure.tc';\r\nTC.Consts.event.MEASUREPARTIAL = 'measurepartial.tc';\r\nTC.Consts.event.STYLECHANGE = 'stylechange.tc';\r\nTC.Consts.event.CHANGE = 'change';\r\n\r\n(function () {\r\n\r\n    const formatColor = function (color) {\r\n        const match = color.match(/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i);\r\n        if (match && match.length) {\r\n            return '#' + match[1] + match[1] + match[2] + match[2] + match[3] + match[3];\r\n        }\r\n        return color;\r\n    };\r\n\r\n    TC.control.Draw = function () {\r\n        var self = this;\r\n\r\n        TC.Control.apply(self, arguments);\r\n\r\n        if (!Modernizr.inputtypes.color && !window.CP) {\r\n            TC.loadCSS(TC.apiLocation + 'lib/color-picker/color-picker.min.css');\r\n            TC.syncLoadJS(TC.apiLocation + 'lib/color-picker/color-picker.min.js');\r\n        }\r\n\r\n        self._classSelector = '.' + self.CLASS;\r\n\r\n        self._pointClass = self.CLASS + '-point';\r\n        self._lineClass = self.CLASS + '-line';\r\n        self._polygonClass = self.CLASS + '-polygon';\r\n\r\n        self.history = [];\r\n        self.historyIndex = 0;\r\n        self.exportsState = true;\r\n\r\n        self\r\n            .on(TC.Consts.event.DRAWSTART, function (e) {\r\n                self.resetValues();\r\n            })\r\n            .on(TC.Consts.event.POINT, function (e) {\r\n                if (self.layer && !self.persistent && self.layer.features && self.layer.features.length > 0) {\r\n                    self.layer.clearFeatures();\r\n                }\r\n\r\n                self.history.length = self.historyIndex;\r\n                self.history[self.historyIndex++] = e.point;\r\n\r\n                setDrawState(self);\r\n            })\r\n            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                setFeatureAddReadyState(self);\r\n\r\n                e.feature.setId(TC.getUID(self.getLocaleString('sketch') + '.'));\r\n\r\n                if (self.callBack) {\r\n                    self.callBack(e.feature);\r\n                }\r\n            });\r\n\r\n        self._layerPromise = null;\r\n    };\r\n\r\n    TC.inherit(TC.control.Draw, TC.Control);\r\n\r\n    var ctlProto = TC.control.Draw.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-draw';\r\n\r\n    var setDrawState = function (ctl) {\r\n        ctl._endBtn.disabled =\r\n            ctl.historyIndex === 0 ||\r\n            (ctl.mode === TC.Consts.geom.POLYGON && ctl.historyIndex < 3) ||\r\n            (ctl.mode === TC.Consts.geom.POLYLINE && ctl.historyIndex < 2);\r\n        ctl._redoBtn.disabled = ctl.history.length === ctl.historyIndex;\r\n        ctl._undoBtn.disabled = ctl.historyIndex === 0;\r\n    };\r\n\r\n    var setFeatureAddReadyState = function (ctl) {\r\n        ctl.resetValues();\r\n        ctl._endBtn.disabled = true;\r\n        ctl._cancelBtn.disabled = false;\r\n    };\r\n\r\n    if (TC.isDebug) {\r\n        ctlProto.template = TC.apiLocation + \"TC/templates/Draw.html\";\r\n    }\r\n    else {\r\n        ctlProto.template = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-draw-tools\\\"><button class=\\\"tc-ctl-btn tc-ctl-draw-btn-new\\\" title=\\\"\").f(ctx.get([\"tooltip\"], false), ctx, \"h\").w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"new\" }).w(\"</button><button class=\\\"tc-ctl-btn tc-ctl-draw-btn-undo\\\" disabled title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"undo\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"undo\" }).w(\"</button><button class=\\\"tc-ctl-btn tc-ctl-draw-btn-redo\\\" disabled title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"redo\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"redo\" }).w(\"</button><button class=\\\"tc-ctl-btn tc-ctl-draw-btn-end\\\" disabled title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"end\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"end\" }).w(\"</button><button class=\\\"tc-ctl-btn tc-ctl-draw-btn-cancel\\\" title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"cancel\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"cancel\" }).w(\"</button></div>\").x(ctx.get([\"styleTools\"], false), ctx, { \"block\": body_1 }, {}); } body_0.__dustBody = !0; function body_1(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-draw-style\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"strokeColor\" }).w(\"<input type=\\\"color\\\" class=\\\"tc-ctl-col tc-ctl-draw-str-c\\\" value=\\\"\").f(ctx.get([\"strokeColor\"], false), ctx, \"h\").w(\"\\\" title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"selectColor\" }).w(\"\\\" />\").h(\"i18n\", ctx, {}, { \"$key\": \"strokeWidth\" }).w(\"<div class=\\\"tc-ctl-draw-str-w-watch\\\" style=\\\"border-bottom-width:\").f(ctx.get([\"strokeWidth\"], false), ctx, \"h\").w(\"px;\\\"> </div><input type=\\\"number\\\" class=\\\"tc-ctl-draw-str-w tc-textbox\\\" value=\\\"\").f(ctx.get([\"strokeWidth\"], false), ctx, \"h\").w(\"\\\" min=\\\"1\\\" max=\\\"15\\\" /></div>\"); } body_1.__dustBody = !0; return body_0 };\r\n    }\r\n\r\n    ctlProto.render = function (callback) {\r\n        var self = this;\r\n        var strToolTip;\r\n        var strokeColor;\r\n        var strokeWidth;\r\n        switch (self.options.mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                strToolTip = self.getLocaleString('drawLine');\r\n                self.div.classList.add(self._lineClass);\r\n                strokeColor = TC.Cfg.styles.line.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.line.strokeWidth;\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n            case TC.Consts.geom.MULTIPOLYGON:\r\n                strToolTip = self.getLocaleString('drawPolygon');\r\n                self.div.classList.add(self._polygonClass);\r\n                strokeColor = TC.Cfg.styles.polygon.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.polygon.strokeWidth;\r\n                break;\r\n            case TC.Consts.geom.POINT:\r\n            case TC.Consts.geom.MULTIPOINT:\r\n                strToolTip = self.getLocaleString('drawPoint');\r\n                self.div.classList.add(self._pointClass);\r\n                strokeColor = TC.Cfg.styles.point.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.point.strokeWidth;\r\n                break;\r\n            default:\r\n                strToolTip = self.getLocaleString('draw');\r\n                strokeColor = TC.Cfg.styles.line.strokeColor;\r\n                strokeWidth = TC.Cfg.styles.line.strokeWidth;\r\n                break;\r\n        }\r\n        const renderObject = {\r\n            tooltip: strToolTip,\r\n            strokeColor: formatColor(strokeColor),\r\n            strokeWidth: strokeWidth,\r\n            styleTools: self.options.styleTools\r\n        };\r\n        return self._set1stRenderPromise(self.renderData(renderObject, function () {\r\n            if (!Modernizr.inputtypes.color) {\r\n                // El navegador no soporta input[type=color], usamos polyfill\r\n                const input = self.div.querySelector('input[type=color]');\r\n                if (input) {\r\n                    input.style.backgroundColor = input.value;\r\n                    input.style.color = 'transparent';\r\n                    const picker = new CP(input, 'click', document.body);\r\n\r\n                    input.onclick = function (e) {\r\n                        e.preventDefault();\r\n                    };\r\n\r\n                    // Evitamos que salga el teclado virtual en iOS\r\n                    input.onfocus = function (e) {\r\n                        this.blur();\r\n                    };\r\n\r\n                    input.onchange = function (e) {\r\n                        this.style.backgroundColor = this.value;\r\n                    };\r\n\r\n                    self.map.loaded(function () {\r\n                        picker.on(\"change\", function (color) {\r\n                            self.setStrokeColor('#' + color);\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n            self.reset = true;\r\n            self.callBack = null;\r\n            self.measure = false;\r\n            self._cancelClick = false;\r\n\r\n            self.mode = self.options.mode || TC.Consts.geom.POLYLINE;\r\n\r\n            if (self.options.measure)\r\n                self.measure = self.options.measure\r\n            if ($.isFunction(self.options.callback))\r\n                self.callBack = self.options.callback;\r\n            if (self.options.persistent === undefined) {\r\n                self.persistent = true;\r\n            }\r\n            else {\r\n                self.persistent = self.options.persistent;\r\n            }\r\n\r\n            self.wrap = new TC.wrap.control.Draw(self);\r\n\r\n            self._newBtn = self.div.querySelector(self._classSelector + '-btn-new');\r\n            self._newBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.new();\r\n            });\r\n\r\n            self._cancelBtn = self.div.querySelector(self._classSelector + '-btn-cancel');\r\n            self._cancelBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.cancel();\r\n            });\r\n\r\n            self._endBtn = self.div.querySelector(self._classSelector + '-btn-end');\r\n            self._endBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.end();\r\n            });\r\n\r\n            self._undoBtn = self.div.querySelector(self._classSelector + '-btn-undo');\r\n            self._undoBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.undo();\r\n            });\r\n\r\n            self._redoBtn = self.div.querySelector(self._classSelector + '-btn-redo');\r\n            self._redoBtn.addEventListener(TC.Consts.event.CLICK, function () {\r\n                self.redo();\r\n            });\r\n\r\n            if (self.options.styleTools) {\r\n                self._strokeColorPicker = self.div.querySelector(self._classSelector + '-str-c');\r\n                self._strokeColorPicker.addEventListener(TC.Consts.event.CHANGE, function (e) {\r\n                    self.setStrokeColor(e.target.value);\r\n                });\r\n\r\n                self._strokeWidthSelector = self.div.querySelector(self._classSelector + '-str-w');\r\n                self._strokeWidthSelector.addEventListener(TC.Consts.event.CHANGE, function (e) {\r\n                    self.setStrokeWidth(e.target.value);\r\n                });\r\n                self._strokeWidthWatch = self.div.querySelector(self._classSelector + '-str-w-watch');\r\n            }\r\n\r\n            if ($.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        self.map.on(TC.Consts.event.VIEWCHANGE, function () {\r\n            if (self.map.view === TC.Consts.view.PRINTING) {\r\n                self.end();\r\n\r\n                // No lanzo el evento porque da error al no llegar una feature\r\n                // self.trigger(TC.Consts.event.DRAWEND);\r\n            }\r\n        });\r\n\r\n        const setStyles = function () {\r\n            self.styles = {};\r\n            $.extend(true, self.styles, self.options.styles || self.layer.options.styles);\r\n        };\r\n\r\n        self._layerPromise = new Promise(function (resolve, reject) {\r\n            map.loaded(function () {\r\n                if (self.options.layer) {\r\n                    self.setLayer(self.options.layer);\r\n                    resolve(self.layer);\r\n                    setStyles();\r\n                }\r\n                else {\r\n                    // Si self.options.layer === false se instancia el control sin capa asociada\r\n                    if (self.options.layer === false) {\r\n                        self.setLayer(null);\r\n                        resolve(null);\r\n                    }\r\n                    else {\r\n                        map.addLayer({\r\n                            id: self.getUID(),\r\n                            title: 'DrawControl',\r\n                            stealth: true,\r\n                            type: TC.Consts.layerType.VECTOR,\r\n                            styles: {\r\n                                point: map.options.styles.point,\r\n                                line: map.options.styles.line,\r\n                                polygon: map.options.styles.polygon\r\n                            }\r\n                        }).then(function (layer) {\r\n                            map.putLayerOnTop(layer);\r\n                            self.setLayer(layer);\r\n                            resolve(self.layer);\r\n                            setStyles();\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.new = function () {\r\n        var self = this;\r\n        if (self.layer && !self.persistent) {\r\n            self.layer.clearFeatures();\r\n        }\r\n        self._cancelBtn.disabled = false;\r\n        self.setMode(self.mode, true);\r\n        return self;\r\n    };\r\n\r\n    ctlProto.undo = function () {\r\n        var self = this;\r\n        var result = self.wrap.undo();\r\n        if (result) {\r\n            self.historyIndex--;\r\n            setDrawState(self);\r\n\r\n            if (self.historyIndex <= 0) {\r\n                self.resetValues();\r\n            }\r\n            self.trigger(TC.Consts.event.DRAWUNDO);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.redo = function () {\r\n        var self = this;\r\n        var result = this.wrap.redo();\r\n        if (result) {\r\n            self.historyIndex++;\r\n            setDrawState(self);\r\n            self.trigger(TC.Consts.event.DRAWREDO);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.cancel = function () {\r\n        var self = this;\r\n        self._cancelClick = true;\r\n        this.setMode(null, false);\r\n        self.resetValues();\r\n        setFeatureAddReadyState(self);\r\n        self._cancelBtn.disabled = true;\r\n        self.trigger(TC.Consts.event.DRAWCANCEL, { ctrl: self });\r\n        return self;\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        self._newBtn.classList.add(TC.Consts.classes.ACTIVE);\r\n        self._cancelBtn.disabled = false;\r\n        TC.Control.prototype.activate.call(self);\r\n        self.wrap.activate(self.mode);\r\n        self.div.classList.remove(self._pointClass);\r\n        self.div.classList.remove(self._lineClass);\r\n        self.div.classList.remove(self._polygonClass);\r\n        switch (self.mode) {\r\n            case TC.Consts.geom.POINT:\r\n                self.div.classList.add(self._pointClass);\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n                self.div.classList.add(self._lineClass);\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self.div.classList.add(self._polygonClass);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        var self = this;\r\n        if (self._newBtn) {\r\n            self._newBtn.classList.remove(TC.Consts.classes.ACTIVE);\r\n        }\r\n        if (self._cancelBtn) {\r\n            self._cancelBtn.disabled = true;\r\n        }\r\n        TC.Control.prototype.deactivate.call(self, !self._cancelClick);\r\n        if (self.wrap) {\r\n            self.wrap.deactivate();\r\n        }\r\n        self.resetValues();\r\n        //self.trigger(TC.Consts.event.DRAWCANCEL, { ctrl: self });\r\n        self._cancelClick = false;\r\n    };\r\n\r\n    ctlProto.clear = function () {\r\n        const self = this;\r\n        if (self.layer) {\r\n            self.layer.clearFatures();\r\n        }\r\n        self.resetValues();\r\n        return self;\r\n    };\r\n\r\n    ctlProto.isExclusive = function () {\r\n        return true;\r\n    };\r\n\r\n    ctlProto.end = function () {\r\n        const self = this;\r\n        self.wrap.end();\r\n        self.resetValues();\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setMode = function (mode, activate) {\r\n        const self = this;\r\n\r\n        if (mode)\r\n            self.mode = mode;\r\n\r\n        if (activate && mode) {\r\n            if (self.layer) {\r\n                self.layer.map.putLayerOnTop(self.layer);\r\n            }\r\n            self.activate();\r\n        }\r\n        else {\r\n            self.deactivate();\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStyle = function (style) {\r\n        const self = this;\r\n        if (style) {\r\n            $.extend(self.style, style);\r\n        }\r\n        else {\r\n            switch (self.options.mode) {\r\n                case TC.Consts.geom.POLYLINE:\r\n                case TC.Consts.geom.MULTIPOLYLINE:\r\n                    style = { line: self.styles.line };\r\n                    break;\r\n                case TC.Consts.geom.POLYGON:\r\n                case TC.Consts.geom.MULTIPOLYGON:\r\n                    style = { polygon: self.styles.polygon };\r\n                    break;\r\n                case TC.Consts.geom.POINT:\r\n                case TC.Consts.geom.MULTIPOINT:\r\n                    style = { point: self.styles.point };\r\n                    break;\r\n                default:\r\n                    style = {};\r\n                    break;\r\n            }\r\n        }\r\n        if (self.isActive) {\r\n            self.wrap.setStyle(style);\r\n        }\r\n    };\r\n\r\n    ctlProto.getModeStyle = function(mode) {\r\n        const self = this;\r\n        mode = mode || self.options.mode;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n            case TC.Consts.geom.MULTIPOLYLINE:\r\n                return self.styles.line;\r\n            case TC.Consts.geom.POLYGON:\r\n            case TC.Consts.geom.MULTIPOLYGON:\r\n                return self.styles.polygon;\r\n            case TC.Consts.geom.POINT:\r\n            case TC.Consts.geom.MULTIPOINT:\r\n                return self.styles.point;\r\n            default:\r\n                return null;\r\n                break;\r\n        }\r\n    };\r\n\r\n    ctlProto.setStrokeColorWatch = function (color) {\r\n        const self = this;\r\n        if (self.options.styleTools) {\r\n            if (color === undefined) {\r\n                color = self.getModeStyle().strokeColor;\r\n            }\r\n            const match = color.match(/^#([0-9a-f])([0-9a-f])([0-9a-f])$/i);\r\n            if (match && match.length) {\r\n                color = '#' + match[1] + match[1] + match[2] + match[2] + match[3] + match[3];\r\n            }\r\n            self._strokeColorPicker.value = color;\r\n            if (!Modernizr.inputtypes.color) {\r\n                const input = self._strokeColorPicker;\r\n                input.style.backgroundColor = color;\r\n                input.blur();\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStrokeColor = function (color) {\r\n        const self = this;\r\n        const style = self.getModeStyle();\r\n        if (style) {\r\n            style.strokeColor = color;\r\n        }\r\n\r\n        // Resetea el estilo\r\n        if (self.isActive) {\r\n            self.setStyle();\r\n        }\r\n\r\n        self.setStrokeColorWatch(color);\r\n        self.trigger(TC.Consts.event.STYLECHANGE, { property: 'strokeColor', value: color });\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStrokeWidthWatch = function (width) {\r\n        const self = this;\r\n        if (self.options.styleTools) {\r\n            if (width === undefined) {\r\n                width = self.getModeStyle().strokeWidth;\r\n            }\r\n            width = parseInt(width, 10);\r\n            if (width !== Number.NaN) {\r\n                self._strokeWidthSelector.value = width;\r\n                self._strokeWidthWatch.style.borderBottomWidth = width + 'px';\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setStrokeWidth = function(width) {\r\n        const self = this;\r\n        width = parseInt(width, 10);\r\n        if (width !== Number.NaN) {\r\n            const style = self.getModeStyle();\r\n            if (style) {\r\n                style.strokeWidth = width;\r\n            }\r\n\r\n            // Resetea el estilo\r\n            if (self.isActive) {\r\n                self.setStyle();\r\n            }\r\n\r\n            self.setStrokeWidthWatch(width);\r\n            self.trigger(TC.Consts.event.STYLECHANGE, { property: 'strokeWidth', value: width });\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getLayer = function() {\r\n        return this._layerPromise;\r\n    };\r\n\r\n    ctlProto.setLayer = function (layer) {\r\n        var self = this;\r\n        if (self.map) {\r\n            if (typeof (layer) === \"string\") {\r\n                self.layer = self.map.getLayer(layer);\r\n            }\r\n            else {\r\n                self.layer = layer;\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        self.history.length = 0;\r\n        self.historyIndex = 0;\r\n        setDrawState(self);\r\n        return self;\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState) {\r\n            return {\r\n                id: self.id,\r\n                layer: self.layer.exportState()\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n        const self = this;\r\n        self.getLayer().then(function (layer) {\r\n            layer.importState(state.layer);\r\n        });\r\n    };\r\n})();"],"file":"../../control/Draw.min.js"}