{"version":3,"sources":["Control/FileImport.js"],"names":["TC","Control","syncLoadJS","apiLocation","control","FileImport","apply","this","arguments","$","isArray","options","formats","Consts","format","KML","GML","GML2","GEOJSON","WKT","GPX","layers","apiAttribution","mainDataAttribution","dataAttributions","exportsState","inherit","ctlProto","prototype","CLASS","isDebug","template","dust","register","body_0","chk","ctx","w","h","$key","s","get","block","body_1","__dustBody","f","getPath","body_2","map","self","result","call","enableDragAndDrop","wrap","on","event","FEATURESIMPORT","e","fileName","target","dropTarget","features","gpxPattern","toLowerCase","indexOf","length","div","addLayer","id","getUID","title","type","layerType","VECTOR","then","layer","push","flatten","prev","cur","concat","projectGeom","feature","geom","geometry","coordinates","Point","MultiPoint","Polyline","MultiPolyline","Polygon","reduce","MultiPolygon","every","coord","Math","abs","setCoords","Util","reproject","crs","i","len","projectedFeature","addFeature","setTimeout","zoomToFeatures","FEATURESIMPORTERROR","dictKey","file","name","substr","error","getLocaleString","msgErrorMode","TOAST","reader","FileReader","onload","EMAIL","readAsText","FEATUREREMOVE","removeLayer","LAYERREMOVE","idx","splice","render","_set1stRenderPromise","renderData","fileInput","querySelector","addEventListener","CLICK","form","document","createElement","parent","parentElement","insertBefore","appendChild","reset","insertAdjacentElement","removeChild","console","log","loadFiles","files","exportState","state","importState","layerPromises","forEach","layerData","Promise","all"],"mappings":"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","sourcesContent":["if (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.FileImport = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    if ($.isArray(self.options.formats)) {\r\n        self.formats = self.options.formats;\r\n    }\r\n    else {\r\n        self.formats = [\r\n            TC.Consts.format.KML,\r\n            TC.Consts.format.GML,\r\n            TC.Consts.format.GML2,\r\n            TC.Consts.format.GEOJSON,\r\n            TC.Consts.format.WKT,\r\n            TC.Consts.format.GPX\r\n        ];\r\n    }\r\n\r\n    self.layers = [];\r\n\r\n    self.apiAttribution = '';\r\n    self.mainDataAttribution = '';\r\n    self.dataAttributions = [];\r\n\r\n    self.exportsState = true;\r\n};\r\n\r\nTC.inherit(TC.control.FileImport, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.FileImport.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-file';\r\n\r\n    if (TC.isDebug) {\r\n        ctlProto.template = TC.apiLocation + \"TC/templates/FileImport.html\";\r\n    }\r\n    else {\r\n        ctlProto.template = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<h2>\").h(\"i18n\", ctx, {}, { \"$key\": \"openFile\" }).w(\"</h2><div><p>\").h(\"i18n\", ctx, {}, { \"$key\": \"fileImport.instructions\" }).w(\"</p><div class=\\\"tc-ctl-file-open\\\"><label class=\\\"tc-button tc-ctl-file-open-label tc-icon-button\\\"><input type=\\\"file\\\" class=\\\"tc-ctl-file-open-ipt tc-button\\\" accept=\\\"\").s(ctx.get([\"formats\"], false), ctx, { \"block\": body_1 }, {}).w(\"\\\" />\").h(\"i18n\", ctx, {}, { \"$key\": \"openFile\" }).w(\"</label></div></div>\"); } body_0.__dustBody = !0; function body_1(chk, ctx) { return chk.w(\".\").f(ctx.getPath(true, []), ctx, \"h\").h(\"sep\", ctx, { \"block\": body_2 }, {}); } body_1.__dustBody = !0; function body_2(chk, ctx) { return chk.w(\",\"); } body_2.__dustBody = !0; return body_0 };\r\n    }\r\n\r\n    ctlProto.register = function (map) {\r\n        var self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        if (self.options.enableDragAndDrop) {\r\n            map.wrap.enableDragAndDrop(self.options);\r\n        }\r\n\r\n        map\r\n            .on(TC.Consts.event.FEATURESIMPORT, function (e) {\r\n                const fileName = e.fileName;\r\n                const target = e.dropTarget;\r\n                const features = e.features;\r\n                // Ignoramos los GPX (se supone que los gestionar√° Geolocation)\r\n                var gpxPattern = '.' + TC.Consts.format.GPX.toLowerCase();\r\n                if (fileName.toLowerCase().indexOf(gpxPattern) === fileName.length - gpxPattern.length || target !== self.map.div && target !== self) {\r\n                    return;\r\n                }\r\n                \r\n                map.addLayer({\r\n                    id: self.getUID(),\r\n                    title: fileName,\r\n                    type: TC.Consts.layerType.VECTOR\r\n                }).then(function (layer) {\r\n                    self.layers.push(layer);\r\n                    var geogCrs = 'EPSG:4326';\r\n                    const flatten = function (prev, cur) {\r\n                        return prev.concat(cur);\r\n                    };\r\n                    var projectGeom = function (feature) {\r\n                        var geom = feature.geometry;\r\n                        if (geom) {\r\n                            var coordinates;\r\n                            switch (true) {\r\n                                case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                                    coordinates = [geom];\r\n                                    break;\r\n                                case TC.feature.MultiPoint && feature instanceof TC.feature.MultiPoint:\r\n                                case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                                    coordinates = geom;\r\n                                    break;\r\n                                case TC.feature.MultiPolyline && feature instanceof TC.feature.MultiPolyline:\r\n                                case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                                    coordinates = geom.reduce(flatten);\r\n                                    break;\r\n                                case TC.feature.MultiPolygon && feature instanceof TC.feature.MultiPolygon:\r\n                                    coordinates = geom.reduce(flatten).reduce(flatten);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (coordinates.every(function (coord) {\r\n                                return Math.abs(coord[0]) <= 180 && Math.abs(coord[1]) <= 90; // Parecen geogr√°ficas\r\n                            })) {\r\n                                feature.setCoords(TC.Util.reproject(geom, geogCrs, self.map.crs));\r\n                            }\r\n                        }\r\n\r\n                        return feature;\r\n                    };\r\n\r\n                    for (var i = 0, len = features.length; i < len; i++) {\r\n                        var projectedFeature = projectGeom(features[i]);\r\n                        layer.addFeature(projectedFeature);\r\n                    }\r\n                    setTimeout(function () {\r\n                        map.zoomToFeatures(layer.features);\r\n                    }, 100);\r\n                });\r\n            })\r\n            .on(TC.Consts.event.FEATURESIMPORTERROR, function (e) {\r\n                var dictKey;\r\n                var fileName = e.file.name;\r\n                if (fileName.toLowerCase().substr(fileName.length - 4) === '.kmz') {\r\n                    dictKey = 'fileImport.error.reasonKmz';\r\n                }\r\n                else {\r\n                    dictKey = 'fileImport.error.reasonUnknown';\r\n                }\r\n\r\n                TC.error(self.getLocaleString(dictKey, { fileName: fileName }), TC.Consts.msgErrorMode.TOAST);\r\n\r\n                var reader = new FileReader();\r\n                reader.onload = function (event) {\r\n                    TC.error(\"Nombre del archivo: \" + fileName + \" \\n Contenido del archivo: \\n\\n\" + event.target.result, TC.Consts.msgErrorMode.EMAIL, \"Error en la subida de un archivo\");\r\n                };\r\n                reader.readAsText(e.file);\r\n            })\r\n            .on(TC.Consts.event.FEATUREREMOVE, function (e) {\r\n                // Eliminamos la capa cuando ya no quedan features en ella\r\n                const layer = e.layer;\r\n                if (self.layers.indexOf(layer) >= 0) {\r\n                    if (!layer.features.length) {\r\n                        self.map.removeLayer(layer);\r\n                    }\r\n                }\r\n            })\r\n            .on(TC.Consts.event.LAYERREMOVE, function (e) {\r\n                const idx = self.layers.indexOf(e.layer);\r\n                if (idx >= 0) {\r\n                    self.layers.splice(idx, 1);\r\n                }\r\n            });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.render = function () {\r\n        const self = this;\r\n        return self._set1stRenderPromise(self.renderData({ formats: self.formats }, function () {            \r\n            const fileInput = self.div.querySelector('input[type=file]');\r\n            // GLS: Eliminamos el archivo subido, sin ello no podemos subir el mismo archivo seguido varias veces\r\n            fileInput.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                const input = this;\r\n                // Envolvemos el input en un form\r\n                const form = document.createElement('form');\r\n                const parent = input.parentElement;\r\n                parent.insertBefore(form, input);\r\n                form.appendChild(input);\r\n                form.reset();\r\n                // Desenvolvemos el input del form\r\n                form.insertAdjacentElement('afterend', input);\r\n                parent.removeChild(form);\r\n            });\r\n            fileInput.addEventListener('change', function (e) {\r\n                if (self.map) {\r\n                    console.log('salta el change');\r\n                    self.map.wrap.loadFiles(e.target.files, { control: self });\r\n                }\r\n            });\r\n        }));\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState) {\r\n            return {\r\n                id: self.id,\r\n                layers: self.layers.map(function (layer) {\r\n                    return {\r\n                        title: layer.title,\r\n                        state: layer.exportState()\r\n                    };\r\n                })\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n        const self = this;\r\n        if (self.map) {\r\n            const layerPromises = [];\r\n            state.layers.forEach(function (layerData) {\r\n                layerPromises.push(self.map.addLayer({\r\n                    id: self.getUID(),\r\n                    title: layerData.title,\r\n                    type: TC.Consts.layerType.VECTOR\r\n                }));\r\n            });\r\n\r\n            Promise.all(layerPromises).then(function (layers) {\r\n                for (var i = 0, len = layers.length; i < len; i++) {\r\n                    const layer = layers[i];\r\n                    layer.importState(state.layers[i].state);\r\n                    self.layers.push(layer);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n})();\r\n"],"file":"../../Control/FileImport.min.js"}