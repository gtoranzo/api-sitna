{"version":3,"sources":["Control/Popup.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Consts","event","POPUP","POPUPHIDE","classes","DRAG","DRAGGED","DRAGGABLE","Popup","apply","this","arguments","currentFeature","wrap","inherit","ctlProto","prototype","CLASS","render","self","_set1stRenderPromise","Promise","resolve","reject","map","addPopup","then","trigger","CONTROLRENDER","err","Error","register","result","call","all","renderPromise","on","VIEWCHANGE","view","PRINTING","isVisible","hide","LAYERVISIBILITY","e","layer","getVisibility","LAYERREMOVE","UPDATE","_visibilityState","visibility","NOT_VISIBLE","FEATUREREMOVE","feature","catch","fitToView","delayed","setTimeout","hidePopup","setDragged","getContainerElement","contentDiv","getMenuElement","menuDiv","dragged","popupDiv","classList","add","remove","setDragging","dragging","contains","VISIBLE"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.Consts.event.POPUP = TC.Consts.event.POPUP || 'popup.tc';\r\nTC.Consts.event.POPUPHIDE = TC.Consts.event.POPUPHIDE || 'popuphide.tc';\r\nTC.Consts.classes.DRAG = TC.Consts.classes.DRAG || 'tc-drag';\r\nTC.Consts.classes.DRAGGED = TC.Consts.classes.DRAGGED || 'tc-dragged';\r\nTC.Consts.classes.DRAGGABLE = TC.Consts.classes.DRAGGABLE || 'tc-draggable';\r\n\r\nTC.control.Popup = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n    self.currentFeature = null;\r\n    //self.wrap = { popup: null };    \r\n    self.wrap = new TC.wrap.control.Popup(self);\r\n};\r\n\r\nTC.inherit(TC.control.Popup, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Popup.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-popup';\r\n\r\n    ctlProto.render = function () {\r\n        const self = this;\r\n        return self._set1stRenderPromise(new Promise(function (resolve, reject) {\r\n            self.map.wrap.addPopup(self)\r\n                .then(function () {\r\n                    self.trigger(TC.Consts.event.CONTROLRENDER);\r\n                    resolve();\r\n                },\r\n                function (err) {\r\n                    reject(err instanceof Error ? err : Error(err));\r\n                });\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n        return new Promise(function (resolve, reject) {\r\n            Promise.all([result, self.renderPromise()]).then(function () {\r\n                map.on(TC.Consts.event.VIEWCHANGE, function () {\r\n                    if (map.view === TC.Consts.view.PRINTING) {\r\n                        if (self.isVisible()) {\r\n                            self.hide();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                map.on(TC.Consts.event.LAYERVISIBILITY, function (e) {\r\n                    if (self.currentFeature && self.currentFeature.layer === e.layer && !e.layer.getVisibility()) {\r\n                        if (self.isVisible()) {\r\n                            self.hide();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                map.on(TC.Consts.event.LAYERREMOVE, function (e) {\r\n                    if (self.currentFeature && self.currentFeature.layer === e.layer) {\r\n                        if (self.isVisible()) {\r\n                            self.hide();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                map.on(TC.Consts.event.UPDATE, function () {\r\n                    if (!self.currentFeature || self.currentFeature._visibilityState === TC.Consts.visibility.NOT_VISIBLE) {\r\n                        if (self.isVisible()) {\r\n                            self.hide();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                map.on(TC.Consts.event.FEATUREREMOVE, function (e) {\r\n                    if (self.currentFeature === e.feature) {\r\n                        if (self.isVisible()) {\r\n                            self.hide();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                /**\r\n                    GLS: Controlamos el ancla del popup cuando hay zoom in/out de pantalla o navegador, debería hacerlo OL pero no lo gestiona.\r\n                    No funciona, sólo salta la primera vez, paso a sobrescribir el método de OL\r\n                 */\r\n                //var config = { attributes: true, attributeFilter: ['style', 'class'], childList: false, subtree: false };\r\n                //var observer = new MutationObserver(function (mutationsList, observer) {\r\n                //    //var positionMutation = mutationsList.filter(function (mutation) {\r\n                //    //    return mutation.type === \"attributes\"\r\n                //    //}).filter(function (mutation) {\r\n                //    //    return ['top', 'right', 'bottom', 'left', 'style'].indexOf(mutation.attributeName) > -1;\r\n                //    //});\r\n\r\n                //    if (mutationsList.length > 0) {\r\n                //        // me desconecto para no entrar en un bucle infinito\r\n                //        //observer.disconnect();\r\n\r\n                //        var top = mutationsList[0].target[mutationsList[0].attributeName].top;\r\n                //        var right = mutationsList[0].target[mutationsList[0].attributeName].right;\r\n                //        var bottom = mutationsList[0].target[mutationsList[0].attributeName].bottom;\r\n                //        var left = mutationsList[0].target[mutationsList[0].attributeName].left;\r\n\r\n                //        [{ top: top }, { right: right }, { bottom: bottom }, { left: left }].forEach(function (elm) {\r\n                //            var key = Object.keys(elm)[0];\r\n                //            if (elm[key].length > 0) {\r\n                //                document.querySelector('.ol-overlay-container').style[key] = parseFloat(elm[key].replace('px', '')) / window.devicePixelRatio + 'px';\r\n                //            }\r\n                //        });\r\n\r\n                //        // volvemos a observar\r\n                //        //observer.observe(document.querySelector('.ol-overlay-container'), config);\r\n                //    }\r\n                //});\r\n                //observer.observe(document.querySelector('.ol-overlay-container'), config);\r\n\r\n                resolve(self);\r\n            }).catch(function (err) {\r\n                reject(err instanceof Error ? err : Error(err));\r\n            });\r\n        })\r\n    };\r\n\r\n    ctlProto.fitToView = function (delayed) {\r\n        var self = this;\r\n        if (delayed) {\r\n            setTimeout(function () {\r\n                self.wrap.fitToView();\r\n            }, 1000);\r\n        }\r\n        else {\r\n            self.wrap.fitToView();\r\n        }\r\n    };\r\n\r\n    ctlProto.hide = function () {\r\n        var self = this;\r\n        if (self.map) {\r\n            self.map.wrap.hidePopup(self);\r\n            self.setDragged(false);\r\n            self.map.trigger(TC.Consts.event.POPUPHIDE, { control: self });\r\n        }\r\n    };\r\n\r\n    ctlProto.getContainerElement = function () {\r\n        return this.contentDiv || null;\r\n    };\r\n\r\n    ctlProto.getMenuElement = function () {\r\n        return this.menuDiv || null;\r\n    };\r\n\r\n    ctlProto.setDragged = function (dragged) {\r\n        const self = this;\r\n        self.dragged = dragged;\r\n        if (self.popupDiv) {\r\n            if (dragged) {\r\n                self.popupDiv.classList.add(TC.Consts.classes.DRAGGED);\r\n            }\r\n            else {\r\n                self.popupDiv.classList.remove(TC.Consts.classes.DRAGGED);\r\n            }\r\n        }\r\n        self.wrap.setDragged(dragged);\r\n    };\r\n\r\n    ctlProto.setDragging = function (dragging) {\r\n        const self = this;\r\n        if (dragging) {\r\n            self.setDragged(true);\r\n            self.popupDiv.classList.add(TC.Consts.classes.DRAG);\r\n        }\r\n        else {\r\n            self.popupDiv.classList.remove(TC.Consts.classes.DRAG);\r\n        }\r\n    };\r\n\r\n    ctlProto.isVisible = function () {\r\n        const self = this;\r\n\r\n        return self.popupDiv && self.popupDiv.classList.contains(TC.Consts.classes.VISIBLE);\r\n    };\r\n\r\n})();"],"file":"../../Control/Popup.min.js"}