{"version":3,"sources":["Control/Measure.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Consts","event","POINT","Measure","self","this","apply","arguments","drawControls","persistentDrawControls","NOMEASURE","exportsState","renderPromise","then","measureMode","options","mode","history","historyIndex","reset","wrap","_len","div","querySelector","_area","_peri","setMode","inherit","ctlProto","prototype","CLASS","isDebug","template","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","render","callback","_set1stRenderPromise","call","loadJS","Draw","classList","add","classes","HIDDEN","querySelectorAll","forEach","span","addEventListener","CLICK","e","label","tagName","parentElement","checkbox","newMode","value","checked","$","isFunction","map","Promise","resolve","reject","on","VIEWCHANGE","view","PRINTING","trigger","DRAWEND","layerId","getUID","drawLinesId","drawPolygonsId","layerPromise","addLayer","id","title","getLocaleString","stealth","type","layerType","VECTOR","styles","point","line","polygon","all","objects","layer","putLayerOnTop","_drawLinesPromise","addControl","geom","POLYLINE","measure","persistent","styleTools","_drawPolygonsPromise","POLYGON","controls","drawLines","drawPolygons","ctl","containerControl","push","MEASURE","MEASUREPARTIAL","showMeasures","DRAWCANCEL","setTimeout","cancel","catch","displayMode","modes","elm","_activeMode","filter","matches","undefined","hiddenModes","radio","CHECKED","nextSibling","remove","COLLAPSED","activate","CONTROLACTIVATE","isActive","CONTROLDEACTIVATE","resetValues","precision","units","locale","Cfg","area","innerHTML","Util","formatNumber","toFixed","perimeter","length","textContent","getDrawLines","exportState","importState","state"],"mappings":"AAACA,GAAGC,QAAUD,GAAGC,YAEZD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAGnCJ,GAAGK,OAAOC,MAAMC,MAAQ,WAExBP,GAAGC,QAAQO,QAAU,WACjB,IAAIC,EAAOC,KAEXV,GAAGE,QAAQS,MAAMF,EAAMG,WAEvBH,EAAKI,gBACLJ,EAAKK,wBAAyB,EAC9BL,EAAKM,UAAY,IAEjBN,EAAKO,cAAe,EAEpBN,KAAKO,gBAAgBC,KAAK,WACtBT,EAAKU,YAAcV,EAAKW,QAAQC,KAEhCZ,EAAKa,WACLb,EAAKc,aAAe,EACpBd,EAAKe,OAAQ,EAEbf,EAAKgB,KAAO,IAAIzB,GAAGyB,KAAKxB,QAAQO,QAAQC,GAExCA,EAAKiB,KAAOjB,EAAKkB,IAAIC,cAAc,wBACnCnB,EAAKoB,MAAQpB,EAAKkB,IAAIC,cAAc,yBACpCnB,EAAKqB,MAAQrB,EAAKkB,IAAIC,cAAc,yBAEpCnB,EAAKsB,QAAQtB,EAAKW,QAAQC,SAIlCrB,GAAGgC,QAAQhC,GAAGC,QAAQO,QAASR,GAAGE,UAElC,WACI,IAAI+B,EAAWjC,GAAGC,QAAQO,QAAQ0B,UAElCD,EAASE,MAAQ,cAEbnC,GAAGoC,QACHH,EAASI,SAAWrC,GAAGI,YAAc,4BAErC6B,EAASI,SAAW,WAAcC,KAAKC,SAASN,EAASE,MAAOK,GAAS,SAASA,EAAOC,EAAKC,GAAO,OAAOD,EAAIE,EAAE,QAAQC,EAAE,OAAQF,MAAWG,KAAQ,YAAaF,EAAE,2IAAqJC,EAAE,OAAQF,MAAWG,KAAQ,WAAYF,EAAE,+GAAuHC,EAAE,OAAQF,MAAWG,KAAQ,qBAAsBF,EAAE,yJAA+JC,EAAE,OAAQF,MAAWG,KAAQ,WAAYF,EAAE,wLAAgMC,EAAE,OAAQF,MAAWG,KAAQ,SAAUF,EAAE,kDAAoDC,EAAE,OAAQF,MAAWG,KAAQ,cAAeF,EAAE,4DAAiEH,EAAOM,YAAa,EAAI,OAAON,GAE3oCP,EAASc,OAAS,SAAUC,GACxB,MAAMvC,EAAOC,KACb,OAAOD,EAAKwC,qBAAqBjD,GAAGE,QAAQgC,UAAUa,OAAOG,KAAKzC,EAAM,WACpET,GAAGmD,QACEnD,GAAGC,QAAQmD,KACZpD,GAAGI,YAAc,kBACjB,WACQK,EAAKW,QAAQC,MACbZ,EAAKkB,IAAIC,cAAc,uBAAuByB,UAAUC,IAAItD,GAAGK,OAAOkD,QAAQC,QAGlF/C,EAAKkB,IAAI8B,iBAAiB,QAAQC,QAAQ,SAAUC,GAChDA,EAAKC,iBAAiB5D,GAAGK,OAAOC,MAAMuD,MAAO,SAAUC,GAEnD,IADA,IAAIC,EAAQrD,KACLqD,GAA2B,UAAlBA,EAAMC,SAClBD,EAAQA,EAAME,cAElB,IAAIC,EAAWH,EAAMnC,cAAc,gCAC/BuC,EAAUD,EAASE,MAEvBF,EAASG,SAAU,EACnB5D,EAAKsB,QAAQoC,GAAS,OAI1BG,EAAEC,WAAWvB,IACbA,UAMpBf,EAASM,SAAW,SAAUiC,GAC1B,MAAM/D,EAAOC,KACb,OAAO,IAAI+D,QAAQ,SAAUC,EAASC,GAClC3E,GAAGE,QAAQgC,UAAUK,SAASW,KAAKzC,EAAM+D,GAAKtD,KAAK,WAC/CT,EAAK+D,IAAII,GAAG5E,GAAGK,OAAOC,MAAMuE,WAAY,WAChCpE,EAAK+D,IAAIM,OAAS9E,GAAGK,OAAOyE,KAAKC,UACjCtE,EAAKuE,QAAQhF,GAAGK,OAAOC,MAAM2E,WAIrC,MAAMC,EAAUzE,EAAK0E,SACfC,EAAc3E,EAAK0E,SACnBE,EAAiB5E,EAAK0E,SAE5B1E,EAAK6E,aAAed,EAAIe,UACpBC,GAAIN,EACJO,MAAOhF,EAAKiF,gBAAgB,WAC5BC,SAAS,EACTC,KAAM5F,GAAGK,OAAOwF,UAAUC,OAC1BC,QACIC,MAAOxB,EAAIpD,QAAQ2E,OAAOC,MAC1BC,KAAMzB,EAAIpD,QAAQ2E,OAAOE,KACzBC,QAAS1B,EAAIpD,QAAQ2E,OAAOG,WAIpCzB,QAAQ0B,KAAK1F,EAAK6E,aAAc7E,EAAKQ,kBAAkBC,KAAK,SAAUkF,GAClE,MAAMC,EAAQD,EAAQ,GACtB3F,EAAK4F,MAAQA,EACb5F,EAAK4F,MAAM7B,IAAI8B,cAAc7F,EAAK4F,OAElC5F,EAAK8F,kBAAoB/B,EAAIgC,WAAW,QACpChB,GAAIJ,EACJzD,IAAKlB,EAAKkB,IAAIC,cAAc,qBAC5BP,KAAMrB,GAAGK,OAAOoG,KAAKC,SACrBC,SAAS,EACTC,WAAYnG,EAAKK,uBACjB+F,WAAYpG,EAAKK,uBACjBuF,MAAO5F,EAAK4F,QAEhB5F,EAAKqG,qBAAuBtC,EAAIgC,WAAW,QACvChB,GAAIH,EACJ1D,IAAKlB,EAAKkB,IAAIC,cAAc,wBAC5BP,KAAMrB,GAAGK,OAAOoG,KAAKM,QACrBJ,SAAS,EACTC,WAAYnG,EAAKK,uBACjB+F,WAAYpG,EAAKK,uBACjBuF,MAAO5F,EAAK4F,QAGhB5B,QAAQ0B,KAAK1F,EAAK8F,kBAAmB9F,EAAKqG,uBAAuB5F,KAAK,SAAU8F,GAC5EvG,EAAKwG,UAAYD,EAAS,GAC1BvG,EAAKyG,aAAeF,EAAS,GAC7BA,EAAStD,QAAQ,SAAUyD,GACvBA,EAAIC,iBAAmB3G,EACvBA,EAAKI,aAAawG,KAAKF,GACvBA,EACKvC,GAAG5E,GAAGK,OAAOC,MAAMgH,QAAU,IAAMtH,GAAGK,OAAOC,MAAMiH,eAAgB,SAAUzD,GAC1ErD,EAAK+G,aAAa1D,KAErBc,GAAG5E,GAAGK,OAAOC,MAAMmH,WAAY,SAAU3D,GAStC4D,WAAW,WACPjH,EAAKkH,UACN,OAGXR,EAAInG,cAAe,IAGvB0D,EAAQjE,GACRA,EAAKsB,QAAQtB,EAAKW,QAAQC,QAC3BuG,MAAMjD,KACViD,MAAMjD,QAKrB1C,EAAS4F,YAAc,SAAUxG,GAC7B,MAAMZ,EAAOC,KAEPoH,KACNrH,EAAKkB,IAAI8B,iBAAiB,qBAAqBC,QAAQ,SAAUqE,GAC7DD,EAAMT,KAAKU,KAGf,OAAQ1G,GACJ,KAAKrB,GAAGK,OAAOoG,KAAKC,SAChBjG,EAAKuH,YAAcF,EAAMG,OAAO,SAAUF,GACtC,OAAOA,EAAIG,QAAQ,sBACpB,GACH,MACJ,KAAKlI,GAAGK,OAAOoG,KAAKM,QAChBtG,EAAKuH,YAAcF,EAAMG,OAAO,SAAUF,GACtC,OAAOA,EAAIG,QAAQ,uBACpB,GACH,MACJ,KAAK,KACL,UAAKC,EACD1H,EAAKuH,YAAc,KAM3B,MAAMI,EAAcN,EAAMG,OAAO,SAAUF,GACvC,OAAOA,IAAQtH,EAAKuH,cAIxB,GAAI3G,EAAM,CACN,MAAMgH,EAAQ5H,EAAKkB,IAAIC,cAAc,sCAAwCP,EAAO,KACpFgH,EAAMhE,SAAU,EAChBgE,EAAMhF,UAAUC,IAAItD,GAAGK,OAAOkD,QAAQ+E,SACtCD,EAAME,YAAYlF,UAAUC,IAAItD,GAAGK,OAAOkD,QAAQ+E,cAGlD7H,EAAKkB,IAAI8B,iBAAiB,gCAAgCC,QAAQ,SAAU2E,GACxEA,EAAMhE,SAAU,EAChBgE,EAAMhF,UAAUmF,OAAOxI,GAAGK,OAAOkD,QAAQ+E,SACzCD,EAAME,YAAYlF,UAAUmF,OAAOxI,GAAGK,OAAOkD,QAAQ+E,WAG7D,GAAI7H,EAAKuH,YAAa,CAClBvH,EAAKuH,YAAY3E,UAAUmF,OAAOxI,GAAGK,OAAOkD,QAAQC,QACpD/C,EAAKuH,YAAYpG,cAAc,WAAWyB,UAAUmF,OAAOxI,GAAGK,OAAOkD,QAAQkF,WAEjFL,EAAY1E,QAAQ,SAAUqE,GAC1BA,EAAI1E,UAAUC,IAAItD,GAAGK,OAAOkD,QAAQC,UAExC,OAAO/C,GAGXwB,EAASF,QAAU,SAAUV,GACzB,MAAMZ,EAAOC,KAEbD,EAAKY,KAAOA,EACZZ,EAAKoH,YAAYxG,GAEjB,IAAIf,EACJ,OAAQe,GACJ,KAAKrB,GAAGK,OAAOoG,KAAKC,SAChBjG,EAAKwG,UAAUyB,WACfpI,EAAQN,GAAGK,OAAOC,MAAMqI,gBACxB,MACJ,KAAK3I,GAAGK,OAAOoG,KAAKM,QAChBtG,EAAKyG,aAAawB,WAClBpI,EAAQN,GAAGK,OAAOC,MAAMqI,gBACxB,MACJ,KAAK,KACL,UAAKR,EACD1H,EAAKI,aAAa6C,QAAQ,SAAUyD,GAC5BA,EAAIyB,UACJzB,EAAIQ,WAGZrH,EAAQN,GAAGK,OAAOC,MAAMuI,kBACxB,MACJ,QACIvI,EAAQN,GAAGK,OAAOC,MAAMqI,gBAIhClI,EAAKqI,cAEDxI,GAASG,EAAK+D,KACd/D,EAAK+D,IAAIQ,QAAQ1E,GAASL,QAASQ,IAEvC,OAAOA,GAGXwB,EAAS0F,OAAS,WACdjH,KAAKqB,QAAQ,MAAM,GACnB,OAAOrB,MAGXuB,EAASuF,aAAe,SAAUpG,GAC9B,MAAMX,EAAOC,KAEb,IACIqI,EADAC,GADJ5H,EAAUA,OACU4H,MAEpB,MAAMC,EAASxI,EAAK+D,IAAIpD,QAAQ6H,QAAUjJ,GAAGkJ,IAAID,OACjD,GAAI7H,EAAQ+H,KAAM,CACd,IAAIA,EAAO/H,EAAQ+H,KACnB,GAAIA,EAAO,IAAO,CACdA,GAAc,IACdH,EAAQ,KAEZD,EAAsB,MAAVC,EAAgB,EAAI,EAChCvI,EAAKoB,MAAMuH,UAAYpJ,GAAGqJ,KAAKC,aAAaH,EAAKI,QAAQR,GAAYE,GAAU,IAAMD,EAAQ,SAEjG,GAAI5H,EAAQoI,UAAW,CACnB,IAAIA,EAAYpI,EAAQoI,UACxB,GAAIA,EAAY,IAAM,CAClBA,GAAwB,IACxBR,EAAQ,KAEZD,EAAsB,MAAVC,EAAgB,EAAI,EAChCvI,EAAKqB,MAAMsH,UAAYpJ,GAAGqJ,KAAKC,aAAaE,EAAUD,QAAQR,GAAYE,GAAU,IAAMD,EAE9F,GAAI5H,EAAQqI,OAAQ,CAChB,IAAIA,EAASrI,EAAQqI,OACrB,GAAIA,EAAS,IAAM,CACfA,GAAkB,IAClBT,EAAQ,KAEZD,EAAsB,MAAVC,EAAgB,EAAI,EAChCvI,EAAKiB,KAAK0H,UAAYpJ,GAAGqJ,KAAKC,aAAaG,EAAOF,QAAQR,GAAYE,GAAU,IAAMD,EAE1F,OAAOvI,GAGXwB,EAAS6G,YAAc,WACnB,MAAMrI,EAAOC,KACb,GAAID,EAAKiB,KAAM,CACXjB,EAAKiB,KAAKgI,YAAcjJ,EAAKM,UAC7BN,EAAKoB,MAAM6H,YAAcjJ,EAAKM,UAC9BN,EAAKqB,MAAM4H,YAAcjJ,EAAKM,UAElC,OAAON,GAGXwB,EAAS0H,aAAe,aAIxB1H,EAAS2H,YAAc,WACnB,MAAMnJ,EAAOC,KACb,OAAID,EAAKO,cAAgBP,EAAK4F,OAEtBb,GAAI/E,EAAK+E,GACTa,MAAO5F,EAAK4F,MAAMuD,eAGnB,MAGX3H,EAAS4H,YAAc,SAAUC,GAChBpJ,KACR4E,aAAapE,KAAK,SAAUmF,GAC7BA,EAAMwD,YAAYC,EAAMzD,UAjSpC","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.Consts.event.POINT = 'point.tc';\r\n\r\nTC.control.Measure = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    self.drawControls = [];\r\n    self.persistentDrawControls = false;\r\n    self.NOMEASURE = '-';\r\n\r\n    self.exportsState = true;\r\n\r\n    this.renderPromise().then(function () {\r\n        self.measureMode = self.options.mode;\r\n\r\n        self.history = [];\r\n        self.historyIndex = 0;\r\n        self.reset = true;\r\n\r\n        self.wrap = new TC.wrap.control.Measure(self);\r\n\r\n        self._len = self.div.querySelector('.tc-ctl-meas-val-len');\r\n        self._area = self.div.querySelector('.tc-ctl-meas-val-area');\r\n        self._peri = self.div.querySelector('.tc-ctl-meas-val-peri');\r\n\r\n        self.setMode(self.options.mode);\r\n    });\r\n};\r\n\r\nTC.inherit(TC.control.Measure, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Measure.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-meas';\r\n\r\n    if (TC.isDebug)\r\n        ctlProto.template = TC.apiLocation + \"TC/templates/Measure.html\";\r\n    else\r\n        ctlProto.template = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<h2>\").h(\"i18n\", ctx, {}, { \"$key\": \"measure\" }).w(\"</h2><div class=\\\"tc-ctl-meas-select\\\"><form><label class=\\\"tc-ctl-meas-btn-len\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"polyline\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"length\" }).w(\"</span></label><label class=\\\"tc-ctl-meas-btn-area\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"polygon\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"areaAndPerimeter\" }).w(\"</span></label></form></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-len tc-hidden\\\"><div class=\\\"tc-ctl-meas-line\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"length\" }).w(\": <span class=\\\"tc-ctl-meas-val-len\\\"></span></div></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-area tc-hidden\\\"><div class=\\\"tc-ctl-meas-polygon\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"area\" }).w(\": <span class=\\\"tc-ctl-meas-val-area\\\"></span>, \").h(\"i18n\", ctx, {}, { \"$key\": \"perimeter\" }).w(\": <span class=\\\"tc-ctl-meas-val-peri\\\"></span></div></div>\"); } body_0.__dustBody = !0; return body_0 };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(TC.Control.prototype.render.call(self, function () {\r\n            TC.loadJS(\r\n                !TC.control.Draw,\r\n                TC.apiLocation + 'TC/control/Draw',\r\n                function () {\r\n                    if (self.options.mode) {\r\n                        self.div.querySelector('.tc-ctl-meas-select').classList.add(TC.Consts.classes.HIDDEN);\r\n                    }\r\n\r\n                    self.div.querySelectorAll('span').forEach(function (span) {\r\n                        span.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                            var label = this;\r\n                            while (label && label.tagName !== 'LABEL') {\r\n                                label = label.parentElement;\r\n                            }\r\n                            var checkbox = label.querySelector('input[type=radio][name=mode]');\r\n                            var newMode = checkbox.value;\r\n\r\n                            checkbox.checked = true;\r\n                            self.setMode(newMode, true);\r\n                        });\r\n                    });\r\n\r\n                    if ($.isFunction(callback)) {\r\n                        callback();\r\n                    }\r\n                });\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.Control.prototype.register.call(self, map).then(function () {\r\n                self.map.on(TC.Consts.event.VIEWCHANGE, function () {\r\n                    if (self.map.view === TC.Consts.view.PRINTING) {\r\n                        self.trigger(TC.Consts.event.DRAWEND);\r\n                    }\r\n                });\r\n\r\n                const layerId = self.getUID();\r\n                const drawLinesId = self.getUID();\r\n                const drawPolygonsId = self.getUID();\r\n\r\n                self.layerPromise = map.addLayer({\r\n                    id: layerId,\r\n                    title: self.getLocaleString('measure'),\r\n                    stealth: true,\r\n                    type: TC.Consts.layerType.VECTOR,\r\n                    styles: {\r\n                        point: map.options.styles.point,\r\n                        line: map.options.styles.line,\r\n                        polygon: map.options.styles.polygon\r\n                    }\r\n                });\r\n\r\n                Promise.all([self.layerPromise, self.renderPromise()]).then(function (objects) {\r\n                    const layer = objects[0];\r\n                    self.layer = layer;\r\n                    self.layer.map.putLayerOnTop(self.layer);\r\n\r\n                    self._drawLinesPromise = map.addControl('draw', {\r\n                        id: drawLinesId,\r\n                        div: self.div.querySelector('.tc-ctl-meas-line'),\r\n                        mode: TC.Consts.geom.POLYLINE,\r\n                        measure: true,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: self.persistentDrawControls,\r\n                        layer: self.layer\r\n                    });\r\n                    self._drawPolygonsPromise = map.addControl('draw', {\r\n                        id: drawPolygonsId,\r\n                        div: self.div.querySelector('.tc-ctl-meas-polygon'),\r\n                        mode: TC.Consts.geom.POLYGON,\r\n                        measure: true,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: self.persistentDrawControls,\r\n                        layer: self.layer\r\n                    });\r\n\r\n                    Promise.all([self._drawLinesPromise, self._drawPolygonsPromise]).then(function (controls) {\r\n                        self.drawLines = controls[0];\r\n                        self.drawPolygons = controls[1];\r\n                        controls.forEach(function (ctl) {\r\n                            ctl.containerControl = self;\r\n                            self.drawControls.push(ctl);\r\n                            ctl\r\n                                .on(TC.Consts.event.MEASURE + ' ' + TC.Consts.event.MEASUREPARTIAL, function (e) {\r\n                                    self.showMeasures(e);\r\n                                })\r\n                                .on(TC.Consts.event.DRAWCANCEL, function (e) {\r\n                                    // Alerta de condición de carrera si no ponemos un timeout:\r\n                                    // 1- Se llama a cancel de un control Draw.\r\n                                    // 2- Se llama a deactivate (como es mediante cancel, no se se corta la cadena de activación controles).\r\n                                    // 3- Si el control activo anterior era otro de los modos de dibujo de Measure, se activa.\r\n                                    // 4- Se llama a cancel desde aquí.\r\n                                    // 5- Se llama a deactivate del control que acabamos de activar en 3.\r\n                                    // El activate de 3 y el deactivate de 5 sobre el mismo control entran en condición de carrera al crear/destruir la interaction\r\n                                    // por tanto se puede quedar en un estado inconsistente. Para evitar eso, separamos 3 de 5 por el siguiente timeout.\r\n                                    setTimeout(function () {\n                                        self.cancel();\n                                    }, 100);\r\n                                });\r\n                            // Desactivamos el método exportState que ya se encarga el control padre de ello\r\n                            ctl.exportsState = false;\r\n                        });\r\n\r\n                        resolve(self);\r\n                        self.setMode(self.options.mode);\r\n                    }).catch(reject);\r\n                }).catch(reject);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayMode = function (mode) {\r\n        const self = this;\r\n\r\n        const modes = [];\r\n        self.div.querySelectorAll('.tc-ctl-meas-mode').forEach(function (elm) {\r\n            modes.push(elm);\r\n        });\r\n        var event;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n                self._activeMode = modes.filter(function (elm) {\r\n                    return elm.matches('.tc-ctl-meas-len');\r\n                })[0];\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self._activeMode = modes.filter(function (elm) {\r\n                    return elm.matches('.tc-ctl-meas-area');\r\n                })[0];\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                self._activeMode = null;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const hiddenModes = modes.filter(function (elm) {\r\n            return elm !== self._activeMode;\r\n        });\r\n\r\n        // Class TC.Consts.classes.CHECKED is for IE8 support\r\n        if (mode) {\r\n            const radio = self.div.querySelector('input[type=radio][name=mode][value=' + mode + ']');\r\n            radio.checked = true;\r\n            radio.classList.add(TC.Consts.classes.CHECKED);\r\n            radio.nextSibling.classList.add(TC.Consts.classes.CHECKED);\r\n        }\r\n        else {\r\n            self.div.querySelectorAll('input[type=radio][name=mode]').forEach(function (radio) {\r\n                radio.checked = false;\r\n                radio.classList.remove(TC.Consts.classes.CHECKED);\r\n                radio.nextSibling.classList.remove(TC.Consts.classes.CHECKED);\r\n            });\r\n        }\r\n        if (self._activeMode) {\r\n            self._activeMode.classList.remove(TC.Consts.classes.HIDDEN);\r\n            self._activeMode.querySelector('.tc-ctl').classList.remove(TC.Consts.classes.COLLAPSED);\r\n        }\r\n        hiddenModes.forEach(function (elm) {\r\n            elm.classList.add(TC.Consts.classes.HIDDEN);\r\n        });\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setMode = function (mode) {\r\n        const self = this;\r\n\r\n        self.mode = mode;\r\n        self.displayMode(mode);\r\n\r\n        var event;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n                self.drawLines.activate();\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self.drawPolygons.activate();\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                self.drawControls.forEach(function (ctl) {\r\n                    if (ctl.isActive) {\r\n                        ctl.cancel();\r\n                    }\r\n                });\r\n                event = TC.Consts.event.CONTROLDEACTIVATE;\r\n                break;\r\n            default:\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n        }\r\n\r\n        self.resetValues();\r\n\r\n        if (event && self.map) {\r\n            self.map.trigger(event, { control: self });\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.cancel = function () {\r\n        this.setMode(null, false);\r\n        return this;\r\n    }\r\n\r\n    ctlProto.showMeasures = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        var units = options.units;\r\n        var precision;\r\n        const locale = self.map.options.locale || TC.Cfg.locale\r\n        if (options.area) {\r\n            var area = options.area;\r\n            if (area > 10000) {\r\n                area = area / 1000000;\r\n                units = 'km';\r\n            }\r\n            precision = units === 'm' ? 0 : 3;\r\n            self._area.innerHTML = TC.Util.formatNumber(area.toFixed(precision), locale) + ' ' + units + '&sup2;';\r\n        }\r\n        if (options.perimeter) {\r\n            var perimeter = options.perimeter;\r\n            if (perimeter > 1000) {\r\n                perimeter = perimeter / 1000;\r\n                units = 'km';\r\n            }\r\n            precision = units === 'm' ? 0 : 3;\r\n            self._peri.innerHTML = TC.Util.formatNumber(perimeter.toFixed(precision), locale) + ' ' + units;\r\n        }\r\n        if (options.length) {\r\n            var length = options.length;\r\n            if (length > 1000) {\r\n                length = length / 1000;\r\n                units = 'km';\r\n            }\r\n            precision = units === 'm' ? 0 : 3;\r\n            self._len.innerHTML = TC.Util.formatNumber(length.toFixed(precision), locale) + ' ' + units;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        if (self._len) {\r\n            self._len.textContent = self.NOMEASURE;\r\n            self._area.textContent = self.NOMEASURE;\r\n            self._peri.textContent = self.NOMEASURE;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getDrawLines = function () {\r\n\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState && self.layer) {\r\n            return {\r\n                id: self.id,\r\n                layer: self.layer.exportState()\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n        const self = this;\r\n        self.layerPromise.then(function (layer) {\r\n            layer.importState(state.layer);\r\n        });\r\n    };\r\n\r\n})();"],"file":"../../Control/Measure.min.js"}