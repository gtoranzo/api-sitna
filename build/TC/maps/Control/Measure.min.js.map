{"version":3,"sources":["control/Measure.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","Measure","self","this","apply","arguments","drawControls","persistentDrawControls","NOMEASURE","exportsState","renderPromise","then","measureMode","options","mode","history","historyIndex","reset","wrap","_len","div","querySelector","_area","_peri","setMode","units","m","peso","abbr","dam","hm","ha","km","inherit","ctlProto","prototype","CLASS","template","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","render","callback","_set1stRenderPromise","call","loadJS","Draw","classList","add","Consts","classes","HIDDEN","querySelectorAll","forEach","span","addEventListener","event","CLICK","e","label","tagName","parentElement","checkbox","newMode","value","checked","Util","isFunction","map","Promise","resolve","reject","on","VIEWCHANGE","view","PRINTING","trigger","DRAWEND","layerId","getUID","drawLinesId","drawPolygonsId","layerPromise","addLayer","id","title","getLocaleString","owner","stealth","type","layerType","VECTOR","styles","point","line","polygon","all","objects","layer","putLayerOnTop","_lineDrawControlPromise","addControl","geom","POLYLINE","measure","persistent","styleTools","_polygonDrawControlPromise","POLYGON","controls","lineDrawControl","polygonDrawControl","ctl","containerControl","push","MEASURE","MEASUREPARTIAL","showMeasures","DRAWCANCEL","setTimeout","cancel","catch","displayMode","modes","elm","_activeMode","filter","matches","undefined","hiddenModes","radio","remove","COLLAPSED","activate","CONTROLACTIVATE","isActive","CONTROLDEACTIVATE","resetValues","precision","locale","Cfg","area","html","Array","split","unit","difPeso","trim","Math","pow","formatNumber","toFixed","innerHTML","join","perimeter","length","textContent","getDrawLines","exportState","importState","state"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.Measure = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    self.drawControls = [];\r\n    self.persistentDrawControls = false;\r\n    self.NOMEASURE = '-';\r\n\r\n    self.exportsState = true;\r\n\r\n    this.renderPromise().then(function () {\r\n        self.measureMode = self.options.mode;\r\n\r\n        self.history = [];\r\n        self.historyIndex = 0;\r\n        self.reset = true;\r\n\r\n        self.wrap = new TC.wrap.control.Measure(self);\r\n\r\n        self._len = self.div.querySelector('.tc-ctl-meas-val-len');\r\n        self._area = self.div.querySelector('.tc-ctl-meas-val-area');\r\n        self._peri = self.div.querySelector('.tc-ctl-meas-val-peri');\r\n\r\n        self.setMode(self.options.mode);\r\n    });\r\n};\r\nTC.control.Measure.units = {\r\n    \"m\": { peso: 0, abbr: \"m&sup2;\" },\n    \"dam\": { peso: 1, abbr: \"dam&sup2;\" },\n    \"hm\": { peso: 2, abbr: \"hm&sup2;\" },\n    \"ha\": { peso: 2, abbr: \"ha\" },\n    \"km\": { peso: 3, abbr: \"km&sup2;\" }\r\n}\r\n\r\nTC.inherit(TC.control.Measure, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Measure.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-meas';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/Measure.html\";\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(TC.Control.prototype.render.call(self, function () {\r\n            TC.loadJS(\r\n                !TC.control.Draw,\r\n                TC.apiLocation + 'TC/control/Draw',\r\n                function () {\r\n                    if (self.options.mode) {\r\n                        self.div.querySelector('.tc-ctl-meas-select').classList.add(TC.Consts.classes.HIDDEN);\r\n                    }\r\n\r\n                    self.div.querySelectorAll(`.${TC.control.Measure.prototype.CLASS}-select span`).forEach(function (span) {\r\n                        span.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                            var label = this;\r\n                            while (label && label.tagName !== 'LABEL') {\r\n                                label = label.parentElement;\r\n                            }\r\n                            var checkbox = label.querySelector('input[type=radio][name=mode]');\r\n                            var newMode = checkbox.value;\r\n\r\n                            checkbox.checked = true;\r\n                            self.setMode(newMode, true);\r\n                        });\r\n                    });\r\n\r\n                    if (TC.Util.isFunction(callback)) {\r\n                        callback();\r\n                    }\r\n                });\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.Control.prototype.register.call(self, map).then(function () {\r\n                self.map.on(TC.Consts.event.VIEWCHANGE, function () {\r\n                    if (self.map.view === TC.Consts.view.PRINTING) {\r\n                        self.trigger(TC.Consts.event.DRAWEND);\r\n                    }\r\n                });\r\n\r\n                const layerId = self.getUID();\r\n                const drawLinesId = self.getUID();\r\n                const drawPolygonsId = self.getUID();\r\n\r\n                self.units = self.options.units ? self.options.units : \"km\";\r\n\r\n                self.layerPromise = map.addLayer({\r\n                    id: layerId,\r\n                    title: self.getLocaleString('measure'),\r\n                    owner: self,\r\n                    stealth: true,\r\n                    type: TC.Consts.layerType.VECTOR,\r\n                    styles: {\r\n                        point: map.options.styles.point,\r\n                        line: map.options.styles.line,\r\n                        polygon: map.options.styles.polygon\r\n                    }\r\n                });\r\n\r\n                self.units = self.options.units ? self.options.units : \"km\";\r\n\r\n                Promise.all([self.layerPromise, self.renderPromise()]).then(function (objects) {\r\n                    const layer = objects[0];\r\n                    self.layer = layer;\r\n                    self.layer.map.putLayerOnTop(self.layer);\r\n\r\n                    self._lineDrawControlPromise = map.addControl('draw', {\r\n                        id: drawLinesId,\r\n                        div: self.div.querySelector('.tc-ctl-meas-line'),\r\n                        mode: TC.Consts.geom.POLYLINE,\r\n                        measure: true,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: self.persistentDrawControls,\r\n                        layer: self.layer\r\n                    });\r\n                    self._polygonDrawControlPromise = map.addControl('draw', {\r\n                        id: drawPolygonsId,\r\n                        div: self.div.querySelector('.tc-ctl-meas-polygon'),\r\n                        mode: TC.Consts.geom.POLYGON,\r\n                        measure: true,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: self.persistentDrawControls,\r\n                        layer: self.layer\r\n                    });\r\n\r\n                    Promise.all([self._lineDrawControlPromise, self._polygonDrawControlPromise]).then(function (controls) {\r\n                        self.lineDrawControl = controls[0];\r\n                        self.polygonDrawControl = controls[1];\r\n                        controls.forEach(function (ctl) {\r\n                            ctl.containerControl = self;\r\n                            self.drawControls.push(ctl);\r\n                            ctl\r\n                                .on(TC.Consts.event.MEASURE + ' ' + TC.Consts.event.MEASUREPARTIAL, function (e) {\r\n                                    self.showMeasures(e);\r\n                                })\r\n                                .on(TC.Consts.event.DRAWCANCEL, function (e) {\r\n                                    // Alerta de condición de carrera si no ponemos un timeout:\r\n                                    // 1- Se llama a cancel de un control Draw.\r\n                                    // 2- Se llama a deactivate (como es mediante cancel, no se se corta la cadena de activación controles).\r\n                                    // 3- Si el control activo anterior era otro de los modos de dibujo de Measure, se activa.\r\n                                    // 4- Se llama a cancel desde aquí.\r\n                                    // 5- Se llama a deactivate del control que acabamos de activar en 3.\r\n                                    // El activate de 3 y el deactivate de 5 sobre el mismo control entran en condición de carrera al crear/destruir la interaction\r\n                                    // por tanto se puede quedar en un estado inconsistente. Para evitar eso, separamos 3 de 5 por el siguiente timeout.\r\n                                    setTimeout(function () {\r\n                                        self.cancel();\r\n                                    }, 100);\r\n                                });\r\n                            // Desactivamos el método exportState que ya se encarga el control padre de ello\r\n                            ctl.exportsState = false;\r\n                        });\r\n\r\n                        resolve(self);\r\n                        self.setMode(self.options.mode);\r\n                    }).catch(reject);\r\n                }).catch(reject);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayMode = function (mode) {\r\n        const self = this;\r\n\r\n        const modes = [];\r\n        self.div.querySelectorAll('.tc-ctl-meas-mode').forEach(function (elm) {\r\n            modes.push(elm);\r\n        });\r\n        var event;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n                self._activeMode = modes.filter(function (elm) {\r\n                    return elm.matches('.tc-ctl-meas-len');\r\n                })[0];\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self._activeMode = modes.filter(function (elm) {\r\n                    return elm.matches('.tc-ctl-meas-area');\r\n                })[0];\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                self._activeMode = null;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        const hiddenModes = modes.filter(function (elm) {\r\n            return elm !== self._activeMode;\r\n        });\r\n\r\n        if (mode) {\r\n            const radio = self.div.querySelector('input[type=radio][name=mode][value=' + mode + ']');\r\n            radio.checked = true;\r\n        }\r\n        else {\r\n            self.div.querySelectorAll('input[type=radio][name=mode]').forEach(function (radio) {\r\n                radio.checked = false;\r\n            });\r\n        }\r\n        if (self._activeMode) {\r\n            self._activeMode.classList.remove(TC.Consts.classes.HIDDEN);\r\n            self._activeMode.querySelector('.tc-ctl').classList.remove(TC.Consts.classes.COLLAPSED);\r\n        }\r\n        hiddenModes.forEach(function (elm) {\r\n            elm.classList.add(TC.Consts.classes.HIDDEN);\r\n        });\r\n        return self;\r\n    };\r\n\r\n    ctlProto.setMode = function (mode) {\r\n        const self = this;\r\n\r\n        self.mode = mode;\r\n        self.displayMode(mode);\r\n\r\n        var event;\r\n        switch (mode) {\r\n            case TC.Consts.geom.POLYLINE:\r\n                self.lineDrawControl.activate();\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n            case TC.Consts.geom.POLYGON:\r\n                self.polygonDrawControl.activate();\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                self.drawControls.forEach(function (ctl) {\r\n                    if (ctl.isActive) {\r\n                        ctl.cancel();\r\n                    }\r\n                });\r\n                event = TC.Consts.event.CONTROLDEACTIVATE;\r\n                break;\r\n            default:\r\n                event = TC.Consts.event.CONTROLACTIVATE;\r\n                break;\r\n        }\r\n\r\n        self.resetValues();\r\n\r\n        if (event && self.map) {\r\n            self.map.trigger(event, { control: self });\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.cancel = function () {\r\n        this.setMode(null, false);\r\n        return this;\r\n    }\r\n\r\n    ctlProto.showMeasures = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        var units = options.units;\r\n        var precision;\r\n        const locale = self.map.options.locale || TC.Cfg.locale\r\n        if (options.area) {\r\n            var area = options.area;\r\n            let html = [];\r\n            (self.units instanceof Array ? self.units : self.units.split(\",\")).forEach(function (unit) {\r\n                const difPeso = TC.control.Measure.units[unit.trim()].peso - TC.control.Measure.units[\"m\"].peso;\r\n                if (area > Math.pow(100, (difPeso - 1))) {\r\n                    let precision = unit === 'm' ? 0 : 3;\r\n                    html.push(TC.Util.formatNumber((area / Math.pow(100, (difPeso))).toFixed(precision), locale) + ' ' + TC.control.Measure.units[unit].abbr);\r\n                }\r\n            })\r\n            self._area.innerHTML = html.join(\"/\");\r\n        }\r\n        if (options.perimeter) {\r\n            var perimeter = options.perimeter;\r\n            if (perimeter > 1000) {\r\n                perimeter = perimeter / 1000;\r\n                units = 'km';\r\n            }\r\n            precision = units === 'm' ? 0 : 3;\r\n            self._peri.innerHTML = TC.Util.formatNumber(perimeter.toFixed(precision), locale) + ' ' + units;\r\n        }\r\n        if (options.length) {\r\n            var length = options.length;\r\n            if (length > 1000) {\r\n                length = length / 1000;\r\n                units = 'km';\r\n            }\r\n            precision = units === 'm' ? 0 : 3;\r\n            self._len.innerHTML = TC.Util.formatNumber(length.toFixed(precision), locale) + ' ' + units;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        if (self._len) {\r\n            self._len.textContent = self.NOMEASURE;\r\n            self._area.textContent = self.NOMEASURE;\r\n            self._peri.textContent = self.NOMEASURE;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getDrawLines = function () {\r\n\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState && self.layer) {\r\n            return {\r\n                id: self.id,\r\n                layer: self.layer.exportState()\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n        const self = this;\r\n        self.layerPromise.then(function (layer) {\r\n            layer.importState(state.layer);\r\n        });\r\n    };\r\n\r\n})();"]}