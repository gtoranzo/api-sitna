{"version":3,"sources":["control/ScaleSelector.js"],"names":["TC","control","Scale","syncLoadJS","apiLocation","ScaleSelector","apply","this","arguments","scales","inherit","ctlProto","prototype","CLASS","template","dust","register","body_0","chk","ctx","w","s","get","block","body_1","f","h","$key","__dustBody","getPath","body_2","key","body_3","value","body_4","body_5","method","render","callback","self","_set1stRenderPromise","Promise","resolve","reject","map","options","resolutions","getScale","wrap","getResolutions","renderData","scale","screenSize","Cfg","div","querySelectorAll","forEach","option","textContent","format","substr","querySelector","addEventListener","Consts","event","CLICK","setScreenSize","setScale","Util","isFunction","catch","err","Error","getMap","then","result","getDpi","window","devicePixelRatio","metersPerDegree","setResolution"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.Scale) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/Scale');\r\n}\r\n\r\nTC.control.ScaleSelector = function () {\r\n    var self = this;\r\n\r\n    TC.control.Scale.apply(self, arguments);\r\n\r\n    self.scales = null;\r\n};\r\n\r\nTC.inherit(TC.control.ScaleSelector, TC.control.Scale);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.ScaleSelector.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-ss';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/ScaleSelector.html\";\r\n\r\n    ctlProto.render = function (callback) {\r\n        var self = this;\r\n        return self._set1stRenderPromise(new Promise(function (resolve, reject) {\r\n            if (self.map) {\r\n                if (!self.scales && self.map.options.resolutions) {\r\n                    self.scales = self.map.options.resolutions.map(self.getScale, self);\r\n                }\r\n                var render = function () {\r\n                    self.scales = self.map.wrap.getResolutions().map(self.getScale, self);\r\n                    self.renderData({ scale: self.getScale(), screenSize: TC.Cfg.screenSize, scales: self.scales }, function () {\r\n\r\n                        self.div.querySelectorAll('option').forEach(function (option) {\r\n                            option.textContent = '1:' + self.format(option.textContent.substr(2));\r\n                        });\r\n\r\n                        self.div.querySelector('input[type=\"button\"]').addEventListener(TC.Consts.event.CLICK, function () { self.setScreenSize(); });\r\n\r\n                        self.div.querySelector('select').addEventListener('change', function () {\r\n                            self.setScale(this.value);\r\n                        });\r\n                        if (TC.Util.isFunction(callback)) {\r\n                            callback();\r\n                        }\r\n                        resolve();\r\n                    }).catch(function (err) {\r\n                        reject(err instanceof Error ? err : Error(err));\r\n                    });\r\n                };\r\n                if (self.scales) {\r\n                    render();\r\n                }\r\n                else {\r\n                    self.map.wrap.getMap().then(render);\r\n                }\r\n            }\r\n            else {\r\n                reject(Error('ScaleSelector no registrado'));\r\n            }\r\n        }));\r\n    };\r\n\r\n    /*\r\n    *  setScale: Sets the resolution of the map from a scale denominator and estimated screen DPI\r\n    *  Parameters: number, the scale denominator\r\n    *  Returns: number, the resolution\r\n    */\r\n    ctlProto.setScale = function (scale) {\r\n        var self = this;\r\n        var result = scale * .0254 / self.getDpi(TC.Cfg.screenSize);\r\n        if (window.devicePixelRatio) {\r\n            result = result / window.devicePixelRatio;\r\n        }\r\n        if (self.metersPerDegree) {\r\n            result = result / self.metersPerDegree;\r\n        }\r\n        self.map.wrap.setResolution(result);\r\n        return result;\r\n    };\r\n\r\n})();"]}