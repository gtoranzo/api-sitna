{"version":3,"sources":["control/ThreeD.js"],"names":["TC","control","ThreeD","Control","apply","this","arguments","inherit","ctlProto","prototype","CLASS","classes","BETA","BTNACTIVE","template","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","map","self","result","call","on","Consts","event","VIEWCHANGE","e","view","THREED","activate","renderData","data","callback","button","div","querySelector","addEventListener","CLICK","disabled","on3DView","unapply","setAttribute","getLocaleString","classList","remove","Util","isFunction","browserSupportWebGL","removeDisabled","view3D","options","getRenderedHtml","loadJS","apiLocation","add","manageButton","deactivate","window","WebGLRenderingContext","canvas","document","createElement","webglOptions","alpha","stencil","failIfMajorPerformanceCaveat","gl","getContext","isSlower","console","log","E","warning","toast","type","msgType","WARNING","duration"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\n(function () {\r\n\r\n    TC.control.ThreeD = function () {\r\n        var self = this;\r\n\r\n        TC.Control.apply(self, arguments);\r\n    };\r\n\r\n    TC.inherit(TC.control.ThreeD, TC.Control);\r\n\r\n    var ctlProto = TC.control.ThreeD.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-threed';\r\n    ctlProto.classes = {\r\n        BETA: 'tc-beta-button',\r\n        BTNACTIVE: 'active'\r\n    };\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/ThreeD.html\";\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        map.on(TC.Consts.event.VIEWCHANGE, function (e) {\r\n            if (e.view == TC.Consts.view.THREED) { // cargamos la vista 3D desde el estado actualizamos el estado del bot√≥n\r\n                self.activate();\r\n            }\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.renderData = function (data, callback) {\r\n        const self = this;\r\n\r\n        return TC.Control.prototype.renderData.call(self, data, function () {\r\n            self.button = self.div.querySelector('.' + self.CLASS + '-btn');\r\n\r\n            self.button.addEventListener(TC.Consts.event.CLICK, function () {\r\n\r\n                if (self.button.disabled) {\r\n                    return;\r\n                }\r\n\r\n                if (!self.map.on3DView) {\r\n                    self.activate();\r\n                } else {\r\n                    self.button.disabled = true;\r\n\r\n                    TC.view.ThreeD.unapply({\r\n                        callback: function () {\r\n                            self.button.setAttribute('title', self.getLocaleString(\"threed.tip\"));\r\n\r\n                            self.button.classList.remove(self.classes.BTNACTIVE);\r\n\r\n                            self.button.disabled = false;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n\r\n        self.button.disabled = true;\r\n\r\n        self.browserSupportWebGL.call(self);\r\n\r\n        const manageButton = function () {\r\n            self.button.setAttribute('title', self.getLocaleString('threed.two.tip'));\r\n            self.button.classList.remove(self.classes.BETA);\r\n\r\n            self.button.classList.add(self.classes.BTNACTIVE);\r\n        };\r\n\r\n        const removeDisabled = function () {\r\n            self.button.disabled = false;\r\n        };\r\n\r\n        if (!self.map.view3D) {\r\n            TC.loadJS(\r\n                !TC.view || !TC.view.ThreeD,\r\n                TC.apiLocation + 'TC/view/ThreeD',\r\n                function () {                                                           /* provisional */\r\n                    TC.view.ThreeD.apply({ map: self.map, options: self.options, getRenderedHtml: self.getRenderedHtml, callback: removeDisabled });\r\n                });\r\n        } else if (!self.map.on3DView) {                                               /* provisional */\r\n            TC.view.ThreeD.apply({ map: self.map, options: self.options, getRenderedHtml: self.getRenderedHtml, callback: removeDisabled });\r\n        }\r\n\r\n        manageButton();\r\n\r\n        //TC.Control.prototype.activate.call(self);\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        var self = this;\r\n\r\n        TC.Control.prototype.deactivate.call(self);\r\n    };\r\n\r\n    ctlProto.browserSupportWebGL = function () {\r\n        var self = this;\r\n        var result = false;\r\n\r\n        //Check for webgl support and if not, then fall back to leaflet\r\n        if (!window.WebGLRenderingContext) {\r\n            // Browser has no idea what WebGL is. Suggest they\r\n            // get a new browser by presenting the user with link to\r\n            // http://get.webgl.org\r\n            result = false;\r\n        } else {\r\n            var canvas = document.createElement('canvas');\r\n\r\n            var webglOptions = {\r\n                alpha: false,\r\n                stencil: false,\r\n                failIfMajorPerformanceCaveat: true\r\n            };\r\n\r\n            try {\r\n                var gl = canvas.getContext(\"webgl\", webglOptions) ||\r\n                    canvas.getContext(\"experimental-webgl\", webglOptions) ||\r\n                    canvas.getContext(\"webkit-3d\", webglOptions) ||\r\n                    canvas.getContext(\"moz-webgl\", webglOptions);\r\n                if (!gl) {\r\n                    // We couldn't get a WebGL context without a major performance caveat.  Let's see if we can get one at all.\r\n                    webglOptions.failIfMajorPerformanceCaveat = false;\r\n                    gl = canvas.getContext(\"webgl\", webglOptions) ||\r\n                        canvas.getContext(\"experimental-webgl\", webglOptions) ||\r\n                        canvas.getContext(\"webkit-3d\", webglOptions) ||\r\n                        canvas.getContext(\"moz-webgl\", webglOptions);\r\n                    if (!gl) {\r\n                        // No WebGL at all.\r\n                        result = false;\r\n                    } else {\r\n                        // We can do WebGL, but only with software rendering (or similar).\r\n                        result = 'slow';\r\n                        self.isSlower = true;\r\n                    }\r\n                } else {\r\n                    // WebGL is good to go!\r\n                    result = true;\r\n                }\r\n            } catch (e) {\r\n                console.log(E);\r\n            }\r\n\r\n            if (result === \"slow\" || !result) {\r\n                var warning = result === \"slow\" ? \"threed.slowSupport.supported\" : \"threed.not.supported\";\r\n                self.map.toast(self.getLocaleString(warning), {\r\n                    type: TC.Consts.msgType.WARNING,\r\n                    duration: 10000\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }\r\n    };\r\n\r\n})();"]}