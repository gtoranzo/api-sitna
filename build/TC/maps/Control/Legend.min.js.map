{"version":3,"sources":["control/Legend.js"],"names":["TC","control","MapContents","syncLoadJS","apiLocation","Legend","apply","this","arguments","inherit","ctlProto","prototype","CLASS","template","isDebug","dust","register","body_0","chk","ctx","w","h","$key","s","get","else","body_1","block","body_2","__dustBody","p","rebase","getPath","x","body_11","body_3","f","body_4","body_10","body_5","body_8","body_6","body_7","body_9","map","self","on","Consts","event","VIEWCHANGE","e","view","onLayerAdd","loadGraphics","bind","THREED","LAYERADD","DEFAULT","off","call","getLayerUIElements","forEach","li","layer","getLayer","dataset","layerId","querySelectorAll","l","img","querySelector","undefined","getAttribute","length","styleLegendImage","updateScale","inScale","outOfScale","layersInScale","classList","contains","uid","layerUid","isVisibleByScale","remove","add","toggle","update","getTree","visible","notVisible","hasVisible","_cache","visibilityStates","visibility","NOT_VISIBLE","HAS_VISIBLE","updateLayerVisibility","updateLayerTree","isBase","options","stealth","hideTree","tree","div","classes","HIDDEN","loadJSInOrder","window","url","templating","render","layerTrees","id","err","out","newLi","DOMParser","parseFromString","body","firstChild","ul","lis","innerHTML","setAttribute","insertBefore","error","removeLayer","getVisibility"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.MapContents) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/MapContents');\r\n}\r\n\r\nTC.control.Legend = function () {\r\n    TC.control.MapContents.apply(this, arguments);\r\n};\r\n\r\nTC.inherit(TC.control.Legend, TC.control.MapContents);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Legend.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-legend';\r\n\r\n    ctlProto.template = {};\r\n    if (TC.isDebug) {\r\n        ctlProto.template[ctlProto.CLASS] = TC.apiLocation + \"TC/templates/Legend.html\";\r\n        ctlProto.template[ctlProto.CLASS + '-node'] = TC.apiLocation + \"TC/templates/LegendNode.html\";\r\n    }\r\n    else {\r\n        ctlProto.template[ctlProto.CLASS] = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<h2>\").h(\"i18n\", ctx, {}, { \"$key\": \"legend\" }).w(\"</h2><div class=\\\"tc-ctl-legend-tree\\\"><ul class=\\\"tc-ctl-legend-branch\\\">\").s(ctx.get([\"workLayers\"], false), ctx, { \"else\": body_1, \"block\": body_2 }, {}).w(\"</ul></div>\"); } body_0.__dustBody = !0; function body_1(chk, ctx) { return chk.w(\"<li class=\\\"tc-ctl-legend-empty\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"noData\" }).w(\"</li>\"); } body_1.__dustBody = !0; function body_2(chk, ctx) { return chk.p(\"tc-ctl-legend-node\", ctx, ctx.rebase(ctx.getPath(true, [])), {}); } body_2.__dustBody = !0; return body_0 };\r\n        ctlProto.template[ctlProto.CLASS + '-node'] = function () { dust.register(ctlProto.CLASS + '-node', body_0); function body_0(chk, ctx) { return chk.x(ctx.get([\"customLegend\"], false), ctx, { \"else\": body_1, \"block\": body_11 }, {}); } body_0.__dustBody = !0; function body_1(chk, ctx) { return chk.w(\"<li \").x(ctx.get([\"children\"], false), ctx, { \"else\": body_2, \"block\": body_3 }, {}).w(\" data-layer-name=\\\"\").f(ctx.get([\"name\"], false), ctx, \"h\").w(\"\\\" data-layer-uid=\\\"\").f(ctx.get([\"uid\"], false), ctx, \"h\").w(\"\\\"><div class=\\\"tc-ctl-legend-title\\\">\").f(ctx.get([\"title\"], false), ctx, \"h\").w(\"</div>\").x(ctx.get([\"legend\"], false), ctx, { \"block\": body_4 }, {}).w(\"<ul class=\\\"tc-ctl-legend-branch\\\">\").s(ctx.get([\"children\"], false), ctx, { \"block\": body_10 }, {}).w(\"</ul></li>\"); } body_1.__dustBody = !0; function body_2(chk, ctx) { return chk.w(\"class=\\\"tc-ctl-legend-node tc-ctl-legend-leaf\\\" \"); } body_2.__dustBody = !0; function body_3(chk, ctx) { return chk.w(\"class=\\\"tc-ctl-legend-node\\\" \"); } body_3.__dustBody = !0; function body_4(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-legend-watch\\\">\").x(ctx.getPath(false, [\"legend\", \"src\"]), ctx, { \"else\": body_5, \"block\": body_8 }, {}).w(\"</div><div class=\\\"tc-ctl-legend-nvr\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"notVisibleAtCurrentResolution\" }).w(\"</div>\"); } body_4.__dustBody = !0; function body_5(chk, ctx) { return chk.x(ctx.getPath(false, [\"legend\", \"width\"]), ctx, { \"block\": body_6 }, {}); } body_5.__dustBody = !0; function body_6(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-legend-img\\\" style=\\\"border:solid \").f(ctx.getPath(false, [\"legend\", \"strokeWidth\"]), ctx, \"h\").w(\"px \").f(ctx.getPath(false, [\"legend\", \"strokeColor\"]), ctx, \"h\").w(\";background-color:\").f(ctx.getPath(false, [\"legend\", \"fillColor\"]), ctx, \"h\").x(ctx.getPath(false, [\"legend\", \"width\"]), ctx, { \"block\": body_7 }, {}).w(\"\\\"></div>\"); } body_6.__dustBody = !0; function body_7(chk, ctx) { return chk.w(\";width:\").f(ctx.getPath(false, [\"legend\", \"width\"]), ctx, \"h\").w(\"px;height:\").f(ctx.getPath(false, [\"legend\", \"height\"]), ctx, \"h\").w(\"px;border-radius:50%\"); } body_7.__dustBody = !0; function body_8(chk, ctx) { return chk.w(\"<img src=\\\"\\\" data-img=\\\"\").f(ctx.getPath(false, [\"legend\", \"src\"]), ctx, \"h\").w(\"\\\" \").x(ctx.getPath(false, [\"legend\", \"width\"]), ctx, { \"block\": body_9 }, {}).w(\" />\"); } body_8.__dustBody = !0; function body_9(chk, ctx) { return chk.w(\"style=\\\"width:\").f(ctx.getPath(false, [\"legend\", \"width\"]), ctx, \"h\").w(\"px;height:\").f(ctx.getPath(false, [\"legend\", \"height\"]), ctx, \"h\").w(\"px;\\\" \"); } body_9.__dustBody = !0; function body_10(chk, ctx) { return chk.p(\"tc-ctl-legend-node\", ctx, ctx.rebase(ctx.getPath(true, [])), {}); } body_10.__dustBody = !0; function body_11(chk, ctx) { return chk.f(ctx.get([\"customLegend\"], false), ctx, \"h\", [\"s\"]); } body_11.__dustBody = !0; return body_0 };\r\n    }\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        map.on(TC.Consts.event.VIEWCHANGE, function (e) {\r\n            const view = e.view;\r\n            const onLayerAdd = self.loadGraphics.bind(self);\r\n\r\n            if (view === TC.Consts.view.THREED) {                \r\n                map.on(TC.Consts.event.LAYERADD, onLayerAdd);\r\n            } else if (view === TC.Consts.view.DEFAULT) {\r\n                map.off(TC.Consts.event.LAYERADD, onLayerAdd);\r\n            }\r\n        });\r\n\r\n        return TC.control.MapContents.prototype.register.call(self, map);\r\n    };\r\n\r\n    ctlProto.loadGraphics = function () {\r\n        const self = this;\r\n        self.getLayerUIElements().forEach(function (li) {\r\n            const layer = self.map.getLayer(li.dataset.layerId);\r\n            if (layer) {\r\n                li.querySelectorAll('li.' + self.CLASS + '-node-visible').forEach(function (l) {\r\n                    const img = l.querySelector('img');\r\n                    if (img && img.getAttribute('src') !== undefined && img.getAttribute('src').length === 0) {\r\n                        self.styleLegendImage(img, layer);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.updateScale = function () {\r\n        const self = this;\r\n        const inScale = self.CLASS + '-node-inscale';\r\n        const outOfScale = self.CLASS + '-node-outofscale';\r\n\r\n        self.getLayerUIElements().forEach(function (li) {\r\n            const layer = self.map.getLayer(li.dataset.layerId);\r\n\r\n            if (layer) {\r\n                var layersInScale = false;\r\n                li.querySelectorAll('li').forEach(function (l) {\r\n                    if (l.classList.contains(self.CLASS + '-node-visible')) {\r\n                        const uid = l.dataset.layerUid;\r\n                        if (layer.isVisibleByScale(uid)) {\r\n                            layersInScale = true;\r\n                            l.classList.remove(outOfScale);\r\n                            l.classList.add(inScale);\r\n                            const img = l.querySelector('img');\r\n                            if (img) {\r\n                                self.styleLegendImage(img, layer);\r\n                            }\r\n                        }\r\n                        else {\r\n                            l.classList.add(outOfScale);\r\n                            l.classList.remove(inScale);\r\n                        }\r\n                    }\r\n                });\r\n                li.classList.toggle(inScale, layersInScale);\r\n                li.classList.toggle(outOfScale, !layersInScale);\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.update = function () {\r\n        const self = this;\r\n\r\n        self.getLayerUIElements().forEach(function (li) {\r\n            const layer = self.map.getLayer(li.dataset.layerId);\r\n            if (layer) {\r\n                layer.getTree();\r\n\r\n                li.querySelectorAll('li').forEach(function (l) {\r\n                    const uid = l.dataset.layerUid;\r\n                    var visible = self.CLASS + '-node-visible';\r\n                    var notVisible = self.CLASS + '-node-notvisible';\r\n                    var hasVisible = self.CLASS + '-node-hasvisible';\r\n\r\n                    switch (layer._cache.visibilityStates[uid]) {\r\n                        case TC.Consts.visibility.NOT_VISIBLE:\r\n                            l.classList.remove(visible, hasVisible);\r\n                            l.classList.add(notVisible);                            \r\n                            break;\r\n                        case TC.Consts.visibility.HAS_VISIBLE:\r\n                            l.classList.remove(visible, notVisible);\r\n                            l.classList.add(hasVisible);                            \r\n                            break;\r\n                        default:\r\n                            // visible\r\n                            l.classList.remove(notVisible, hasVisible);\r\n                            l.classList.add(visible);                            \r\n                            break;\r\n                    }\r\n                });\r\n\r\n                self.updateLayerVisibility(layer);\r\n            }\r\n        });\r\n        self.updateScale();\r\n    };\r\n\r\n    ctlProto.updateLayerTree = function (layer) {\r\n        var self = this;        \r\n\r\n        if (!layer.isBase && !layer.options.stealth) {\r\n            \r\n            //// 09/04/2019 GLS: ignoramos el atributo que venga en la capa porque en la leyenda queremos que el árbol se muestre siempre y \r\n            //// nos ahorramos el tener que pasarlo en el estado del mapa\r\n            if (layer.hideTree || layer.options.hideTree) {\r\n                layer.tree = null;\r\n                layer.hideTree = layer.options.hideTree = false;\r\n\r\n                layer._cache.visibilityStates = {};\r\n            }            \r\n\r\n            TC.control.MapContents.prototype.updateLayerTree.call(self, layer);\r\n\r\n            self.div.querySelector('.' + self.CLASS + '-empty').classList.add(TC.Consts.classes.HIDDEN);            \r\n\r\n            TC.loadJSInOrder(\r\n                !window.dust,\r\n                TC.url.templating,\r\n                function () {\r\n                    dust.render(self.CLASS + '-node', self.layerTrees[layer.id], function (err, out) {\r\n                        const parser = new DOMParser();\r\n                        const newLi = parser.parseFromString(out, 'text/html').body.firstChild;\r\n                        const uid = newLi.dataset.layerUid;\r\n                        const ul = self.div.querySelector('ul.' + self.CLASS + '-branch');\r\n                        const lis = ul.querySelectorAll('li[data-layer-uid=\"' + uid + '\"]');\r\n                        if (lis.length === 1) {\r\n                            const li = lis[0];\r\n                            li.innerHTML = newLi.innerHTML;\r\n                            li.setAttribute('class', newLi.getAttribute('class')); // Esto actualiza si un nodo deja de ser hoja o pasa a ser hoja\r\n                        }\r\n                        else {\r\n                            newLi.dataset.layerId = layer.id;\r\n                            ul.insertBefore(newLi, ul.firstChild);\r\n                        }\r\n                        if (err) {\r\n                            TC.error(err);\r\n                        }\r\n                    });\r\n                    self.update();\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    ctlProto.removeLayer = function (layer) {\r\n        if (!layer.isBase) {\r\n            TC.control.MapContents.prototype.removeLayer.call(this, layer);\r\n        }\r\n    };\r\n\r\n    ctlProto.updateLayerVisibility = function (layer) {\r\n        var self = this;\r\n        self.getLayerUIElements().forEach(function (li) {\r\n            if (li.dataset.layerId === layer.id) {\r\n                li.classList.toggle(self.CLASS + '-node-notvisible', !layer.getVisibility());\r\n            }\r\n        });\r\n    };\r\n\r\n    ctlProto.getLayerUIElements = function () {\r\n        const self = this;\r\n        return self.div.querySelector('ul.' + self.CLASS + '-branch').querySelectorAll('li.' + self.CLASS + '-node');\r\n    };\r\n})();\r\n"]}