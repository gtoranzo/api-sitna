{"version":3,"sources":["Control/OverviewMap.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","OverviewMap","apply","this","arguments","isLoaded","layer","inherit","ctlProto","prototype","CLASS","isDebug","template","dust","register","body_0","chk","ctx","w","__dustBody","map","self","registerLayer","lyr","findLayerById","id","layers","result","i","length","lyrObj","options","availableBaseLayers","$","isPlainObject","baseLayers","Raster","Layer","type","Consts","layerType","VECTOR","KML","WFS","Vector","instanceLayer","Promise","resolve","reject","call","then","ctl","wrap","loaded","defaultLayer","baseLayer","overviewMapLayer","e","resetOptions","getCapabilitiesPromise","isCompatible","crs","getCompatibleMatrixSets","getFallbackLayer","reset","resetOVMapProjection","on","event","PROJECTIONCHANGE","BASELAYERCHANGE","WMS","WMTS","newLayer","indexOf","bind","catch","err","callback","isFunction","MAPLOAD","activate","enable","deactivate","disable"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.OverviewMap = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    self.isLoaded = false;\r\n\r\n    self.layer = null;\r\n};\r\n\r\nTC.inherit(TC.control.OverviewMap, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.OverviewMap.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-ovmap';\r\n\r\n    if (TC.isDebug) {\r\n        ctlProto.template = TC.apiLocation + \"TC/templates/OverviewMap.html\";\r\n    }\r\n    else {\r\n        ctlProto.template = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-ovmap-load tc-hidden\\\"></div>\"); } body_0.__dustBody = !0; return body_0 };\r\n    }\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        const instanceLayer = function (layer) {\r\n            var lyr;\r\n\r\n            var findLayerById = function (id, layers) {\r\n                var result = null;\r\n                for (var i = 0; i < layers.length; i++) {\r\n                    var lyr = layers[i];\r\n                    var l = lyr.id || lyr;\r\n                    if (l === id) {\r\n                        result = lyr;\r\n                        break;\r\n                    }\r\n                }\r\n                return result;\r\n            };\r\n\r\n            if (typeof layer === 'string') {\r\n                var lyrObj = findLayerById(layer, map.options.availableBaseLayers);\r\n                if (!$.isPlainObject(lyrObj)) {\r\n                    lyrObj = findLayerById(layer, map.options.baseLayers);\r\n                }\r\n                if ($.isPlainObject(lyrObj)) {\r\n                    lyr = new TC.layer.Raster(lyrObj);\r\n                }\r\n            }\r\n            else {\r\n                if (layer instanceof TC.Layer) {\r\n                    lyr = layer;\r\n                }\r\n                else if (layer.type === TC.Consts.layerType.VECTOR || layer.type === TC.Consts.layerType.KML || layer.type === TC.Consts.layerType.WFS) {\r\n                    lyr = new TC.layer.Vector(layer);\r\n                }\r\n                else {\r\n                    lyr = new TC.layer.Raster(layer);\r\n                }\r\n            }\r\n\r\n            return lyr;\r\n        };\r\n\r\n        const registerLayer = function (layer) {\r\n            var lyr;\r\n\r\n            lyr = instanceLayer(layer);\r\n\r\n            return lyr;\r\n        };\r\n\r\n        const resetOVMapProjection = function (e) {\r\n            const resetOptions = {};\r\n            self.layer.getCapabilitiesPromise().then(function () {\r\n                if (!self.layer.isCompatible(map.crs) && self.layer.wrap.getCompatibleMatrixSets(map.crs).length === 0) {\r\n                    resetOptions.layer = self.layer.getFallbackLayer();\r\n                }\r\n                self.wrap.reset(resetOptions);\r\n            });\r\n        };\r\n\r\n        const changeBaseLayer = function (e) {\r\n            const self = this;\r\n\r\n            if (self.map.baseLayer.type === TC.Consts.layerType.WMS || self.map.baseLayer.type === TC.Consts.layerType.WMTS || self.options.layer) {\r\n                var newLayer = self.map.baseLayer.overviewMapLayer || self.options.layer;\r\n                if (self.layer.id !== newLayer) {\r\n                    var overviewMapLayer = registerLayer(newLayer);\r\n                    self.wrap.reset({\r\n                        layer: overviewMapLayer\r\n                    }).then(function (layer) {\r\n                        self.layer = layer;\r\n                    });\r\n                } else if (TC.Consts.event.PROJECTIONCHANGE.indexOf(e.type) > -1) {\r\n                    self.wrap.reset({\r\n                        layer: self.layer\r\n                    }).then(function (layer) {\r\n                        self.layer = layer;\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        const result = new Promise(function (resolve, reject) {\r\n            TC.Control.prototype.register.call(self, map)\r\n                .then(function (ctl) {\r\n                    self.wrap = new TC.wrap.control.OverviewMap(self);\r\n                    map.loaded(function () {\r\n                        self.defaultLayer = registerLayer(self.options.layer);\r\n                        self.layer = registerLayer(map.baseLayer.overviewMapLayer || self.options.layer || map.options.baseLayers[0] || map.options.availableBaseLayers[0]);\r\n\r\n                        self.wrap.register(map);                        \r\n\r\n                        resetOVMapProjection({ crs: map.crs });\r\n\r\n                        map.on(TC.Consts.event.PROJECTIONCHANGE + ' ' + TC.Consts.event.BASELAYERCHANGE, changeBaseLayer.bind(self));\r\n                    });\r\n                    resolve(ctl);\r\n                })\r\n                .catch(function (err) {\r\n                    reject(err);\r\n                });\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.loaded = function (callback) {\r\n        var self = this;\r\n\r\n        if ($.isFunction(callback)) {\r\n            if (self.isLoaded && self.map && self.map.isLoaded) {\r\n                callback();\r\n            }\r\n            else {\r\n                self.on(TC.Consts.event.MAPLOAD, callback);\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        this.enable();\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        this.disable();\r\n    };\r\n\r\n    ctlProto.enable = function () {\r\n        var self = this;\r\n        TC.Control.prototype.enable.call(self);\r\n        self.wrap.enable();\r\n    };\r\n\r\n    ctlProto.disable = function () {\r\n        var self = this;\r\n        TC.Control.prototype.disable.call(self);\r\n        self.wrap.disable();\r\n    };\r\n\r\n})();"],"file":"../../Control/OverviewMap.min.js"}