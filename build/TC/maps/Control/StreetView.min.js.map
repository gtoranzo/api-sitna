{"version":3,"sources":["control/StreetView.js"],"names":["TC","Control","syncLoadJS","apiLocation","Consts","url","GOOGLEMAPS","gMapsUrl","Cfg","proxyExceptions","push","control","StreetView","this","_sv","_mapActiveControl","apply","arguments","options","googleMapsKey","viewDiv","_startLonLat","inherit","ctlProto","prototype","CLASS","template","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","dispatchCanvasResize","event","document","createEvent","initEvent","map","div","querySelector","dispatchEvent","reset","ctl","view","onTransitionend","removeEventListener","call","addEventListener","setTimeout","layer","clearFeatures","classList","remove","classes","CHECKED","HIDDEN","self","Util","getDiv","add","insertAdjacentElement","result","layerId","getUID","i","workLayers","length","type","layerType","VECTOR","id","loaded","addLayer","owner","stealth","then","renderPromise","loadJS","window","Draggabilly","DRAGGABILLY","drag","containment","on","e","preset","btn","btnRect","getBoundingClientRect","dragRect","top","bottom","left","right","extent","getExtent","xy","addMarker","cssClass","width","height","anchor","mapRect","xpos","devicePixelRatio","ypos","coords","wrap","getCoordinateFromPixel","callback","resolve","setPosition","CLICK","stopPropagation","closeView","a","b","c","error","render","_set1stRenderPromise","Promise","reject","renderData","getRenderedHtml","out","innerHTML","catch","err","waitId","ondrop","feature","bounds","getBounds","lonLat","reproject","crs","lng","lat","ondrag","li","getLoadingIndicator","addWait","mapDiv","setMarker","sv","center","heading","latLon","getPosition","getPov","Math","round","showsPopup","all","_markerPromises","setDraggable","setCenter","contains","COLLAPSED","google","maps","mapsLonLat","LatLng","StreetViewService","getPanorama","location","preference","StreetViewPreference","BEST","svPanoramaData","svStatus","StreetViewStatus","OK","removeWait","alert","ZERO_RESULTS","getLocaleString","_transitioning","propertyName","resizeEvent","svOptions","position","pov","pitch","zoom","fullscreenControl","zoomControlOptions","ControlPosition","LEFT_TOP","panControlOptions","setOptions","setVisible","StreetViewPanorama","addListener","VISIBLE","features","pegmanMarker","setStyle","refresh","getStatus","style","header","body","display","activeControl","_previousActiveControl","deactivate","endProcess","removeProperty","activate"],"mappings":"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","sourcesContent":["/// <reference path=\"../feature/Marker.js\" />\r\n/// <reference path=\"../feature/Point.js\" />\r\n/// <reference path=\"../ol/ol.js\" />\r\n\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\n(function () {\r\n    TC.Consts.url.GOOGLEMAPS = '//maps.googleapis.com/maps/api/js?v=3';\r\n    var gMapsUrl = TC.Consts.url.GOOGLEMAPS;\r\n    TC.Cfg.proxyExceptions = TC.Cfg.proxyExceptions || [];\r\n    TC.Cfg.proxyExceptions.push(TC.Consts.url.GOOGLEMAPS);\r\n\r\n    TC.control.StreetView = function () {\r\n        var self = this;\r\n        self._sv = null;\r\n        self._mapActiveControl = null;\r\n\r\n        TC.Control.apply(self, arguments);\r\n\r\n        if (self.options.googleMapsKey) {\r\n            gMapsUrl += '&key=' + self.options.googleMapsKey;\r\n        }\r\n\r\n        self.viewDiv = null;\r\n        self._startLonLat = null;\r\n    };\r\n\r\n    TC.inherit(TC.control.StreetView, TC.Control);\r\n\r\n    var ctlProto = TC.control.StreetView.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-sv';\r\n\r\n    ctlProto.template = {};\r\n    ctlProto.template[ctlProto.CLASS] = TC.apiLocation + \"TC/templates/StreetView.html\";\r\n    ctlProto.template[ctlProto.CLASS + '-view'] = TC.apiLocation + \"TC/templates/StreetViewView.html\";\r\n\r\n    const dispatchCanvasResize = function () {\r\n        var event = document.createEvent('HTMLEvents');\r\n        event.initEvent('resize', true, false);\r\n        this.map.div.querySelector('canvas').dispatchEvent(event);\r\n    };\r\n\r\n    var preset = function (ctl) {\r\n        ctl.div.querySelector('.' + ctl.CLASS + '-btn').classList.add(TC.Consts.classes.CHECKED);\r\n        ctl.map.div.classList.add(ctl.CLASS + '-active');\r\n    };\r\n\r\n    var reset = function (ctl) {\r\n        const view = ctl.viewDiv;\r\n        const onTransitionend = function () {\r\n            view.removeEventListener('transitionend', onTransitionend);\r\n            dispatchCanvasResize.call(ctl);\r\n        };\r\n\r\n        view.addEventListener('transitionend', onTransitionend);\r\n\r\n        // Por si no salta transitionend\r\n        setTimeout(function () {\r\n            dispatchCanvasResize.call(ctl);\r\n        }, 1000);\r\n\r\n\r\n        ctl.layer.clearFeatures();\r\n        ctl.div.querySelector('.' + ctl.CLASS + '-btn').classList.remove(TC.Consts.classes.CHECKED);\r\n        ctl.div.querySelector('.' + ctl.CLASS + '-drag').classList.remove(TC.Consts.classes.HIDDEN);\r\n        ctl.map.div.classList.remove(ctl.CLASS + '-active');\r\n        ctl._startLonLat = null;\r\n    };\r\n\r\n    var resolve = function (ctl) {\r\n        var result = false;\r\n        const btn = ctl.div.querySelector('.' + ctl.CLASS + '-btn');\r\n        const drag = ctl.div.querySelector('.' + ctl.CLASS + '-drag');\r\n\r\n        var btnRect = btn.getBoundingClientRect();\r\n        var dragRect = drag.getBoundingClientRect();\r\n        drag.classList.add(TC.Consts.classes.HIDDEN);\r\n        if (dragRect.top < btnRect.top || dragRect.top > btnRect.bottom ||\r\n            dragRect.left < btnRect.left || dragRect.left > btnRect.right) {\r\n            // Hemos soltado fuera del botón: activar StreetView\r\n            result = true;\r\n            // Precarga de marcadores\r\n            var extent = ctl.map.getExtent();\r\n            var xy = [extent[2], extent[3]];\r\n            for (var i = 0; i < 16; i++) {\r\n                ctl.layer.addMarker(xy, {\r\n                    cssClass: 'tc-marker-sv-' + i,\r\n                    width: 48,\r\n                    height: 48,\r\n                    anchor: [0, 1]\r\n                });\r\n            }\r\n            /////////////////////\r\n            // Activamos StreetView\r\n            var mapRect = ctl.map.div.getBoundingClientRect();\r\n            var xpos = (((dragRect.left * window.devicePixelRatio) + (dragRect.right * window.devicePixelRatio)) / 2) - (mapRect.left * window.devicePixelRatio);\r\n            var ypos = (dragRect.bottom * window.devicePixelRatio) - (mapRect.top * window.devicePixelRatio);\r\n            var coords = ctl.map.wrap.getCoordinateFromPixel([xpos, ypos]);\r\n            ctl.callback(coords);\r\n        }\r\n        else {\r\n            reset(ctl);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        if (!self.viewDiv) {\r\n            self.viewDiv = TC.Util.getDiv(self.options.viewDiv);\r\n            self.viewDiv.classList.add(self.CLASS + '-view', TC.Consts.classes.HIDDEN);\r\n            if (!self.options.viewDiv) {\r\n                map.div.insertAdjacentElement('beforebegin', self.viewDiv);\r\n            }\r\n        }\r\n\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        self.layer = null;\r\n        var layerId = self.getUID();\r\n        for (var i = 0; i < map.workLayers.length; i++) {\r\n            var layer = map.workLayers[i];\r\n            if (layer.type === TC.Consts.layerType.VECTOR && layer.id === layerId) {\r\n                self.layer = layer;\r\n                break;\r\n            }\r\n        }\r\n        if (!self.layer) {\r\n            map.loaded(function () {\r\n                map.addLayer({\r\n                    id: layerId,\r\n                    owner: self,\r\n                    stealth: true,\r\n                    type: TC.Consts.layerType.VECTOR\r\n                }).then(function (layer) {\r\n                    self.layer = layer;\r\n                });\r\n            });\r\n        }\r\n\r\n        self.renderPromise().then(function () {\r\n            TC.loadJS(\r\n                !window.Draggabilly,\r\n                [TC.apiLocation + TC.Consts.url.DRAGGABILLY],\r\n                function () {\r\n                    const drag = new Draggabilly(self.div.querySelector('.' + self.CLASS + '-drag'), {\r\n                        containment: self.map.div\r\n                    });\r\n                    drag.on('dragStart', function (e) {\r\n                        preset(self);\r\n                    });\r\n                    drag.on('dragEnd', function (e) {\r\n                        resolve(self);\r\n                        drag.setPosition(0, 0);\r\n                    });\r\n                }\r\n            );\r\n\r\n            const view = self.viewDiv;\r\n            view.querySelector('.' + self.CLASS + '-btn-close').addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                e.stopPropagation();\r\n                self.closeView();\r\n            });\r\n        }\r\n            , function (a, b, c) {\r\n                TC.error(\"Error de renderizado StreetView\");\r\n            });\r\n\r\n        return result;\r\n    };\r\n\r\n\r\n\r\n    ctlProto.render = function () {\r\n        const self = this;\r\n\r\n        return self._set1stRenderPromise(new Promise(function (resolve, reject) {\r\n            self.renderData(null, function () {\r\n                self.getRenderedHtml(self.CLASS + '-view', null).then(function (out) {\r\n                    //lo normal sería hacer el resolve después de volcar out en viewDiv\r\n                    //pero a veces fallaba\r\n                    //no se detonaba, sin dar error alguno\r\n                    //así que lo arreglo como a mí me gusta:\r\n                    setTimeout(function () {\r\n                        self.viewDiv.innerHTML = out;\r\n                        resolve(self);\r\n                    }\r\n                        , 300);\r\n\r\n\r\n                    //console.log(\"Casi resuelto... \" + out.length);\r\n                    //self._$viewDiv.html(out);\r\n                    //if (err)\r\n                    //{\r\n                    //    TC.error(err);\r\n                    //}\r\n                    //resolve(self);\r\n                    //console.log(\"Resuelto!\");\r\n\r\n                })\r\n                    .catch(function (err) {\r\n                        TC.error(err);\r\n                    });\r\n            });\r\n        }));\r\n    };\r\n\r\n    var waitId = 0;\r\n\r\n    ctlProto.callback = function (coords) {\r\n        var self = this;\r\n        var geogCrs = 'EPSG:4326';\r\n\r\n        var ondrop = function (feature) {\r\n            if (self._sv) {\r\n                var bounds = feature.getBounds();                \r\n                lonLat = TC.Util.reproject([(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2], self.map.crs, geogCrs);                \r\n                self._sv.setPosition({ lng: lonLat[0], lat: lonLat[1] });\r\n            }\r\n        }\r\n\r\n        var ondrag = function (feature) {\r\n            if (self._sv) {\r\n                var bounds = feature.getBounds();\r\n                self._startLonLat = TC.Util.reproject([(bounds[0] + bounds[2]) / 2, (bounds[1] + bounds[3]) / 2], self.map.crs, geogCrs);\r\n            }\r\n        }\r\n\r\n        var li = self.map.getLoadingIndicator();\r\n        if (li) {\r\n            waitId = li.addWait(waitId);\r\n        }\r\n\r\n        const mapDiv = self.map.div;\r\n\r\n        var setMarker = function (sv, center) {\r\n            self.layer.clearFeatures();\r\n\r\n            var xy;\r\n            var heading;\r\n            if (sv) {\r\n                var latLon = sv.getPosition();\r\n                xy = TC.Util.reproject([latLon.lng(), latLon.lat()], geogCrs, self.map.crs);\r\n                heading = sv.getPov().heading;\r\n            }\r\n            else {\r\n                xy = coords;\r\n                heading = 0;\r\n            }\r\n            self.map.addMarker(xy, {\r\n                cssClass: 'tc-marker-sv-' + (Math.round(16.0 * heading / 360) + 16) % 16,\r\n                width: 48,\r\n                height: 48,\r\n                anchor: [0.4791666666666667, 0.7083333333333333],\r\n                layer: self.layer,\r\n                showsPopup: false\r\n            });\r\n            Promise.all(self.map._markerPromises).then(function () {\r\n                // Para poder arrastrar a pegman                \r\n                self.layer.wrap.setDraggable(true, ondrop, ondrag);\r\n            });\r\n\r\n            if (center) {\r\n                var setCenter = function () {\r\n                    self.map.setCenter(xy);\r\n                };\r\n                // Esperamos a que el mapa esté colapsado para centrarnos: ahorramos ancho de banda\r\n                if (mapDiv.classList.contains(TC.Consts.classes.COLLAPSED)) {\r\n                    setCenter();\r\n                }\r\n                else {\r\n                    setTimeout(setCenter, 1200);\r\n                }\r\n            }\r\n        };\r\n\r\n        TC.loadJS(\r\n            !window.google || !google.maps,\r\n            gMapsUrl,\r\n            function () {\r\n\r\n                if (window.google) {\r\n\r\n                    setMarker();\r\n\r\n                    const view = self.viewDiv;\r\n                    const lonLat = TC.Util.reproject(coords, self.map.crs, geogCrs);\r\n                    const mapsLonLat = new google.maps.LatLng(lonLat[1], lonLat[0]);\r\n\r\n                    // Comprobamos si hay datos de SV en el sitio elegido.\r\n                    const svService = new google.maps.StreetViewService();\r\n                    svService.getPanorama({\r\n                        location: mapsLonLat,\r\n                        preference: google.maps.StreetViewPreference.BEST\r\n                    }, function (svPanoramaData, svStatus) {\r\n                        if (svStatus !== google.maps.StreetViewStatus.OK) {\r\n                            if (li) {\r\n                                li.removeWait(waitId);\r\n                            }\r\n                            setTimeout(function () { // Timeout para dar tiempo a ocultarse a LoadingIndicator\r\n                                TC.alert(svStatus === google.maps.StreetViewStatus.ZERO_RESULTS ? self.getLocaleString('noStreetView') : self.getLocaleString('streetViewUnknownError'));\r\n                                self.layer.wrap.setDraggable(false);\r\n                                reset(self);\r\n                            }, 100);\r\n                        }\r\n                        else {\r\n                            const onTransitionend = function (e) {\r\n                                if (!self._transitioning) {\r\n                                    return;\r\n                                }\r\n\r\n                                if (e.propertyName === 'width' || e.propertyName === 'height') {\r\n\r\n                                    self._transitioning = false;\r\n\r\n                                    if (li) {\r\n                                        li.removeWait(waitId);\r\n                                    }\r\n\r\n                                    const resizeEvent = document.createEvent('HTMLEvents');\r\n                                    resizeEvent.initEvent('resize', false, false);\r\n                                    mapDiv.dispatchEvent(resizeEvent);\r\n\r\n                                    dispatchCanvasResize.call(self);\r\n                                    view.removeEventListener('transitionend', onTransitionend);\r\n\r\n                                    var svOptions = {\r\n                                        position: mapsLonLat,\r\n                                        pov: {\r\n                                            heading: 0,\r\n                                            pitch: 0\r\n                                        },\r\n                                        zoom: 1,\r\n                                        fullscreenControl: false,\r\n                                        zoomControlOptions: {\r\n                                            position: google.maps.ControlPosition.LEFT_TOP\r\n                                        },\r\n                                        panControlOptions: {\r\n                                            position: google.maps.ControlPosition.LEFT_TOP\r\n                                        }\r\n                                    };\r\n\r\n                                    if (!self._sv) {\r\n                                        self._sv = new google.maps.StreetViewPanorama(view, svOptions);\r\n                                        google.maps.event.addListener(self._sv, 'position_changed', function () {\r\n                                            setMarker(self._sv, view.classList.contains(TC.Consts.classes.VISIBLE));\r\n                                        });\r\n                                        google.maps.event.addListener(self._sv, 'pov_changed', function () {\r\n                                            if (self.layer.features && self.layer.features.length > 0) {\r\n                                                var pegmanMarker = self.layer.features[0];\r\n\r\n                                                delete pegmanMarker.options.url;\r\n                                                pegmanMarker.options.cssClass = 'tc-marker-sv-' + ((Math.round(16.0 * self._sv.getPov().heading / 360) + 16) % 16);\r\n                                                pegmanMarker.setStyle(pegmanMarker.options);\r\n\r\n                                                self.layer.refresh();\r\n                                            }\r\n                                        });\r\n                                        google.maps.event.addListener(self._sv, 'status_changed', function () {\r\n                                            var svStatus = self._sv.getStatus();\r\n\r\n                                            if (svStatus !== google.maps.StreetViewStatus.OK) {\r\n                                                self._sv.setVisible(false);\r\n                                                TC.alert(svStatus === google.maps.StreetViewStatus.ZERO_RESULTS ? self.getLocaleString('noStreetView') : self.getLocaleString('streetViewUnknownError'));\r\n                                                if (self._startLonLat) {\r\n                                                    self._sv.setVisible(true);\r\n                                                    self._sv.setPosition({ lng: self._startLonLat[0], lat: self._startLonLat[1] });\r\n                                                }\r\n                                                else {\r\n                                                    self.layer.wrap.setDraggable(false);\r\n                                                    self.closeView();\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        self._sv.setOptions(svOptions);\r\n                                        self._sv.setVisible(true);\r\n                                    }\r\n                                }\r\n                            };\r\n\r\n                            self._transitioning = true;\r\n                            view.addEventListener('transitionend', onTransitionend);\r\n\r\n                            if (!self.options.viewDiv) {\r\n                                // No había definida una vista. Para hacer el control compatible con mapas incrustados,\r\n                                // en este caso a la vista nueva le asignamos el tamaño del mapa.\r\n                                const mapRect = mapDiv.getBoundingClientRect();\r\n                                self.viewDiv.style.height = mapRect.height + 'px';\r\n                                self.viewDiv.style.width = mapRect.width + 'px';\r\n                            }\r\n                            mapDiv.classList.add(TC.Consts.classes.COLLAPSED);\r\n                            view.style.left = '';\r\n                            view.style.top = '';\r\n                            view.classList.remove(TC.Consts.classes.HIDDEN);\r\n                            view.classList.add(TC.Consts.classes.VISIBLE);\r\n\r\n\r\n                            // Por si no salta transitionend\r\n                            setTimeout(function () {\r\n                                onTransitionend({ propertyName: 'width' });\r\n                            }, 1000);\r\n\r\n                            const header = document.body.querySelector('header');\r\n                            if (header) {\r\n                                header.style.display = 'none';\r\n                            }\r\n\r\n                            //apagar lo que sea que esté encendido (probablemente featInfo)\r\n                            //al cerrar con el aspa, volverá a detonarse StreetView.deactivate()\r\n                            //que, a su vez, restaurará el control anterior (FeatureInfo)\r\n                            if (self.map.activeControl) {\r\n                                self._previousActiveControl = self.map.activeControl;\r\n                                self.map.activeControl.deactivate(true);\r\n                            }\r\n\r\n                            setMarker(self._sv);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    reset(self);\r\n                }\r\n            }, false, true);\r\n    };\r\n\r\n    ctlProto.closeView = function () {\r\n        const self = this;\r\n        const mapDiv = self.map.div;\r\n        const view = self.viewDiv;\r\n\r\n        const endProcess = function () {\r\n            mapDiv.classList.remove(TC.Consts.classes.COLLAPSED);\r\n            const resizeEvent = document.createEvent('HTMLEvents');\r\n            resizeEvent.initEvent('resize', false, false);\r\n            mapDiv.dispatchEvent(resizeEvent); // Para evitar que salga borroso el mapa tras cerrar SV.\r\n        };\r\n        const transitionend = 'transitionend';\r\n        const onTransitionend = function (e) {\r\n            if (e.propertyName === 'width' || e.propertyName === 'height') {\r\n                view.removeEventListener(transitionend, onTransitionend);\r\n                endProcess();\r\n            }\r\n        };\r\n        view.removeEventListener(transitionend, onTransitionend);\r\n        view.addEventListener(transitionend, onTransitionend);\r\n        setTimeout(endProcess, 1000); // backup por si falla la transición.\r\n\r\n        if (!self.options.viewDiv) {\r\n            // No había definida una vista. Para hacer el control compatible con mapas incrustados,\r\n            // en este caso a la vista nueva le habíamos asignado el tamaño del mapa.\r\n            self.viewDiv.style.removeProperty('height');\r\n            self.viewDiv.style.removeProperty('width');\r\n        }\r\n        view.classList.add(TC.Consts.classes.HIDDEN);\r\n        view.classList.remove(TC.Consts.classes.VISIBLE);\r\n        self.div.querySelector('.' + self.CLASS + '-drag').classList.remove(TC.Consts.classes.HIDDEN);\r\n        self.layer.wrap.setDraggable(false);\r\n        reset(self);\r\n        self._sv.setVisible(false);\r\n        const header = document.body.querySelector('header');\r\n        if (header) {\r\n            header.style.display = '';\r\n        }\r\n\r\n        if (self._previousActiveControl) {\r\n            self._previousActiveControl.activate();\r\n        }\r\n    };\r\n})();"]}