{"version":3,"sources":["control/MultiFeatureInfo.js"],"names":["TC","control","FeatureInfoCommons","syncLoadJS","apiLocation","MultiFeatureInfo","Control","apply","this","arguments","modes","options","Consts","geom","POINT","POLYGON","featureInfoControl","lineFeatureInfoControl","polygonFeatureInfoControl","featureInfoControls","lastCtrlActive","popup","exportsState","inherit","ctlProto","prototype","CLASS","template","dust","register","body_0","chk","ctx","w","h","$key","x","get","block","body_1","body_2","body_3","__dustBody","f","mergeOptions","opt1","opt2","Util","extend","map","self","div","querySelectorAll","forEach","input","checked","Promise","resolve","reject","ctlPromises","call","styles","push","addControl","displayMode","then","POLYLINE","style","line","polygon","on","event","LAYERADD","LAYERREMOVE","LAYERVISIBILITY","e","updateUI","CONTROLACTIVATE","CONTROLDEACTIVATE","all","activate","render","callback","renderData","pointSelectValue","lineSelectValue","polygonSelectValue","_set1stRenderPromise","changeEvent","value","addEventListener","querySelector","CLICK","preventDefault","ctl","info","_infoHistory","resultsLayer","features","slice","downplayFeature","filterLayer","layer","removeFeature","FEATUREREMOVE","some","FEATUREADD","FEATURESADD","isFunction","deactivate","renderPromise","enabled","workLayers","l","type","layerType","WMS","getVisibility","disabled","isActive","delFeaturesBtn","classList","toggle","classes","HIDDEN","c","persistentHighlights","every","length","displayValue","display","removeProperty"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.FeatureInfoCommons) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/FeatureInfoCommons');\r\n}\r\n(function () {\r\n    TC.control.MultiFeatureInfo = function () {\r\n        var self = this;\r\n        TC.Control.apply(self, arguments);\r\n        self.modes = self.options.modes || {};\r\n        if (typeof self.modes[TC.Consts.geom.POINT] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POINT] = true;\r\n        }\r\n        if (typeof self.modes[TC.Consts.geom.POLYGON] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POLYGON] = true;\r\n        }\r\n        self.featureInfoControl = null;\r\n        self.lineFeatureInfoControl = null;\r\n        self.polygonFeatureInfoControl = null;\r\n        self.featureInfoControls = [];\r\n        self.lastCtrlActive = null;\r\n        self.popup = null;\r\n        self.exportsState = false; // Los controles que exportan estado son los hijos\r\n    };\r\n\r\n    TC.inherit(TC.control.MultiFeatureInfo, TC.control.FeatureInfoCommons);\r\n\r\n    var ctlProto = TC.control.MultiFeatureInfo.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-m-finfo';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/MultiFeatureInfo.html\";\r\n\r\n    const mergeOptions = function (opt1, opt2) {\r\n        if (opt1) {\r\n            if (opt1 === true) {\r\n                opt1 = {};\r\n            }\r\n            return TC.Util.extend(true, opt1, opt2);\r\n        }\r\n        return opt1;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        self.div.querySelectorAll('input[type=radio]').forEach(function (input) {\r\n            input.checked = false;\r\n        });\r\n\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            const ctlPromises = [TC.Control.prototype.register.call(self, map)]\r\n            const styles = self.options.styles || {};\r\n            if (self.modes[TC.Consts.geom.POINT]) {\r\n                ctlPromises.push(map.addControl(\"featureInfo\", mergeOptions(self.modes[TC.Consts.geom.POINT],\r\n                    { displayMode: self.options.displayMode })).then(function (control) {\r\n                        self.featureInfoControl = control;\r\n                        self.featureInfoControls.push(control);\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n                ctlPromises.push(map.addControl(\"lineFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYLINE],\r\n                    { displayMode: self.options.displayMode, style: styles.line })).then(function (control) {\r\n                        self.lineFeatureInfoControl = control;\r\n                        self.featureInfoControls.push(control);\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYGON]) {\r\n                ctlPromises.push(map.addControl(\"polygonFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYGON],\r\n                    { displayMode: self.options.displayMode, style: styles.polygon })).then(function (control) {\r\n                        self.polygonFeatureInfoControl = control;\r\n                        self.featureInfoControls.push(control);\r\n                        return control;\r\n                    }));\r\n            }\r\n\r\n            map.on(`${TC.Consts.event.LAYERADD} ${TC.Consts.event.LAYERREMOVE} ${TC.Consts.event.LAYERVISIBILITY}`, function (e) {\r\n                self.updateUI();\r\n            });\r\n\r\n            map.on(`${TC.Consts.event.CONTROLACTIVATE} ${TC.Consts.event.CONTROLDEACTIVATE}`, function (e) {\r\n                if (e.control === self.featureInfoControl || e.control === self.lineFeatureInfoControl || e.control === self.polygonFeatureInfoControl) {\r\n                    self.updateUI();\r\n                }\r\n            });\r\n\r\n            Promise.all(ctlPromises).then(function () {\r\n                if (self.featureInfoControl) {\r\n                    self.featureInfoControl.activate();\r\n                    self.lastCtrlActive = self.featureInfoControl;\r\n                }\r\n                self.updateUI();\r\n                resolve(self);\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        var renderData = {};\r\n        if (self.modes[TC.Consts.geom.POINT]) {\r\n            renderData.pointSelectValue = TC.Consts.geom.POINT;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n            renderData.lineSelectValue = TC.Consts.geom.POLYLINE;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYGON]) {\r\n            renderData.polygonSelectValue = TC.Consts.geom.POLYGON;\r\n        }\r\n        return self._set1stRenderPromise(self.renderData(renderData,\r\n            function () {\r\n                var changeEvent = function () {\r\n                    switch (this.value) {\r\n                        case TC.Consts.geom.POLYLINE:\r\n                            //modo línea\r\n                            self.lineFeatureInfoControl.activate();\r\n                            self.lastCtrlActive = self.lineFeatureInfoControl;\r\n                            break;\r\n                        case TC.Consts.geom.POLYGON:\r\n                            //modo poligono\r\n                            self.polygonFeatureInfoControl.activate();\r\n                            self.lastCtrlActive = self.polygonFeatureInfoControl;\r\n                            break;\r\n                        default:\r\n                            //modo point\r\n                            self.featureInfoControl.activate();\r\n                            self.lastCtrlActive = self.featureInfoControl;\r\n                            break;\r\n                    }\r\n                };\r\n                self.div.querySelectorAll('input[type=radio]').forEach(function (input) {\r\n                    input.addEventListener('change', changeEvent);\r\n                });\r\n\r\n                //URI bind del click del boton de borrar seleccionadas\r\n                const delFeaturesBtn = self.div.querySelector(`.${self.CLASS}-btn-remove`);\r\n                delFeaturesBtn.addEventListener(TC.Consts.event.CLICK, function (event) {\r\n                    event.preventDefault();\r\n                    self.featureInfoControls.forEach(ctl => {\r\n                        ctl.info = null;\r\n                        ctl._infoHistory = {};\r\n                        ctl.resultsLayer.features.slice().forEach(f => ctl.downplayFeature(f));\r\n                        ctl.filterLayer.features.slice().forEach(f => f.layer.removeFeature(f));\r\n                    });\r\n                });\r\n                self.map\r\n                    //.on(TC.Consts.event.FEATUREINFO, function () {\r\n                    //    delFeaturesBtn.disabled = false;\r\n                    //})\r\n                    //.on(TC.Consts.event.NOFEATUREINFO, function (e) {\r\n                    //    if (e.control && e.control.filterFeature) {\r\n                    //        delFeaturesBtn.disabled = false;\r\n                    //    }\r\n                    //})\r\n                    .on(TC.Consts.event.FEATUREREMOVE, function (e) {\r\n                        if (self.featureInfoControls.some(ctl => ctl.resultsLayer === e.layer || ctl.filterLayer === e.layer)) {\r\n                            self.updateUI();\r\n                        }\r\n                    })\r\n                    .on(TC.Consts.event.FEATUREADD + ' ' + TC.Consts.event.FEATURESADD, function (e) {\r\n                        if (self.featureInfoControls.some(ctl => ctl.resultsLayer === e.layer || ctl.filterLayer === e.layer)) {\r\n                            self.updateUI();\r\n                        }\r\n                    });\r\n\r\n                if (TC.Util.isFunction(callback)) {\r\n                    callback();\r\n                }\r\n            }));\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        if (self.lastCtrlActive)\r\n            self.lastCtrlActive.activate();\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        var self = this;\r\n        self.lastCtrlActive.deactivate(false);\r\n    };\r\n\r\n    ctlProto.updateUI = function () {\r\n        const self = this;\r\n        self.renderPromise().then(function () {\r\n            const enabled = self.map.workLayers.some(l => l.type === TC.Consts.layerType.WMS && l.getVisibility());\r\n            self.div.querySelectorAll('input').forEach(function (input) {\r\n                input.disabled = !enabled;\r\n            });\r\n            if (self.featureInfoControl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POINT}]`);\r\n                if (input) {\r\n                    input.checked = self.featureInfoControl.isActive;\r\n                }\r\n            }\r\n            if (self.lineFeatureInfoControl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POLYLINE}]`);\r\n                if (input) {\r\n                    input.checked = self.lineFeatureInfoControl.isActive;\r\n                }\r\n            }\r\n            if (self.polygonFeatureInfoControl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POLYGON}]`);\r\n                if (input) {\r\n                    input.checked = self.polygonFeatureInfoControl.isActive;\r\n                }\r\n            }\r\n\r\n            const delFeaturesBtn = self.div.querySelector(`.${self.CLASS}-btn-remove`);\r\n            delFeaturesBtn.classList.toggle(TC.Consts.classes.HIDDEN, !self.featureInfoControls.some(c => c.options.persistentHighlights));\r\n            delFeaturesBtn.disabled = self.featureInfoControls.every(ctl => ctl.resultsLayer && ctl.resultsLayer.features.length === 0 && ctl.filterLayer && ctl.filterLayer.features.length === 0);\r\n\r\n\r\n            // Hack para compensar bug de Edge: no se actualiza el estilo al cambiar el estado del radio.\r\n            const displayValue = self.div.style.display;\r\n            self.div.style.display = 'none';\r\n            if (displayValue) {\r\n                self.div.style.display = displayValue;\r\n            }\r\n            else {\r\n                self.div.style.removeProperty('display');\r\n            }\r\n        });\r\n    };\r\n\r\n})();"]}