{"version":3,"sources":["control/MultiFeatureInfo.js"],"names":["TC","control","FeatureInfoCommons","syncLoadJS","apiLocation","MultiFeatureInfo","this","lineColor","Control","apply","arguments","modes","options","Consts","geom","POINT","POLYGON","fInfoCtrl","lineFInfoCtrl","polygonFInfoCtrl","lastCtrlActive","popup","exportsState","inherit","ctlProto","prototype","CLASS","isDebug","template","dust","register","body_0","chk","ctx","w","h","$key","x","get","block","body_1","body_2","body_3","__dustBody","f","mergeOptions","opt1","opt2","$","extend","map","self","Promise","resolve","reject","ctlPromises","call","push","addControl","displayMode","then","POLYLINE","all","activate","render","callback","renderData","pointSelectValue","lineSelectValue","polygonSelectValue","changeEvent","value","console","log","activeControl","div","querySelectorAll","forEach","input","addEventListener","isFunction","deactivate","Map","getDefaultControl","candidate","getControlsByClass","length"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.FeatureInfoCommons) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/FeatureInfoCommons');\r\n}\r\n(function () {\r\n    TC.control.MultiFeatureInfo = function () {\r\n        var self = this;\r\n        self.lineColor = null;\r\n        TC.Control.apply(self, arguments);\r\n        self.modes = self.options.modes || {};\r\n        if (typeof self.modes[TC.Consts.geom.POINT] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POINT] = true;\r\n        }\r\n        if (typeof self.modes[TC.Consts.geom.POLYGON] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POLYGON] = true;\r\n        }\r\n        self.fInfoCtrl = null;\r\n        self.lineFInfoCtrl = null;\r\n        self.polygonFInfoCtrl = null;\r\n        self.lastCtrlActive = null;\r\n        self.popup = null;\r\n        self.exportsState = false; // Los controles que exportan estado son los hijos\r\n    };\r\n\r\n    TC.inherit(TC.control.MultiFeatureInfo, TC.control.FeatureInfoCommons);\r\n\r\n    var ctlProto = TC.control.MultiFeatureInfo.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-m-finfo';\r\n\r\n    if (TC.isDebug) {\r\n        ctlProto.template = TC.apiLocation + \"TC/templates/MultiFeatureInfo.html\";\r\n    }\r\n    else {\r\n        ctlProto.template = function () { dust.register(ctlProto.CLASS,body_0);function body_0(chk,ctx){return chk.w(\"<div class=\\\"tc-ctl-m-finfo-select\\\"><form><span>\").h(\"i18n\",ctx,{},{\"$key\":\"selection\"}).w(\"</span>\").x(ctx.get([\"pointSelectValue\"], false),ctx,{\"block\":body_1},{}).x(ctx.get([\"lineSelectValue\"], false),ctx,{\"block\":body_2},{}).x(ctx.get([\"polygonSelectValue\"], false),ctx,{\"block\":body_3},{}).w(\"</form></div>\");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w(\"<label class=\\\"tc-ctl-m-finfo-btn-point\\\" title=\\\"\").h(\"i18n\",ctx,{},{\"$key\":\"selectionByPoint\"}).w(\"\\\"><input type=\\\"radio\\\" name=\\\"selectmode\\\" value=\\\"\").f(ctx.get([\"pointSelectValue\"], false),ctx,\"h\").w(\"\\\" checked /><span class=\\\"tc-ctl-btn\\\">\").h(\"i18n\",ctx,{},{\"$key\":\"byPoint\"}).w(\"</span></label>\");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w(\"<label class=\\\"tc-ctl-m-finfo-btn-line\\\" title=\\\"\").h(\"i18n\",ctx,{},{\"$key\":\"selectionByLine\"}).w(\"\\\"><input type=\\\"radio\\\" name=\\\"selectmode\\\" value=\\\"\").f(ctx.get([\"lineSelectValue\"], false),ctx,\"h\").w(\"\\\" /><span class=\\\"tc-ctl-btn\\\">\").h(\"i18n\",ctx,{},{\"$key\":\"byLine\"}).w(\"</span></label>\");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w(\"<label class=\\\"tc-ctl-m-finfo-btn-polygon\\\" title=\\\"\").h(\"i18n\",ctx,{},{\"$key\":\"selectionByPrecinct\"}).w(\"\\\"><input type=\\\"radio\\\" name=\\\"selectmode\\\" value=\\\"\").f(ctx.get([\"polygonSelectValue\"], false),ctx,\"h\").w(\"\\\" /><span class=\\\"tc-ctl-btn\\\">\").h(\"i18n\",ctx,{},{\"$key\":\"byPrecinct\"}).w(\"</span></label>\");}body_3.__dustBody=!0;return body_0};\r\n    }\r\n\r\n    const mergeOptions = function (opt1, opt2) {\r\n        if (opt1 === true) {\r\n            opt1 = {};\r\n            return $.extend(opt1, opt2);\r\n        }\r\n        return opt1;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const ctlPromises = [TC.Control.prototype.register.call(self, map)]\r\n            if (self.modes[TC.Consts.geom.POINT]) {\r\n                ctlPromises.push(map.addControl(\"featureInfo\", mergeOptions(self.modes[TC.Consts.geom.POINT],\r\n                    { displayMode: self.options.displayMode })).then(function (control) {\r\n                        self.fInfoCtrl = control;\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n                ctlPromises.push(map.addControl(\"lineFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYLINE],\r\n                    { displayMode: self.options.displayMode, lineColor: self.lineColor })).then(function (control) {\r\n                        self.lineFInfoCtrl = control;\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYGON]) {\r\n                ctlPromises.push(map.addControl(\"polygonFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYGON],\r\n                    { displayMode: self.options.displayMode, lineColor: self.lineColor })).then(function (control) {\r\n                        self.polygonFInfoCtrl = control;\r\n                        return control;\r\n                    }));\r\n            }\r\n            Promise.all(ctlPromises).then(function () {\r\n                if (self.fInfoCtrl) {\r\n                    self.fInfoCtrl.activate();\r\n                    self.lastCtrlActive = self.fInfoCtrl;\r\n                }\r\n                resolve(self);\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        self.lineColor = !self.options.lineColor ? \"#c00\" : self.options.lineColor;\r\n        var renderData = {};\r\n        if (self.modes[TC.Consts.geom.POINT]) {\r\n            renderData.pointSelectValue = TC.Consts.geom.POINT;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n            renderData.lineSelectValue = TC.Consts.geom.POLYLINE;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYGON]) {\r\n            renderData.polygonSelectValue = TC.Consts.geom.POLYGON;\r\n        }\r\n        return TC.Control.prototype.renderData.call(self, renderData,\r\n            function () {\r\n                var changeEvent = function () {\r\n                    switch (this.value) {\r\n                        case TC.Consts.geom.POLYLINE:\r\n                            //modo línea\r\n                            console.log(\"seleccion por línea\");\r\n                            if (self.map.activeControl === self.fInfoCtrl || self.map.activeControl === self.polygonFInfoCtrl)\r\n                                self.lineFInfoCtrl.activate();\r\n                            self.lastCtrlActive = self.lineFInfoCtrl;\r\n                            break;\r\n                        case TC.Consts.geom.POLYGON:\r\n                            //modo poligono\r\n                            console.log(\"seleccion por polígono\");\r\n                            if (self.map.activeControl === self.fInfoCtrl || self.map.activeControl === self.lineFInfoCtrl)\r\n                                self.polygonFInfoCtrl.activate();\r\n                            self.lastCtrlActive = self.polygonFInfoCtrl;\r\n                            break;\r\n                        default:\r\n                            //modo point\r\n                            console.log(\"seleccion por punto\");\r\n                            if (self.map.activeControl === self.polygonFInfoCtrl || self.map.activeControl === self.lineFInfoCtrl)\r\n                                self.fInfoCtrl.activate();\r\n                            self.lastCtrlActive = self.fInfoCtrl;\r\n                            break;\r\n                    }\r\n                };\r\n                self.div.querySelectorAll('input[type=radio]').forEach(function (input) {\r\n                    input.addEventListener('change', changeEvent);\r\n                });\r\n\r\n                if ($.isFunction(callback)) {\r\n                    callback();\r\n                }\r\n            });\r\n    };\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        if (self.lastCtrlActive)\r\n            self.lastCtrlActive.activate();\r\n    }\r\n    ctlProto.deactivate = function () {\r\n        var self = this;\r\n        self.lastCtrlActive.deactivate(false);\r\n    }\r\n\r\n\r\n    TC.Map.prototype.getDefaultControl = function () {\r\n        var candidate = this.getControlsByClass(\"TC.control.MultiFeatureInfo\");\r\n        if (candidate && candidate.length)\r\n            return candidate[0].lastCtrlActive;\r\n        else {\r\n            candidate = this.getControlsByClass(\"TC.control.FeatureInfo\");\r\n            if (candidate && candidate.length)\r\n                return candidate[0];\r\n            else\r\n                return null;\r\n        }\r\n    };\r\n\r\n})();"],"file":"../../control/MultiFeatureInfo.min.js"}