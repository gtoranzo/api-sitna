{"version":3,"sources":["control/MultiFeatureInfo.js"],"names":["TC","control","FeatureInfoCommons","syncLoadJS","apiLocation","MultiFeatureInfo","this","lineColor","Control","apply","arguments","modes","options","Consts","geom","POINT","POLYGON","fInfoCtrl","lineFInfoCtrl","polygonFInfoCtrl","lastCtrlActive","popup","exportsState","inherit","ctlProto","prototype","CLASS","isDebug","template","dust","register","body_0","chk","ctx","w","h","$key","x","get","block","body_1","body_2","body_3","__dustBody","f","mergeOptions","opt1","opt2","Util","extend","map","self","div","querySelectorAll","forEach","input","checked","Promise","resolve","reject","ctlPromises","call","push","addControl","displayMode","then","POLYLINE","on","event","LAYERADD","LAYERREMOVE","LAYERVISIBILITY","e","updateUI","CONTROLACTIVATE","CONTROLDEACTIVATE","all","activate","render","callback","renderData","pointSelectValue","lineSelectValue","polygonSelectValue","changeEvent","value","addEventListener","isFunction","deactivate","enabled","workLayers","some","l","type","layerType","WMS","getVisibility","disabled","querySelector","isActive","displayValue","style","display","removeProperty"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.FeatureInfoCommons) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/FeatureInfoCommons');\r\n}\r\n(function () {\r\n    TC.control.MultiFeatureInfo = function () {\r\n        var self = this;\r\n        self.lineColor = null;\r\n        TC.Control.apply(self, arguments);\r\n        self.modes = self.options.modes || {};\r\n        if (typeof self.modes[TC.Consts.geom.POINT] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POINT] = true;\r\n        }\r\n        if (typeof self.modes[TC.Consts.geom.POLYGON] === 'undefined') {\r\n            self.modes[TC.Consts.geom.POLYGON] = true;\r\n        }\r\n        self.fInfoCtrl = null;\r\n        self.lineFInfoCtrl = null;\r\n        self.polygonFInfoCtrl = null;\r\n        self.lastCtrlActive = null;\r\n        self.popup = null;\r\n        self.exportsState = false; // Los controles que exportan estado son los hijos\r\n    };\r\n\r\n    TC.inherit(TC.control.MultiFeatureInfo, TC.control.FeatureInfoCommons);\r\n\r\n    var ctlProto = TC.control.MultiFeatureInfo.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-m-finfo';\r\n\r\n    if (TC.isDebug) {\r\n        ctlProto.template = TC.apiLocation + \"TC/templates/MultiFeatureInfo.html\";\r\n    }\r\n    else {\r\n        ctlProto.template = function () { dust.register(ctlProto.CLASS,body_0);function body_0(chk,ctx){return chk.w(\"<div class=\\\"tc-ctl-m-finfo-select\\\"><form><span>\").h(\"i18n\",ctx,{},{\"$key\":\"selection\"}).w(\"</span>\").x(ctx.get([\"pointSelectValue\"], false),ctx,{\"block\":body_1},{}).x(ctx.get([\"lineSelectValue\"], false),ctx,{\"block\":body_2},{}).x(ctx.get([\"polygonSelectValue\"], false),ctx,{\"block\":body_3},{}).w(\"</form></div>\");}body_0.__dustBody=!0;function body_1(chk,ctx){return chk.w(\"<label class=\\\"tc-ctl-m-finfo-btn-point\\\" title=\\\"\").h(\"i18n\",ctx,{},{\"$key\":\"selectionByPoint\"}).w(\"\\\"><input type=\\\"radio\\\" name=\\\"selectmode\\\" value=\\\"\").f(ctx.get([\"pointSelectValue\"], false),ctx,\"h\").w(\"\\\" checked /><span class=\\\"tc-ctl-btn\\\">\").h(\"i18n\",ctx,{},{\"$key\":\"byPoint\"}).w(\"</span></label>\");}body_1.__dustBody=!0;function body_2(chk,ctx){return chk.w(\"<label class=\\\"tc-ctl-m-finfo-btn-line\\\" title=\\\"\").h(\"i18n\",ctx,{},{\"$key\":\"selectionByLine\"}).w(\"\\\"><input type=\\\"radio\\\" name=\\\"selectmode\\\" value=\\\"\").f(ctx.get([\"lineSelectValue\"], false),ctx,\"h\").w(\"\\\" /><span class=\\\"tc-ctl-btn\\\">\").h(\"i18n\",ctx,{},{\"$key\":\"byLine\"}).w(\"</span></label>\");}body_2.__dustBody=!0;function body_3(chk,ctx){return chk.w(\"<label class=\\\"tc-ctl-m-finfo-btn-polygon\\\" title=\\\"\").h(\"i18n\",ctx,{},{\"$key\":\"selectionByPrecinct\"}).w(\"\\\"><input type=\\\"radio\\\" name=\\\"selectmode\\\" value=\\\"\").f(ctx.get([\"polygonSelectValue\"], false),ctx,\"h\").w(\"\\\" /><span class=\\\"tc-ctl-btn\\\">\").h(\"i18n\",ctx,{},{\"$key\":\"byPrecinct\"}).w(\"</span></label>\");}body_3.__dustBody=!0;return body_0};\r\n    }\r\n\r\n    const mergeOptions = function (opt1, opt2) {\r\n        if (opt1 === true) {\r\n            opt1 = {};\r\n            return TC.Util.extend(opt1, opt2);\r\n        }\r\n        return opt1;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        self.div.querySelectorAll('input[type=radio]').forEach(function (input) {\r\n            input.checked = false;\r\n        });\r\n\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            const ctlPromises = [TC.Control.prototype.register.call(self, map)]\r\n            if (self.modes[TC.Consts.geom.POINT]) {\r\n                ctlPromises.push(map.addControl(\"featureInfo\", mergeOptions(self.modes[TC.Consts.geom.POINT],\r\n                    { displayMode: self.options.displayMode })).then(function (control) {\r\n                        self.fInfoCtrl = control;\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n                ctlPromises.push(map.addControl(\"lineFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYLINE],\r\n                    { displayMode: self.options.displayMode, lineColor: self.lineColor })).then(function (control) {\r\n                        self.lineFInfoCtrl = control;\r\n                        return control;\r\n                    }));\r\n            }\r\n            if (self.modes[TC.Consts.geom.POLYGON]) {\r\n                ctlPromises.push(map.addControl(\"polygonFeatureInfo\", mergeOptions(self.modes[TC.Consts.geom.POLYGON],\r\n                    { displayMode: self.options.displayMode, lineColor: self.lineColor })).then(function (control) {\r\n                        self.polygonFInfoCtrl = control;\r\n                        return control;\r\n                    }));\r\n            }\r\n\r\n            map.on(`${TC.Consts.event.LAYERADD} ${TC.Consts.event.LAYERREMOVE} ${TC.Consts.event.LAYERVISIBILITY}`, function (e) {\r\n                self.updateUI();\r\n            });\r\n\r\n            map.on(`${TC.Consts.event.CONTROLACTIVATE} ${TC.Consts.event.CONTROLDEACTIVATE}`, function (e) {\r\n                if (e.control === self.fInfoCtrl || e.control === self.lineFInfoCtrl || e.control === self.polygonFInfoCtrl) {\r\n                    self.updateUI();\r\n                }\r\n            });\r\n\r\n            Promise.all(ctlPromises).then(function () {\r\n                if (self.fInfoCtrl) {\r\n                    self.fInfoCtrl.activate();\r\n                    self.lastCtrlActive = self.fInfoCtrl;\r\n                }\r\n                self.updateUI();\r\n                resolve(self);\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        self.lineColor = !self.options.lineColor ? \"#c00\" : self.options.lineColor;\r\n        var renderData = {};\r\n        if (self.modes[TC.Consts.geom.POINT]) {\r\n            renderData.pointSelectValue = TC.Consts.geom.POINT;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYLINE]) {\r\n            renderData.lineSelectValue = TC.Consts.geom.POLYLINE;\r\n        }\r\n        if (self.modes[TC.Consts.geom.POLYGON]) {\r\n            renderData.polygonSelectValue = TC.Consts.geom.POLYGON;\r\n        }\r\n        return TC.Control.prototype.renderData.call(self, renderData,\r\n            function () {\r\n                var changeEvent = function () {\r\n                    switch (this.value) {\r\n                        case TC.Consts.geom.POLYLINE:\r\n                            //modo línea\r\n                            self.lineFInfoCtrl.activate();\r\n                            self.lastCtrlActive = self.lineFInfoCtrl;\r\n                            break;\r\n                        case TC.Consts.geom.POLYGON:\r\n                            //modo poligono\r\n                            self.polygonFInfoCtrl.activate();\r\n                            self.lastCtrlActive = self.polygonFInfoCtrl;\r\n                            break;\r\n                        default:\r\n                            //modo point\r\n                            self.fInfoCtrl.activate();\r\n                            self.lastCtrlActive = self.fInfoCtrl;\r\n                            break;\r\n                    }\r\n                };\r\n                self.div.querySelectorAll('input[type=radio]').forEach(function (input) {\r\n                    input.addEventListener('change', changeEvent);\r\n                });\r\n\r\n                if (TC.Util.isFunction(callback)) {\r\n                    callback();\r\n                }\r\n            });\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        if (self.lastCtrlActive)\r\n            self.lastCtrlActive.activate();\r\n    };\r\n\r\n    ctlProto.deactivate = function () {\r\n        var self = this;\r\n        self.lastCtrlActive.deactivate(false);\r\n    };\r\n\r\n    ctlProto.updateUI = function () {\r\n        const self = this;\r\n        if (self.map) {\r\n            const enabled = self.map.workLayers.some(l => l.type === TC.Consts.layerType.WMS && l.getVisibility());\r\n            self.div.querySelectorAll('input').forEach(function (input) {\r\n                input.disabled = !enabled;\r\n            });\r\n            if (self.fInfoCtrl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POINT}]`);\r\n                if (input) {\r\n                    input.checked = self.fInfoCtrl.isActive;\r\n                }\r\n            }\r\n            if (self.lineFInfoCtrl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POLYLINE}]`);\r\n                if (input) {\r\n                    input.checked = self.lineFInfoCtrl.isActive;\r\n                }\r\n            }\r\n            if (self.polygonFInfoCtrl) {\r\n                const input = self.div.querySelector(`input[value=${TC.Consts.geom.POLYGON}]`);\r\n                if (input) {\r\n                    input.checked = self.polygonFInfoCtrl.isActive;\r\n                }\r\n            }\r\n            // Hack para compensar bug de Edge: no se actualiza el estilo al cambiar el estado del radio.\r\n            const displayValue = self.div.style.display;\r\n            self.div.style.display = 'none';\r\n            if (displayValue) {\r\n                self.div.style.display = displayValue;\r\n            }\r\n            else {\r\n                self.div.style.removeProperty('display');\r\n            }\r\n        }\r\n    };\r\n\r\n})();"]}