{"version":3,"sources":["control/FullScreen.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","FullScreen","apply","this","arguments","inherit","ctlProto","prototype","CLASS","template","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","webkit","moz","ms","document","window","vendor","Object","keys","fscreen","inFullscreen","element","requestFullscreenFunction","bind","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror","map","self","result","call","then","btn","div","querySelector","classList","toggle","Consts","classes","ACTIVE","setAttribute","getLocaleString","disable"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.FullScreen = function () {\r\n    var self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n};\r\n\r\nTC.inherit(TC.control.FullScreen, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.FullScreen.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-fscreen';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/FullScreen.html\";\r\n\r\n    const key = {\r\n        fullscreenEnabled: 0,\r\n        fullscreenElement: 1,\r\n        requestFullscreen: 2,\r\n        exitFullscreen: 3,\r\n        fullscreenchange: 4,\r\n        fullscreenerror: 5,\r\n    };\r\n\r\n    const webkit = [\r\n        'webkitFullscreenEnabled',\r\n        'webkitFullscreenElement',\r\n        'webkitRequestFullscreen',\r\n        'webkitExitFullscreen',\r\n        'webkitfullscreenchange',\r\n        'webkitfullscreenerror',\r\n    ];\r\n\r\n    const moz = [\r\n        'mozFullScreenEnabled',\r\n        'mozFullScreenElement',\r\n        'mozRequestFullScreen',\r\n        'mozCancelFullScreen',\r\n        'mozfullscreenchange',\r\n        'mozfullscreenerror',\r\n    ];\r\n\r\n    const ms = [\r\n        'msFullscreenEnabled',\r\n        'msFullscreenElement',\r\n        'msRequestFullscreen',\r\n        'msExitFullscreen',\r\n        'MSFullscreenChange',\r\n        'MSFullscreenError',\r\n    ];\r\n\r\n    const document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\r\n\r\n    const vendor = (\r\n        ('fullscreenEnabled' in document && Object.keys(key)) ||\r\n        (webkit[0] in document && webkit) ||\r\n        (moz[0] in document && moz) ||\r\n        (ms[0] in document && ms) ||\r\n        []\r\n    );\r\n\r\n    ctlProto.fscreen = {\r\n        inFullscreen: false,\r\n        requestFullscreen: element => element[vendor[key.requestFullscreen]](),\r\n        requestFullscreenFunction: element => element[vendor[key.requestFullscreen]],\r\n        get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\r\n        addEventListener: (type, handler, options) => document.addEventListener(vendor[key[type]], handler, options),\r\n        removeEventListener: (type, handler, options) => document.removeEventListener(vendor[key[type]], handler, options),\r\n        get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\r\n        set fullscreenEnabled(val) { },\r\n        get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\r\n        set fullscreenElement(val) { },\r\n        get onfullscreenchange() { return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()]; },\r\n        set onfullscreenchange(handler) { return document[(\"on\" + vendor[key.fullscreenchange]).toLowerCase()] = handler; },\r\n        get onfullscreenerror() { return document[\"on\" + vendor[key.fullscreenerror].toLowerCase()]; },\r\n        set onfullscreenerror(handler) { return document[\"on\" + vendor[key.fullscreenerror].toLowerCase()] = handler; }\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        result.then(function () {\r\n            const btn = self.div.querySelector('.' + self.CLASS + '-btn');\r\n            \r\n            if (self.fscreen.fullscreenEnabled) {                \r\n                self.fscreen.addEventListener('fullscreenchange', function () {\r\n                    self.fscreen.inFullscreen = self.fscreen.fullscreenElement !== null;\r\n                    btn.classList.toggle(TC.Consts.classes.ACTIVE, self.fscreen.inFullscreen);\r\n                    btn.setAttribute('title', self.fscreen.inFullscreen ? self.getLocaleString(\"fscreen.tip.return\") : self.getLocaleString(\"fscreen.tip\"));\r\n                }, false);\r\n\r\n                btn.addEventListener('click', function () {\r\n                    if (!self.fscreen.inFullscreen) {\r\n                        self.fscreen.requestFullscreen(self.map.div);\r\n                    } else {\r\n                        self.fscreen.exitFullscreen();\r\n                    }\r\n                }, false);\r\n\r\n            } else {\r\n                // GLS: 19/02/2019 en lugar de ocultar el botón, deshabilitamos el control para que no quede espacio de más entre los botones\r\n                self.disable();\r\n            }            \r\n        });\r\n\r\n        return result;\r\n    };    \r\n\r\n})();\r\n"]}