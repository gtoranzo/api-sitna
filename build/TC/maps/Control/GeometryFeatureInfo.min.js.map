{"version":3,"sources":["control/GeometryFeatureInfo.js"],"names":["TC","control","FeatureInfoCommons","syncLoadJS","apiLocation","filter","GeometryFeatureInfo","apply","this","arguments","wrap","lineColor","options","_isDrawing","_isSearching","_drawToken","inherit","ctlProto","prototype","register","map","self","result","call","on","Consts","event","CONTROLDEACTIVATE","e","cancelDraw","callback","coords","xy","closeResults","visibleLayers","i","workLayers","length","layer","type","layerType","WMS","getVisibility","names","beginDraw","geometryType","filterLayer","feature","getFeaturesByGeometry","responseCallback","filterFeature","services","service","hasLimits","layers","j","features","splice","renderData","insertLinks","displayResults","resultsLayer","clearFeatures"],"mappings":"AAACA,GAAGC,QAAUD,GAAGC,YAEZD,GAAGC,QAAQC,oBACZF,GAAGG,WAAWH,GAAGI,YAAc,iCAE9BJ,GAAGK,QACJL,GAAGG,WAAWH,GAAGI,YAAc,cAGnC,WACIJ,GAAGC,QAAQK,oBAAsB,WAE7BN,GAAGC,QAAQC,mBAAmBK,MAAMC,KAAMC,WAD/BD,KAENE,KAAO,IAAIV,GAAGU,KAAKT,QAAQK,oBAFrBE,MAAAA,KAGNG,UAHMH,KAGYI,QAAQD,UAHpBH,KAG8CI,QAAQD,UAAtB,OAHhCH,KAINK,YAAa,EAJPL,KAKNM,cAAe,EALTN,KAMNO,YAAa,GAGtBf,GAAGgB,QAAQhB,GAAGC,QAAQK,oBAAqBN,GAAGC,QAAQC,oBAEtD,IAAIe,EAAWjB,GAAGC,QAAQK,oBAAoBY,UAE9CD,EAASE,SAAW,SAAUC,GAC1B,MAAMC,EAAOb,KACPc,EAAStB,GAAGC,QAAQC,mBAAmBgB,UAAUC,SAASI,KAAKF,EAAMD,GAE3EC,EAAKG,GAAGxB,GAAGyB,OAAOC,MAAMC,kBAAmB,SAAUC,GACjDP,EAAKX,KAAKmB,eAGd,OAAOP,GAGXL,EAASa,SAAW,SAAUC,EAAQC,GAClC,IAAIX,EAAOb,KACX,IAAIa,EAAKN,WAAT,CAGAM,EAAKY,eAGL,IADA,IAAIC,GAAgB,EACXC,EAAI,EAAGA,EAAId,EAAKD,IAAIgB,WAAWC,OAAQF,IAAK,CACjD,IAAIG,EAAQjB,EAAKD,IAAIgB,WAAWD,GAChC,GAAIG,EAAMC,OAASvC,GAAGyB,OAAOe,UAAUC,KAC/BH,EAAMI,iBAAmBJ,EAAMK,MAAMN,OAAS,EAAG,CACjDH,GAAgB,EAChB,OAIZ,GAAIA,EAAe,CACfb,EAAKY,eACLZ,EAAKX,KAAKkC,WACNC,aAAcxB,EAAKwB,aACnBb,GAAID,EACJO,MAAOjB,EAAKyB,YACZhB,SAAU,SAAUiB,GAChB1B,EAAKX,KAAKsC,sBAAsBD,SAMhD9B,EAASgC,iBAAmB,SAAUrC,GAClC,IAAIS,EAAOb,KAEXR,GAAGC,QAAQC,mBAAmBgB,UAAU+B,iBAAiB1B,KAAKF,EAAMT,GAEpE,GAAIS,EAAK6B,cAAe,CAIpB,IAHA,IAAIC,EAAWvC,EAAQuC,SAGdhB,EAAI,EAAGA,EAAIgB,EAASd,OAAQF,IAAK,CACtC,IAAIiB,EAAUD,EAAShB,GACvB,GAAIiB,EAAQC,UAAW,QACZD,EAAQE,OACfF,EAAQC,UAAYD,EAAQC,cAE3B,CACD,IAAK,IAAIE,EAAI,EAAGA,EAAIH,EAAQE,OAAOjB,OAAQkB,IACvC,IAAKH,EAAQE,OAAOC,GAAGC,SAASnB,OAAQ,CACpCe,EAAQE,OAAOG,OAAOF,EAAG,GACzBA,GAAQ,EAGhB,IAAKH,EAAQE,OAAOjB,OAAQ,CACxBc,EAASM,OAAOtB,EAAG,GACnBA,GAAQ,IAKhBgB,EAASd,OACThB,EAAKqC,WAAW9C,EAAS,WACrBS,EAAKsC,cACLtC,EAAKuC,mBAITvC,EAAKwC,aAAaC,kBA5FlC","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.FeatureInfoCommons) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/FeatureInfoCommons');\r\n}\r\nif (!TC.filter) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Filter');\r\n}\r\n\r\n(function () {\r\n    TC.control.GeometryFeatureInfo = function () {\r\n        var self = this;\r\n        TC.control.FeatureInfoCommons.apply(this, arguments);\r\n        self.wrap = new TC.wrap.control.GeometryFeatureInfo(self);\r\n        self.lineColor = !self.options.lineColor ? \"#c00\" : self.options.lineColor;\r\n        self._isDrawing = false;\r\n        self._isSearching = false;\r\n        self._drawToken = false;\r\n    };\r\n\r\n    TC.inherit(TC.control.GeometryFeatureInfo, TC.control.FeatureInfoCommons);\r\n\r\n    var ctlProto = TC.control.GeometryFeatureInfo.prototype;\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.control.FeatureInfoCommons.prototype.register.call(self, map);\r\n\r\n        self.on(TC.Consts.event.CONTROLDEACTIVATE, function (e) {\r\n            self.wrap.cancelDraw();\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.callback = function (coords, xy) {\r\n        var self = this;\r\n        if (self._drawToken) {\r\n            return;\r\n        }\r\n        self.closeResults();\r\n        //self.filterLayer.clearFeatures();\r\n        var visibleLayers = false;\r\n        for (var i = 0; i < self.map.workLayers.length; i++) {\r\n            var layer = self.map.workLayers[i];\r\n            if (layer.type === TC.Consts.layerType.WMS) {\r\n                if (layer.getVisibility() && layer.names.length > 0) {\r\n                    visibleLayers = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (visibleLayers) {\r\n            self.closeResults();\r\n            self.wrap.beginDraw({\r\n                geometryType: self.geometryType,\r\n                xy: coords,\r\n                layer: self.filterLayer,\r\n                callback: function (feature) {\r\n                    self.wrap.getFeaturesByGeometry(feature);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    ctlProto.responseCallback = function (options) {\r\n        var self = this;\r\n\r\n        TC.control.FeatureInfoCommons.prototype.responseCallback.call(self, options);\r\n\r\n        if (self.filterFeature) {\r\n            var services = options.services;\r\n\r\n            // Eliminamos capas sin resultados a no ser que tenga un error\r\n            for (var i = 0; i < services.length; i++) {\r\n                var service = services[i];\r\n                if (service.hasLimits) {\r\n                    delete service.layers;\r\n                    service.hasLimits = service.hasLimits;\r\n                }\r\n                else {\r\n                    for (var j = 0; j < service.layers.length; j++) {\r\n                        if (!service.layers[j].features.length) {\r\n                            service.layers.splice(j, 1);\r\n                            j = j - 1;\r\n                        }\r\n                    }\r\n                    if (!service.layers.length) {\r\n                        services.splice(i, 1);\r\n                        i = i - 1;\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (services.length) {\r\n                self.renderData(options, function () {\r\n                    self.insertLinks();\r\n                    self.displayResults();\r\n                });\r\n            }\r\n            else {\r\n                self.resultsLayer.clearFeatures();\r\n            }\r\n        }\r\n    };\r\n\r\n})();"],"file":"../../control/GeometryFeatureInfo.min.js"}