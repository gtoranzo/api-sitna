{"version":3,"sources":["control/LoadingIndicator.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","LoadingIndicator","self","this","apply","arguments","_waits","window","addEventListener","reset","inherit","ctlProto","prototype","CLASS","template","dust","register","body_0","chk","ctx","w","__dustBody","startWait","e","layerId","layer","id","undefined","show","map","trigger","Consts","event","STARTLOADING","stopWait","wait","count","key","hide","STOPLOADING","endWait","result","call","on","BEFORELAYERADD","BEFORELAYERUPDATE","BEFOREFEATURESADD","LAYERADD","LAYERERROR","LAYERUPDATE","FEATURESADD","BEFOREFEATUREINFO","addWait","FEATUREINFO","NOFEATUREINFO","FEATUREINFOERROR","removeWait","LAYERREMOVE","isDebug","msg","url","line","col","error","uid","getUID"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.LoadingIndicator = function () {\r\n    const self = this;\r\n\r\n    TC.Control.apply(self, arguments);\r\n\r\n    self._waits = {};\r\n\r\n    window.addEventListener('error', function () {\r\n        self.reset();\r\n        // Tell browser to run its own error handler as well\r\n        return false;\r\n    }, false);\r\n};\r\n\r\nTC.inherit(TC.control.LoadingIndicator, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.LoadingIndicator.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-load';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/LoadingIndicator.html\";\r\n\r\n    //var ctlProto.waits = {};\r\n    \r\n    ctlProto.startWait = function (e) {\r\n        const self = this;\r\n        const layerId = e.layer.id;\r\n        if (self._waits[layerId] === undefined) {\r\n            self._waits[layerId] = 0;\r\n        }\r\n        self._waits[layerId] = self._waits[layerId] + 1;\r\n        self.show();\r\n\r\n        self.map.trigger(TC.Consts.event.STARTLOADING);\r\n    };\r\n\r\n    ctlProto.stopWait = function (e) {\r\n        const self = this;\r\n        const layerId = e.layer.id;\r\n        var wait = self._waits[layerId];\r\n        if (wait > 0) {\r\n            wait = self._waits[layerId] = wait - 1;\r\n        }\r\n        if (!wait) {\r\n            delete self._waits[layerId];\r\n        }\r\n        var count = 0;\r\n        for (var key in self._waits) {\r\n            count++;\r\n        }\r\n        if (!count) {\r\n            self.hide();\r\n            self.map.trigger(TC.Consts.event.STOPLOADING);\r\n        }\r\n    };\r\n\r\n    ctlProto.endWait = function (e) {\r\n        const self = this;\r\n        const layerId = e.layer.id;\r\n        var wait = self._waits[layerId];\r\n        if (wait > 0) {\r\n            delete self._waits[layerId];\r\n        }\r\n        var count = 0;\r\n        for (var key in self._waits) {\r\n            count++;\r\n        }\r\n        if (!count) {\r\n            self.hide();\r\n            self.map.trigger(TC.Consts.event.STOPLOADING);\r\n        }\r\n    };\r\n\r\n    ctlProto.reset = function (e) {\r\n        var self = this;\r\n        self._waits = {};\r\n        self.hide();\r\n        self.map.trigger(TC.Consts.event.STOPLOADING);\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n        map\r\n            .on(TC.Consts.event.BEFORELAYERADD + ' ' +\r\n                TC.Consts.event.BEFORELAYERUPDATE + ' ' +\r\n                TC.Consts.event.BEFOREFEATURESADD, function (e) {\r\n                    self.startWait(e);\r\n                })\r\n            .on(TC.Consts.event.LAYERADD + ' ' +\r\n                TC.Consts.event.LAYERERROR + ' ' +\r\n                TC.Consts.event.LAYERUPDATE + ' ' +\r\n                TC.Consts.event.FEATURESADD, function (e) {\r\n                    self.stopWait(e);\r\n                })\r\n            .on(TC.Consts.event.BEFOREFEATUREINFO, function () {\r\n                self.addWait(TC.Consts.event.FEATUREINFO);\r\n            })\r\n            .on(TC.Consts.event.FEATUREINFO + ' ' +\r\n                TC.Consts.event.NOFEATUREINFO + ' ' +\r\n                TC.Consts.event.FEATUREINFOERROR, function () {\r\n                    self.removeWait(TC.Consts.event.FEATUREINFO);\r\n                })\r\n            .on(TC.Consts.event.LAYERREMOVE, function (e) {\r\n                self.endWait(e);\r\n            });\r\n        if (!TC.isDebug) {\r\n            //Para evitar que se quede el indicador indefinidamente activo cuando hay un error en la p√°gina\r\n            window.addEventListener('error', function (msg, url, line, col, error) {\r\n                self.reset();\r\n                return false;\r\n            });\r\n\r\n            //$(document).ajaxError(function (event, request, settings) {\r\n            //    self.reset();\r\n            //});\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.addWait = function (uid) {\r\n        const self = this;\r\n        const result = uid || TC.getUID();\r\n        self.startWait({ layer: { id: result } });\r\n        return result;\r\n    };\r\n\r\n    ctlProto.removeWait = function (uid) {\r\n        this.stopWait({ layer: { id: uid } });\r\n    };\r\n\r\n})();\r\n"]}