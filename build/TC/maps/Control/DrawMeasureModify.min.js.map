{"version":3,"sources":["control/DrawMeasureModify.js"],"names":["TC","control","Measure","syncLoadJS","apiLocation","DrawMeasureModify","self","this","apply","arguments","_dialogDiv","Util","getDiv","options","dialogDiv","_$dialogDiv","$","document","body","appendChild","cs","_classSelector","CLASS","_selectors","ELEVATION_CHECKBOX","persistentDrawControls","renderPromise","then","_1stCoordText","div","querySelector","_2ndCoordText","_1stCoordValue","_2ndCoordValue","_elevationText","_elevationValue","displayElevation","elevationProfileActive","loadJS","tool","Elevation","elevationOptions","elevation","inherit","ctlProto","prototype","_dataKeys","Consts","event","RESULTSPANELCLOSE","FEATURESSELECT","elevationProfileCache","getElevationProfileFromCache","feature","filter","elm","removeElevationProfileFromCache","featIdx","reduce","prev","cur","idx","splice","template","isDebug","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","s","get","block","body_1","f","x","body_2","render","callback","promise","_set1stRenderPromise","call","_clearBtn","addEventListener","CLICK","e","confirm","getLocaleString","clear","_downloadBtn","showSketchDownloadDialog","_elevProfileBtn","deactivateElevationProfile","activateElevationProfile","style","display","isFunction","renderOptions","checkboxId","getUID","getRenderedHtml","html","endExport","format","closeModal","exportOptions","fileName","toLowerCase","replace","getFormattedDate","Date","toString","includeElevation","checked","interpolateCoords","value","li","map","getLoadingIndicator","waitId","addWait","elevOptions","crs","features","layer","feat","getGeometryStride","Point","clone","maxCoordQuantity","sampleNumber","resolution","parseFloat","setGeometry","forEach","exportFeatures","catch","error","errors","MAX_COORD_QUANTITY_EXCEEDED","alert","finally","removeWait","getCoordsArray","coord","length","setCoords","geometry","innerHTML","EventTarget","listenerBySelector","ipMessage","target","classList","add","classes","HIDDEN","remove","dataset","GPX","some","Polygon","Promise","resolve","reject","drawPointsId","modifyId","all","layerPromise","objects","title","_modifyPromise","addControl","id","modify","on","resultsPanelChart","currentFeature","setCurrentFeature","showMeasures","getFeatureMeasureData","_originalStyle","getStyle","displayMode","geom","POLYGON","drawPolygons","setStrokeColorWatch","strokeColor","setStrokeWidthWatch","strokeWidth","Polyline","POLYLINE","drawLines","profile","renderElevationChart","data","POINT","drawPoints","setFontColorWatch","fontColor","setFontSizeWatch","fontSize","FEATURESUNSELECT","getSelectedFeatures","resetDrawWatches","resetElevationProfile","close","FEATUREMODIFY","setMeasures","measureData","setFeatureMeasureData","getControlsByClass","pu","isVisible","hide","CONTROLDEACTIVATE","FEATURECLICK","activeControl","Draw","Modify","indexOf","ctl","isMinimized","maximize","displayElevationProfile","_drawLinesPromise","DRAWSTART","resetValues","DRAWUNDO","DRAWREDO","history","slice","historyIndex","DRAWEND","coords","lastCoord","point","push","STYLECHANGE","onStyleChange","_drawPolygonsPromise","_drawPointsPromise","mode","persistent","styleTools","containerControl","drawControls","updateChanges","units","wrap","isGeo","DRAWCANCEL","setTimeout","cancel","exportsState","setMode","FEATUREADD","displayLabelText","label","disabled","FEATUREREMOVE","FEATURESCLEAR","_activeMode","COLLAPSED","activate","firstCoordText","secondCoordText","elevationText","textContent","trim","CRS","substr","setData","_len","NOMEASURE","_area","_peri","result","measureOptions","Cfg","utmCrs","area","getArea","perimeter","getLength","locale","precision","coord1","coord2","METER_PRECISION","DEGREE_PRECISION","factor","Math","pow","round","val","formatNumber","toFixed","clearFeatures","isActive","deactivate","dialog","hasPoints","MultiPoint","hasLines","MultiPolyline","hasPolygons","MultiPolygon","ipDiv","gpxButton","showModal","featureCtor","styleOptions","property","setStyle","getElevation","coordinates","elevCoords","distance","maxElevation","Number","NEGATIVE_INFINITY","minElevation","POSITIVE_INFINITY","arr","dx","dy","sqrt","ele","max","min","elevationProfileData","elevationGainOptions","hillDeltaThreshold","extend","getElevationGain","matchingFeature","line","i","len","lineCoord","cacheElevationProfile","createChartPanel","resultsPanelOptions","content","titles","main","chart","onmouseout","removeElevationTooltip","tooltip","getElevationTooltip","addControlPromise","addResultsPanelChart","controlContainer","side","SIDE","RIGHT","displayOn","toUpperCase","substring","createElement","caller","_decorateChartPanel","that","toggleSelectedStyle","profileData","openChart","show","d","showElevationMarker","getElevationChartTooltip","hideElevationMarker","ACTIVE","setAttribute","profileDrawn","getActiveFeatures","upHill","downHill"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.Measure) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/Measure');\r\n}\r\n\r\nTC.control.DrawMeasureModify = function () {\r\n    var self = this;\r\n\r\n    TC.control.Measure.apply(self, arguments);\r\n\r\n    self._dialogDiv = TC.Util.getDiv(self.options.dialogDiv);\r\n    self._$dialogDiv = $(self._dialogDiv);\r\n    if (!self.options.dialogDiv) {\r\n        document.body.appendChild(self._dialogDiv);\r\n    }\r\n\r\n    const cs = self._classSelector = '.' + self.CLASS;\r\n    self._selectors = {\r\n        ELEVATION_CHECKBOX: cs + '-dialog-elev input[type=checkbox]'\r\n    };\r\n\r\n    self.persistentDrawControls = true;\r\n\r\n    self.renderPromise().then(function () {\r\n        self._1stCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-1-t');\r\n        self._2ndCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-2-t');\r\n        self._1stCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-1-v');\r\n        self._2ndCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-2-v');\r\n        self._elevationText = self.div.querySelector('.tc-ctl-meas-val-coord-ele-t');\r\n        self._elevationValue = self.div.querySelector('.tc-ctl-meas-val-coord-ele-v');\r\n    });\r\n\r\n    if (self.options.displayElevation) {        \r\n        self.elevationProfileActive = true;\r\n        TC.loadJS(\r\n            !TC.tool || !TC.tool.Elevation,\r\n            TC.apiLocation + 'TC/tool/Elevation',\r\n            function () {\r\n                const elevationOptions = typeof self.options.displayElevation === 'boolean' ? {} : self.options.displayElevation;\r\n                self.elevation = new TC.tool.Elevation(elevationOptions);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nTC.inherit(TC.control.DrawMeasureModify, TC.control.Measure);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.DrawMeasureModify.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-dmm';\r\n\r\n    var _dataKeys = {\r\n        VALUE: 'tcValue'\r\n    };\r\n\r\n\r\n    TC.Consts.event.RESULTSPANELCLOSE = TC.Consts.event.RESULTSPANELCLOSE || 'resultspanelclose.tc';\r\n    TC.Consts.event.FEATURESSELECT = TC.Consts.event.FEATURESSELECT || \"featuresselect.tc\";\r\n\r\n    const elevationProfileCache = [];\r\n\r\n    const getElevationProfileFromCache = function (feature) {\r\n        return elevationProfileCache.filter(function (elm) {\r\n            return elm.feature === feature;\r\n        })[0];\r\n    };\r\n\r\n    const cacheElevationProfile = function (feature, data) {\r\n        var result = getElevationProfileFromCache(feature);\r\n        if (!result) {\r\n            result = {\r\n                feature: feature\r\n            };\r\n            elevationProfileCache.push(result);\r\n        }\r\n        result.data = data;\r\n        return result;\r\n    };\r\n\r\n    const removeElevationProfileFromCache = function (feature) {\r\n        const featIdx = elevationProfileCache.reduce(function (prev, cur, idx) {\r\n            if (cur.feature === feature) {\r\n                return idx;\r\n            }\r\n            return prev;\r\n        }, -1);\r\n        if (featIdx >= 0) {\r\n            elevationProfileCache.splice(featIdx, 1);\r\n        }\r\n    };\r\n\r\n    const clearElevationProfileCache = function () {\r\n        elevationProfileCache.length = 0;\r\n    };\r\n\r\n    ctlProto.template = {};\r\n    if (TC.isDebug) {\r\n        ctlProto.template[ctlProto.CLASS] = TC.apiLocation + \"TC/templates/DrawMeasureModify.html\";\r\n        ctlProto.template[ctlProto.CLASS + '-dialog'] = TC.apiLocation + \"TC/templates/DrawMeasureModifyDialog.html\";\r\n    }\r\n    else {\r\n        ctlProto.template[ctlProto.CLASS] = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<h2>\").h(\"i18n\", ctx, {}, { \"$key\": \"drawAndMeasure\" }).w(\"</h2><div class=\\\"tc-ctl-meas-select\\\"><form><label class=\\\"tc-ctl-meas-btn-pt\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"point\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"points\" }).w(\"</span></label><label class=\\\"tc-ctl-meas-btn-len\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"polyline\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"lines\" }).w(\"</span></label><label class=\\\"tc-ctl-meas-btn-area\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"polygon\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"polygons\" }).w(\"</span></label></form></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-pt tc-hidden\\\"><div class=\\\"tc-ctl-meas-point\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"search.list.coordinates\" }).w(\" <span class=\\\"tc-ctl-meas-val-coord\\\"><span class=\\\"tc-ctl-meas-val-coord-1-t\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-1-v\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-2-t\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-2-v\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-ele-t\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-ele-v\\\"></span></span></div></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-len tc-hidden\\\"><div class=\\\"tc-ctl-meas-line\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"2dLength\" }).w(\": <span class=\\\"tc-ctl-meas-val-len\\\"></span><button class=\\\"tc-ctl-meas-prof-btn tc-active\\\" title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"deactivateElevationProfile\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"geo.trk.chart.chpe\" }).w(\"</button></div></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-area tc-hidden\\\"><div class=\\\"tc-ctl-meas-polygon\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"area\" }).w(\": <span class=\\\"tc-ctl-meas-val-area\\\"></span>, \").h(\"i18n\", ctx, {}, { \"$key\": \"2dPerimeter\" }).w(\": <span class=\\\"tc-ctl-meas-val-peri\\\"></span></div></div><div class=\\\"tc-ctl-dmm-tool\\\"><div class=\\\"tc-ctl-dmm-mod\\\"></div><div class=\\\"tc-ctl-dmm-cmd\\\"><button class=\\\"tc-ctl-dmm-btn-clr\\\" disabled title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"deleteAll\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"deleteAll\" }).w(\"</button><button class=\\\"tc-ctl-dmm-btn-dl\\\" disabled title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"download\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"download\" }).w(\"...</button></div></div>\"); } body_0.__dustBody = !0; return body_0 };\r\n        ctlProto.template[ctlProto.CLASS + '-dialog'] = function () { dust.register(ctlProto.CLASS + '-dialog', body_0); function body_0(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-dmm-dialog tc-modal\\\"><div class=\\\"tc-modal-background tc-modal-close\\\"></div><div class=\\\"tc-modal-window\\\"><div class=\\\"tc-modal-header\\\"><h3>\").h(\"i18n\", ctx, {}, { \"$key\": \"downloadSketch\" }).w(\"</h3><div class=\\\"tc-modal-close\\\"></div></div><div class=\\\"tc-modal-body\\\">\").s(ctx.get([\"elevation\"], false), ctx, { \"block\": body_1 }, {}).w(\"<div class=\\\"tc-ctl-dmm-dialog-dl\\\"><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-kml\\\" data-format=\\\"KML\\\" title=\\\"KML\\\">KML</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-gml\\\" data-format=\\\"GML\\\" title=\\\"GML\\\">GML</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-geojson\\\" data-format=\\\"GeoJSON\\\" title=\\\"GeoJSON\\\">GeoJSON</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-wkt\\\" data-format=\\\"WKT\\\" title=\\\"WKT\\\">WKT</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-gpx\\\" data-format=\\\"GPX\\\" title=\\\"GPX\\\">GPX</button></div></div></div></div>\"); } body_0.__dustBody = !0; function body_1(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-dmm-dialog-elev\\\"><input id=\\\"\").f(ctx.get([\"checkboxId\"], false), ctx, \"h\").w(\"\\\" type=\\\"checkbox\\\" checked /><label for=\\\"\").f(ctx.get([\"checkboxId\"], false), ctx, \"h\").w(\"\\\" class=\\\"tc-ctl-ftools-dialog-elev-label\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"includeElevations\" }).w(\"</label></div>\").x(ctx.get([\"resolution\"], false), ctx, { \"block\": body_2 }, {}); } body_1.__dustBody = !0; function body_2(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-dmm-dialog-ip\\\"><h4>\").h(\"i18n\", ctx, {}, { \"$key\": \"interpolateCoordsFromElevProfile\" }).w(\"</h4><label><input type=\\\"radio\\\" name=\\\"ip-coords\\\" value=\\\"0\\\" checked /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"no\" }).w(\"</span></label><label><input type=\\\"radio\\\" name=\\\"ip-coords\\\" value=\\\"1\\\"/><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"yes\" }).w(\"</span></label><div class=\\\"tc-ctl-dmm-dialog-ip-m tc-hidden\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"interpolateEveryXMeters.1\" }).w(\"<input type=\\\"number\\\" min=\\\"1\\\" step=\\\"1\\\" class=\\\"tc-textbox\\\" value=\\\"\").f(ctx.get([\"resolution\"], false), ctx, \"h\").w(\"\\\" />\").h(\"i18n\", ctx, {}, { \"$key\": \"interpolateEveryXMeters.2\" }).w(\"</div></div>\"); } body_2.__dustBody = !0; return body_0 };\r\n    }\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        const promise = self._set1stRenderPromise(TC.control.Measure.prototype.render.call(self, function () {\r\n            self._clearBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-clr');\r\n            self._clearBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                TC.confirm(self.getLocaleString('deleteAll.confirm'), function () {\r\n                    self.clear();\r\n                });\r\n            });\r\n            self._downloadBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-dl');\r\n            self._downloadBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.showSketchDownloadDialog();\r\n            });\r\n\r\n            self._elevProfileBtn = self.div.querySelector('.tc-ctl-meas-prof-btn');\r\n            self._elevProfileBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.elevationProfileActive ? self.deactivateElevationProfile() : self.activateElevationProfile();\r\n            });\r\n\r\n            if (!self.options.displayElevation) {\r\n                self._elevProfileBtn.style.display = 'none';\r\n            }\r\n\r\n            if ($.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n\r\n        const renderOptions = {\r\n            checkboxId: self.getUID(),\r\n            elevation: self.options.displayElevation\r\n        };\r\n        self.getRenderedHtml(self.CLASS + '-dialog', renderOptions, function (html) {\r\n            const endExport = function (format) {\r\n                TC.Util.closeModal();\r\n                const exportOptions = {\r\n                    fileName: self.getLocaleString('sketch').toLowerCase().replace(' ', '_') + '_' + TC.Util.getFormattedDate(new Date().toString(), true),\r\n                    format: format\r\n                };\r\n                const includeElevation = self._dialogDiv.querySelector(self._selectors.ELEVATION_CHECKBOX).checked;\r\n                if (includeElevation) {\r\n                    const interpolateCoords = self._dialogDiv.querySelector('input[type=radio][name=ip-coords]:checked').value === \"1\";\r\n                    const li = self.map.getLoadingIndicator();\r\n                    const waitId = li && li.addWait();\r\n\r\n                    const elevOptions = {\r\n                        crs: self.map.crs,\r\n                        features: self.layer.features.map(function (feat) {\r\n                            // Solo mantenemos las features de las que hay que obtener elevación:\r\n                            // - Las que no tienen elevación\r\n                            // - Cuando hay interpolación, todas las líneas y los polígonos\r\n                            if (feat.getGeometryStride() >= 3) {\r\n                                if (!interpolateCoords || (TC.feature.Point && feat instanceof TC.feature.Point)) {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                            return feat.clone();\r\n                        }),\r\n                        maxCoordQuantity: self.options.displayElevation.maxCoordQuantity,\r\n                        sampleNumber: 0 // No queremos determinar el número de muestras\r\n                    };\r\n                    if (interpolateCoords) {\r\n                        elevOptions.resolution = parseFloat(self._dialogDiv.querySelector('.' + self.CLASS + '-dialog-ip-m input[type=number]').value) || self.options.displayElevation.resolution;\r\n                    }\r\n                    self.elevation.setGeometry(elevOptions)\r\n                        .then(function (features) {\r\n                            // Volvemos a añadir las features de las que no hemos pedido elevación\r\n                            features.forEach(function (feat, idx) {\r\n                                if (!feat) {\r\n                                    features[idx] = self.layer.features[idx];\r\n                                }\r\n                            });\r\n                            self.map.exportFeatures(features, exportOptions);\r\n                        })\r\n                        .catch(function (error) {\r\n                            if (error === TC.tool.Elevation.errors.MAX_COORD_QUANTITY_EXCEEDED) {\r\n                                TC.alert(self.getLocaleString('tooManyCoordinatesForElevation.warning'));\r\n                                return;\r\n                            }\r\n                            TC.error(self.getLocaleString('elevation.error'));\r\n                        })\r\n                        .finally(function () {\r\n                            li && li.removeWait(waitId);\r\n                        });\r\n                }\r\n                else {\r\n                    var features;\r\n                    if (self.options.displayElevation && !includeElevation) { // Hay que quitar elevaciones\r\n                        features = self.layer.features\r\n                            .map(function (feat) {\r\n                                var f = feat.clone();\r\n                                if (f.getGeometryStride() > 2) {\r\n                                    f.getCoordsArray().forEach(function (coord) {\r\n                                        coord.length = 2;\r\n                                    });\r\n                                    f.setCoords(f.geometry);\r\n                                }\r\n                                return f;\r\n                            });\r\n                    }\r\n                    else {\r\n                        features = self.layer.features;\r\n                    }\r\n                    self.map.exportFeatures(features, exportOptions);\r\n                }\r\n            };\r\n            self._dialogDiv.innerHTML = html;\r\n            self._dialogDiv.addEventListener('change', TC.EventTarget.listenerBySelector(self._selectors.ELEVATION_CHECKBOX, function (e) {\r\n                self.showSketchDownloadDialog(); // Recalculamos todo el aspecto del diálogo de descarga\r\n            }));\r\n            self._dialogDiv.addEventListener('change', TC.EventTarget.listenerBySelector('input[type=radio][name=ip-coords]', function (e) {\r\n                const ipMessage = self._dialogDiv.querySelector('.' + self.CLASS + '-dialog-ip-m');\r\n                if (e.target.value === '0') {\r\n                    ipMessage.classList.add(TC.Consts.classes.HIDDEN);\r\n                }\r\n                else {\r\n                    ipMessage.classList.remove(TC.Consts.classes.HIDDEN);\r\n                }\r\n            }));\r\n            self._dialogDiv.addEventListener(TC.Consts.event.CLICK, TC.EventTarget.listenerBySelector('button[data-format]', function (e) {\r\n                const format = e.target.dataset.format;\r\n                if (format === TC.Consts.format.GPX) {\r\n                    if (self.layer.features.some(function (feature) {\r\n                        return TC.feature.Polygon && feature instanceof TC.feature.Polygon;\r\n                    })) {\r\n                        TC.confirm(self.getLocaleString('gpxNotCompatible.confirm'), function () {\r\n                            endExport(format);\r\n                        });\r\n                    }\r\n                    else {\r\n                        endExport(format);\r\n                    }\r\n                }\r\n                else {\r\n                    endExport(format);\r\n                }\r\n            }));\r\n        });\r\n\r\n        return promise;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.control.Measure.prototype.register.call(self, map).then(function () {\r\n                const drawPointsId = self.getUID();\r\n                const modifyId = self.getUID();\r\n\r\n                Promise.all([self.layerPromise, self.renderPromise()]).then(function (objects) {\r\n                    const layer = objects[0];\r\n                    layer.title = self.getLocaleString('sketch');\r\n\r\n                    self._modifyPromise = map.addControl('modify', {\r\n                        id: modifyId,\r\n                        div: self.div.querySelector('.' + self.CLASS + '-mod'),\r\n                        layer: layer\r\n                    });\r\n\r\n                    self._modifyPromise.then(function (modify) {\r\n\r\n                        self.modify = modify;\r\n                        modify\r\n                            .on(TC.Consts.event.FEATURESSELECT, function (e) {\r\n                                if (self.resultsPanelChart && !e.features.some(function (feature) {\r\n                                    return self.resultsPanelChart.currentFeature === feature;\r\n                                })) {\r\n                                    self.resultsPanelChart.setCurrentFeature(null);\r\n                                }\r\n                                const feature = e.features[e.features.length - 1];\r\n                                if (feature) {\r\n                                    self.showMeasures(self.getFeatureMeasureData(feature));\r\n                                    const style = feature._originalStyle || feature.getStyle();\r\n                                    switch (true) {\r\n                                        case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                                            self.displayMode(TC.Consts.geom.POLYGON);\r\n                                            self.drawPolygons\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            break;\r\n                                        case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                                            self.displayMode(TC.Consts.geom.POLYLINE);\r\n                                            self.drawLines\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            const profile = getElevationProfileFromCache(feature);\r\n                                            if (profile) {\r\n                                                self.resultsPanelChart.setCurrentFeature(feature);\r\n                                                self.renderElevationChart(profile.data);\r\n                                            }\r\n                                            break;\r\n                                        case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                                            self.displayMode(TC.Consts.geom.POINT);\r\n                                            self.drawPoints\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                    self.modify\r\n                                        .setFontColorWatch(style.fontColor)\r\n                                        .setFontSizeWatch(style.fontSize);\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATURESUNSELECT, function (e) {\r\n                                const features = self.modify.getSelectedFeatures();\r\n                                if (!features.length) {\r\n                                    self.resetDrawWatches();\r\n                                }\r\n                                self.resetElevationProfile();\r\n                                if (self.resultsPanelChart) {\r\n                                    self.resultsPanelChart.close();\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATUREMODIFY, function (e) {\r\n                                if (e.layer === self.layer) {\r\n                                    removeElevationProfileFromCache(e.feature);\r\n                                    const setMeasures = function (feature) {\r\n                                        const measureData = self.getFeatureMeasureData(feature);\r\n                                        self.showMeasures(measureData);\r\n                                        self.setFeatureMeasureData(feature);\r\n                                    };\r\n                                    setMeasures(e.feature);\r\n\r\n                                    // Si es un punto metemos la elevación en la geometría (porque la mostramos en las medidas)\r\n                                    if (self.options.displayElevation && TC.feature.Point && e.feature instanceof TC.feature.Point) {\r\n                                        self.elevation.setGeometry({\r\n                                            features: [e.feature],\r\n                                            crs: self.map.crs\r\n                                        }).then(function (features) {\r\n                                            setMeasures(features[0]);\r\n                                        });\r\n                                    }\r\n\r\n                                    const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                                    popups.forEach(function (pu) {\r\n                                        if (pu.isVisible() && pu.currentFeature === e.feature) {\r\n                                            pu.hide();\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                        map\r\n                            .on(TC.Consts.event.CONTROLDEACTIVATE, function (e) {\r\n                                const control = e.control;\r\n                                if (control === self.modify) {\r\n                                    self.resetDrawWatches();\r\n                                    self.resetElevationProfile();\r\n                                    if (self.resultsPanelChart) {\r\n                                        self.resultsPanelChart.setCurrentFeature(null);\r\n                                        self.resultsPanelChart.close();\r\n                                    }\r\n                                }\r\n                                else if (control === self.drawLines) {\r\n                                    self.resetElevationProfile();\r\n                                    if (self.resultsPanelChart) {\r\n                                        self.resultsPanelChart.close();\r\n                                    }\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATURECLICK, function (e) {\r\n                                const feature = e.feature;\r\n                                // No queremos que se muestre el perfil de la feature ya dibujada si estamos dibujando o seleccionando otra\r\n                                if (!(map.activeControl instanceof TC.control.Draw || map.activeControl instanceof TC.control.Modify)) {\r\n                                    if (TC.feature.Polyline && feature instanceof TC.feature.Polyline && self.layer.features.indexOf(feature) >= 0) {\r\n                                        if (self.elevationProfileActive) {\r\n                                            if (self.resultsPanelChart) {\r\n                                                self.resultsPanelChart.setCurrentFeature(feature);\r\n                                            }\r\n                                            map.getControlsByClass('TC.control.Popup').forEach(function (ctl) {\r\n                                                if (ctl.currentFeature === feature) {\r\n                                                    ctl.hide();\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                        const profile = getElevationProfileFromCache(feature);\r\n                                        if (self.resultsPanelChart && self.resultsPanelChart.isMinimized()) {\r\n                                            self.resultsPanelChart.maximize();\r\n                                        }\r\n                                        if (profile) {\r\n                                            self.renderElevationChart(profile.data);\r\n                                        }\r\n                                        else {\r\n                                            self.displayElevationProfile(feature.geometry);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                    });\r\n\r\n                    self._drawLinesPromise.then(function (drawLines) {\r\n                        drawLines\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                //self.resetElevationProfile();\r\n                                if (self.resultsPanelChart && self.resultsPanelChart.currentFeature) {\r\n                                    self.resultsPanelChart.setCurrentFeature(null);\r\n                                }\r\n                                self.resetValues();\r\n                            })\r\n                            .on(TC.Consts.event.DRAWUNDO + ' ' + TC.Consts.event.DRAWREDO, function () {\r\n                                const drawLines = this;\r\n                                self.displayElevationProfile(drawLines.history.slice(0, drawLines.historyIndex));\r\n                            })\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                if (self.resultsPanelChart) {\r\n                                    self.resultsPanelChart.currentFeature = e.feature;\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.POINT, function (e) {\r\n                                const drawLines = this;\r\n                                const coords = drawLines.history.slice(0, drawLines.historyIndex);\r\n                                const lastCoord = coords[coords.length - 1];\r\n                                if (lastCoord[0] !== e.point[0] || lastCoord[1] !== e.point[1]) {\r\n                                    coords.push(e.point);\r\n                                }\r\n                                self.displayElevationProfile(coords);\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });\r\n\r\n                    self._drawPolygonsPromise.then(function (drawPolygons) {\r\n                        drawPolygons\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                self.resetValues();\r\n                            })\r\n                            //.on(TC.Consts.event.DRAWEND, function (e) {\r\n                            //    if (self.options.displayElevation) {\r\n                            //        self.elevation.setGeometry({\r\n                            //            features: [e.feature],\r\n                            //            crs: self.map.crs\r\n                            //        });\r\n                            //    }\r\n                            //})\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });\r\n\r\n                    self._drawPointsPromise = map.addControl('draw', {\r\n                        id: drawPointsId,\r\n                        div: self.div.querySelector('.' + TC.control.Measure.prototype.CLASS + '-point'),\r\n                        mode: TC.Consts.geom.POINT,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: true,\r\n                        layer: self.layer\r\n                    });\r\n\r\n                    self._drawPointsPromise.then(function (drawPoints) {\r\n\r\n                        drawPoints.containerControl = self;\r\n                        self.drawControls.push(drawPoints);\r\n                        self.drawPoints = drawPoints;\r\n\r\n                        self.resetValues();\r\n\r\n                        drawPoints\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                const updateChanges = function (feat) {\r\n                                    self.showMeasures({ coords: feat.geometry, units: map.wrap.isGeo() ? 'degrees' : 'm' });\r\n                                    self.setFeatureMeasureData(feat);\r\n                                };\r\n                                updateChanges(e.feature);\r\n                                if (self.options.displayElevation) {\r\n                                    self.elevation.setGeometry({\r\n                                        features: [e.feature],\r\n                                        crs: self.map.crs\r\n                                    }).then(function (features) {\r\n                                        updateChanges(features[0]);\r\n                                    })\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.DRAWCANCEL, function (e) {\r\n                                // Alerta de condición de carrera si no ponemos un timeout:\r\n                                // 1- Se llama a cancel de un control Draw.\r\n                                // 2- Se llama a deactivate (como es mediante cancel, no se se corta la cadena de activación controles).\r\n                                // 3- Si el control activo anterior era otro de los modos de dibujo de Measure, se activa.\r\n                                // 4- Se llama a cancel desde aquí.\r\n                                // 5- Se llama a deactivate del control que acabamos de activar en 3.\r\n                                // El activate de 3 y el deactivate de 5 sobre el mismo control entran en condición de carrera al crear/destruir la interaction\r\n                                // por tanto se puede quedar en un estado inconsistente. Para evitar eso, separamos 3 de 5 por el siguiente timeout.\r\n                                setTimeout(function () {\n                                    self.cancel();\n                                }, 100);\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                        // Desactivamos el método exportState que ya se encarga el control padre de ello\r\n                        drawPoints.exportsState = false;\r\n                    });\r\n\r\n                    self.setMode(self.options.mode);\r\n\r\n                    map\r\n                        .on(TC.Consts.event.FEATUREADD, function (e) {\r\n                            const layer = e.layer;\r\n                            const feature = e.feature;\r\n                            if (layer === self.layer) {\r\n                                self.setFeatureMeasureData(feature);\r\n                                \r\n                                self._modifyPromise.then(function (modify) {\r\n                                    modify.displayLabelText(feature.getStyle().label);\r\n                                });\r\n                                self._clearBtn.disabled = false;\r\n                                self._downloadBtn.disabled = false;\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREREMOVE + ' ' + TC.Consts.event.FEATURESCLEAR, function (e) {\r\n                            const layer = e.layer;\r\n                            const feature = e.feature;\r\n                            if (layer === self.layer) {\r\n                                if (self.layer.features.length === 0) {\r\n                                    self._clearBtn.disabled = true;\r\n                                    self._downloadBtn.disabled = true;\r\n                                    self.resetValues();\r\n                                    clearElevationProfileCache();\r\n                                }\r\n                                else if (feature) {\r\n                                    removeElevationProfileFromCache(feature);\r\n                                }\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.RESULTSPANELCLOSE, function (e) {\r\n                            const control = e.control;\r\n                            if (control.setCurrentFeature) {\r\n                                control.setCurrentFeature(null);\r\n                            }\r\n                        });\r\n\r\n                    resolve(self);\r\n                });\r\n\r\n            }).catch(function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self._activeMode = self.div.querySelector('.tc-ctl-meas-pt');\r\n        }\r\n        if (self.modify) {\r\n            self.modify.div.classList.remove(TC.Consts.classes.COLLAPSED);\r\n        }\r\n        return TC.control.Measure.prototype.displayMode.call(self, mode);\r\n    };\r\n\r\n    ctlProto.setMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self.drawPoints.activate();\r\n        }\r\n        return TC.control.Measure.prototype.setMode.call(self, mode);\r\n    };\r\n\r\n    ctlProto.setFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const data = {};\r\n        switch (true) {\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                const firstCoordText = self._1stCoordText.innerHTML;\r\n                const secondCoordText = self._2ndCoordText.innerHTML;\r\n                const elevationText = self._elevationText.innerHTML;\r\n                if (self._1stCoordValue.textContent.trim().length > 0 && self._2ndCoordValue.textContent.trim().length > 0) {\r\n                    data.CRS = self.map.crs;\r\n                    data[firstCoordText.substr(0, firstCoordText.indexOf(':'))] = $(self._1stCoordValue).data(_dataKeys.VALUE);\r\n                    data[secondCoordText.substr(0, secondCoordText.indexOf(':'))] = $(self._2ndCoordValue).data(_dataKeys.VALUE);\r\n                    if (elevationText) {\r\n                        data[self.getLocaleString('ele')] = $(self._elevationValue).data(_dataKeys.VALUE);\r\n                    }\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                if (self._len.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('2dLength')] = self._len.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                if (self._area.innerHTML.trim() !== self.NOMEASURE && self._peri.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('area')] = self._area.innerHTML;\r\n                    data[self.getLocaleString('2dPerimeter')] = self._peri.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const result = {\r\n            units: 'm'\r\n        };\r\n        const measureOptions = {};\r\n        if (self.map.wrap.isGeo()) {\r\n            measureOptions.crs = TC.Cfg.utmCrs;\r\n        }\r\n        switch (true) {\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                result.area = feature.getArea(measureOptions);\r\n                result.perimeter = feature.getLength(measureOptions);\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                result.length = feature.getLength(measureOptions);\r\n                const profile = getElevationProfileFromCache(feature);\r\n                if (profile) {\r\n                    self.renderElevationChart(profile.data);\r\n                }\r\n                else {\r\n                    self.displayElevationProfile(feature.geometry);\r\n                }\r\n                break;\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                result.coords = feature.geometry;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.showMeasures = function (options) {\r\n        const self = this;\r\n        TC.control.Measure.prototype.showMeasures.call(self, options);\r\n        options = options || {};\r\n        var units = options.units;\r\n        const locale = self.map.options.locale || TC.Cfg.locale\r\n        if (options.coords) {\r\n            var precision;\r\n            var coord1, coord2;\r\n            if (options.units === 'm') {\r\n                precision = TC.Consts.METER_PRECISION;\r\n                coord1 = options.coords[0];\r\n                coord2 = options.coords[1];\r\n                self._1stCoordText.innerHTML = 'x: ';\r\n                self._2ndCoordText.innerHTML = 'y: ';\r\n            }\r\n            else {\r\n                precision = TC.Consts.DEGREE_PRECISION;\r\n                coord1 = options.coords[1];\r\n                coord2 = options.coords[0];\r\n                self._1stCoordText.innerHTML = 'lat: ';\r\n                self._2ndCoordText.innerHTML = 'lon: ';\r\n            }\r\n            const factor = Math.pow(10, precision);\r\n            const round = function (val) {\r\n                return Math.round(val * factor) / factor;\r\n            }\r\n            self._1stCoordValue.innerHTML = TC.Util.formatNumber(coord1.toFixed(precision), locale);\r\n            $(self._1stCoordValue).data(_dataKeys.VALUE, round(coord1));\r\n            self._2ndCoordValue.innerHTML = TC.Util.formatNumber(coord2.toFixed(precision), locale);\r\n            $(self._2ndCoordValue).data(_dataKeys.VALUE, round(coord2));\r\n            if (options.coords.length > 2) {\r\n                const elevation = Math.round(options.coords[2]);\r\n                self._elevationText.innerHTML = self.getLocaleString('ele').toLowerCase() + ': ';\r\n                self._elevationValue.innerHTML = TC.Util.formatNumber(elevation.toFixed(TC.Consts.METER_PRECISION), locale) + ' m';\r\n                $(self._elevationValue).data(_dataKeys.VALUE, elevation);\r\n            }\r\n            else {\r\n                self._elevationText.innerHTML = '';\r\n                self._elevationValue.innerHTML = '';\r\n                $(self._elevationValue).data(_dataKeys.VALUE, null);\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        TC.control.Measure.prototype.resetValues.call(self);\r\n\r\n        if (self._1stCoordText) {\r\n            self._1stCoordText.innerHTML = self.NOMEASURE;\r\n            self._2ndCoordText.innerHTML = '';\r\n            self._1stCoordValue.innerHTML = '';\r\n            $(self._1stCoordValue).data(_dataKeys.VALUE, null);\r\n            self._2ndCoordValue.innerHTML = '';\r\n            $(self._2ndCoordValue).data(_dataKeys.VALUE, null);\r\n            self._elevationText.innerHTML = '';\r\n            self._elevationValue.innerHTML = '';\r\n            $(self._elevationValue).data(_dataKeys.VALUE, null);\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetDrawWatches = function () {\r\n        const self = this;\r\n        self.drawControls.forEach(function (ctl) {\r\n            ctl\r\n                .setStrokeColorWatch()\r\n                .setStrokeWidthWatch();\r\n        });\r\n    };\r\n\r\n    ctlProto.clear = function () {\r\n        const self = this;\r\n        self.resetValues();\r\n        self.layer.clearFeatures();\r\n        if (self.modify.isActive) {\r\n            self.modify.deactivate();\r\n        }\r\n        if (self.options.displayElevation) {\r\n            self.resetElevationProfile();\r\n            if (self.resultsPanelChart) {\r\n                self.resultsPanelChart.close();\r\n            }\r\n        }\r\n        self._clearBtn.disabled = true;\r\n        self._downloadBtn.disabled = true;\r\n        return self;\r\n    };\r\n\r\n    ctlProto.showSketchDownloadDialog = function (options) {\r\n        const self = this;\r\n\r\n        const dialog = self._dialogDiv.querySelector('.' + self.CLASS + '-dialog');\r\n        const $dialog = $(dialog);\r\n        const hasPoints = self.layer.features.some(function (feature) {\r\n            return (TC.feature.Point && feature instanceof TC.feature.Point) ||\r\n                (TC.feature.MultiPoint && feature instanceof TC.feature.MultiPoint);\r\n        });\r\n        const hasLines = self.layer.features.some(function (feature) {\r\n            return (TC.feature.Polyline && feature instanceof TC.feature.Polyline) ||\r\n                (TC.feature.MultiPolyline && feature instanceof TC.feature.MultiPolyline);\r\n        });\r\n        const hasPolygons = self.layer.features.some(function (feature) {\r\n            return (TC.feature.Polygon && feature instanceof TC.feature.Polygon) ||\r\n                (TC.feature.MultiPolygon && feature instanceof TC.feature.MultiPolygon);\r\n        });\r\n\r\n        // Si no hay líneas o polígonos, no es necesario preguntar si queremos interpolar\r\n        const ipDiv = dialog.querySelector('.' + self.CLASS + '-dialog-ip');\r\n\r\n        if (!self._dialogDiv.querySelector(self._selectors.ELEVATION_CHECKBOX).checked || (!hasLines && !hasPolygons)) {\r\n            ipDiv.classList.add(TC.Consts.classes.HIDDEN);\r\n        }\r\n        else {\r\n            ipDiv.classList.remove(TC.Consts.classes.HIDDEN);\r\n        }\r\n\r\n        // Si no hay líneas o puntos, no es necesario mostrar el botón de GPX\r\n        const gpxButton = dialog.querySelector('button[data-format=GPX]');\r\n        if (hasLines || hasPoints) {\r\n            gpxButton.classList.remove(TC.Consts.classes.HIDDEN);\r\n        }\r\n        else {\r\n            gpxButton.classList.add(TC.Consts.classes.HIDDEN);\r\n        }\r\n\r\n        TC.Util.showModal(dialog, options);\r\n        return self;\r\n    };\r\n\r\n    ctlProto.onStyleChange = function (e) {\r\n        const self = this;\r\n        var featureCtor;\r\n        switch (e.target.mode) {\r\n            case TC.Consts.geom.POLYGON:\r\n                featureCtor = TC.feature.Polygon;\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n                featureCtor = TC.feature.Polyline;\r\n                break;\r\n            case TC.Consts.geom.POINT:\r\n                featureCtor = TC.feature.Point;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (featureCtor) {\r\n            self.modify.getSelectedFeatures().forEach(function (feature) {\r\n                if (feature instanceof featureCtor) {\r\n                    const styleOptions = {};\r\n                    styleOptions[e.property] = e.value;\r\n                    //feature._originalStyle[e.property] = e.value;\r\n                    feature.setStyle(styleOptions);\r\n                    //clearTimeout(feature._selectionStyleTimeout);\r\n                    //feature._selectionStyleTimeout = setTimeout(function () {\r\n                    //    feature.setStyle(self.modify.styleFunction(feature));\r\n                    //}, self.options.styleChangeDisplayTimeout || 1000);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ctlProto.displayElevationProfile = function (coords) {\r\n        const self = this;\r\n        if (coords.length === 1) {\r\n            // Espera una línea, metemos un segundo punto\r\n            coords = coords.slice();\r\n            coords.push(coords[0]);\r\n        }\r\n        const li = self.map.getLoadingIndicator();\r\n        const waitId = li && li.addWait();\r\n        self.elevation.getElevation({\r\n            crs: self.map.crs,\r\n            coordinates: coords\r\n        }).then(\r\n            function (elevCoords) {\r\n                li && li.removeWait(waitId);\r\n                var distance = 0.0;\r\n                var maxElevation = Number.NEGATIVE_INFINITY;\r\n                var minElevation = Number.POSITIVE_INFINITY;\r\n                const profile = elevCoords\r\n                    .map(function (point, idx, arr) {\r\n                        const prev = idx === 0 ? point : arr[idx - 1];\r\n                        const dx = point[0] - prev[0];\r\n                        const dy = point[1] - prev[1];\r\n                        distance += Math.sqrt(dx * dx + dy * dy);\r\n                        var ele = point[2];\r\n                        if (typeof ele === 'number') {\r\n                            maxElevation = Math.max(ele, maxElevation);\r\n                            minElevation = Math.min(ele, minElevation);\r\n                        }\r\n                        return [distance, ele];\r\n                    });\r\n\r\n                self.elevationProfileData = {\r\n                    x: profile.map(function (elm) {\r\n                        return elm[0];\r\n                    }),\r\n                    ele: profile.map(function (elm) {\r\n                        return elm[1];\r\n                    }),\r\n                    coords: elevCoords\r\n                };\r\n                const elevationGainOptions = {\r\n                    coords: elevCoords\r\n                };\r\n                if (typeof self.options.displayElevation === 'object') {\r\n                    elevationGainOptions.hillDeltaThreshold = self.options.displayElevation.hillDeltaThreshold;\r\n                }\r\n                $.extend(self.elevationProfileData, TC.tool.Elevation.getElevationGain(elevationGainOptions));\r\n\r\n                // Cacheamos el perfil\r\n                const matchingFeature = self.layer.features\r\n                    .filter(function (feat) {\r\n                        return TC.feature.Polyline && feat instanceof TC.feature.Polyline;\r\n                    })\r\n                    .filter(function (line) {\r\n                        for (var i = 0, len = line.geometry.length; i < len; i++) {\r\n                            const coord = coords[i];\r\n                            const lineCoord = line.geometry[i];\r\n                            if (!coord || coord[0] !== lineCoord[0] || coord[1] !== lineCoord[1]) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    })[0];\r\n                if (matchingFeature) {\r\n                    cacheElevationProfile(matchingFeature, self.elevationProfileData);\r\n                }\r\n\r\n                if (self.resultsPanelChart) {\r\n                    self.renderElevationChart();\r\n                }\r\n                else {\r\n                    self.createChartPanel().then(function (resultsPanelChart) {\r\n                        self.resultsPanelChart.renderPromise().then(function () {\r\n                            self.renderElevationChart();\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n            function (error) {\r\n                self.resetElevationProfile();\r\n                li && li.removeWait(waitId);\r\n            });\r\n\r\n    };\r\n\r\n    ctlProto.createChartPanel = function () {\r\n        const self = this;\r\n\r\n        const resultsPanelOptions = {\r\n            id: self.getUID(),\r\n            content: \"chart\",\r\n            titles: {\r\n                main: self.getLocaleString(\"geo.trk.chart.chpe\"),\r\n                max: self.getLocaleString(\"geo.trk.chart.chpe\")\r\n            },\r\n            chart: {\r\n                ctx: self,\r\n                onmouseout: ctlProto.removeElevationTooltip,\r\n                tooltip: ctlProto.getElevationTooltip\r\n            }\r\n        };\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            var addControlPromise;\r\n            const addResultsPanelChart = function (controlContainer) {\r\n                resultsPanelOptions.side = controlContainer.SIDE.RIGHT;\r\n                addControlPromise = controlContainer.addControl('resultsPanel', resultsPanelOptions);\r\n            };\r\n\r\n            if (self.options.displayElevation.displayOn) {\r\n                var controlContainer = self.map.getControlsByClass('TC.control.' + self.options.displayElevation.displayOn[0].toUpperCase() + self.options.displayElevation.displayOn.substring(1))[0];\r\n                if (!controlContainer) {\r\n                    self.map.addControl(self.options.displayElevation.displayOn).then(addResultsPanelChart);\r\n                } else {\r\n                    addResultsPanelChart(controlContainer);\r\n                }\r\n            } else {\r\n                resultsPanelOptions.div = document.createElement('div');\r\n                self.map.div.appendChild(resultsPanelOptions.div);\r\n                addControlPromise = self.map.addControl('resultsPanel', resultsPanelOptions);\r\n            }\r\n\r\n            addControlPromise.then(function (resultsPanelChart) {\r\n                resultsPanelChart.caller = self;\r\n                self.resultsPanelChart = resultsPanelChart;\r\n                self._decorateChartPanel();\r\n                resolve(resultsPanelChart);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto._decorateChartPanel = function () {\r\n        const self = this;\r\n        self.resultsPanelChart.setCurrentFeature = function (feature) {\r\n            const that = this;\r\n            if (that.currentFeature) {\r\n                that.currentFeature.toggleSelectedStyle(false);\r\n            }\r\n            that.currentFeature = feature;\r\n            if (feature) {\r\n                feature.toggleSelectedStyle(true);\r\n            }\r\n        };\r\n    };\r\n\r\n    ctlProto.renderElevationChart = function (profileData) {\r\n        const self = this;\r\n        self.elevationProfileData = profileData || self.elevationProfileData;\r\n        if (self.resultsPanelChart && self.elevationProfileActive) {\r\n            self.resultsPanelChart.openChart(self.elevationProfileData);\r\n            if (!self.resultsPanelChart.isMinimized()) {\r\n                self.resultsPanelChart.show();\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.getElevationTooltip = function (d) {\r\n        const self = this;\r\n        self.resultsPanelChart.wrap.showElevationMarker({\r\n            data: d,\r\n            layer: self.layer,\r\n            coords: self.elevationProfileData.coords\r\n        });\r\n\r\n        return self.resultsPanelChart.getElevationChartTooltip(d);\r\n    };\r\n\r\n    ctlProto.removeElevationTooltip = function () {\r\n        var self = this;\r\n        self.resultsPanelChart.wrap.hideElevationMarker();\r\n    }\r\n\r\n    ctlProto.activateElevationProfile = function () {\r\n        const self = this;\r\n        self.elevationProfileActive = true;\r\n        self._elevProfileBtn.classList.add(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('deactivateElevationProfile'));\r\n        var profileDrawn = false;\r\n        if (self.drawLines.historyIndex > 1) {\r\n            self.displayElevationProfile(self.drawLines.history.slice(0, self.drawLines.historyIndex));\r\n            profileDrawn = true;\r\n        }\r\n        else {\r\n            const features = self.modify.getActiveFeatures().filter(function (feat) {\r\n                return TC.feature.Polyline && feat instanceof TC.feature.Polyline;\r\n            });\r\n            if (features.length) {\r\n                const feature = features[features.length - 1];\r\n                self.displayElevationProfile(feature.geometry);\r\n                profileDrawn = true;\r\n            }\r\n        }\r\n        if (!profileDrawn) {\r\n            self.resetElevationProfile();\r\n        }\r\n        if (self.resultsPanelChart) {\r\n            self.resultsPanelChart.show();\r\n        }\r\n    };\r\n\r\n    ctlProto.deactivateElevationProfile = function () {\r\n        const self = this;\r\n        self.elevationProfileActive = false;\r\n        self._elevProfileBtn.classList.remove(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('activateElevationProfile'));\r\n        self.resetElevationProfile();\r\n        if (self.resultsPanelChart) {\r\n            self.resultsPanelChart.close();\r\n        }\r\n    };\r\n\r\n    ctlProto.resetElevationProfile = function () {\r\n        const self = this;\r\n        if (self.options.displayElevation && self.resultsPanelChart) {\r\n            self.elevationProfileData = {\r\n                x: [0],\r\n                ele: [0],\r\n                coords: [0, 0, 0],\r\n                upHill: 0,\r\n                downHill: 0\r\n            };\r\n            self.resultsPanelChart.openChart(self.elevationProfileData);\r\n        }\r\n    };\r\n\r\n})();"],"file":"../../control/DrawMeasureModify.min.js"}