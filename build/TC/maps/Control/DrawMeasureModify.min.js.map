{"version":3,"sources":["control/DrawMeasureModify.js"],"names":["TC","control","Measure","syncLoadJS","apiLocation","DrawMeasureModify","self","this","apply","arguments","_dialogDiv","Util","getDiv","options","dialogDiv","window","$","_$dialogDiv","document","body","appendChild","cs","_classSelector","CLASS","_selectors","ELEVATION_CHECKBOX","persistentDrawControls","renderPromise","then","_1stCoordText","div","querySelector","_2ndCoordText","_1stCoordValue","_2ndCoordValue","_elevationText","_elevationValue","inherit","ctlProto","prototype","downloadDialog","Consts","event","RESULTSPANELCLOSE","FEATURESSELECT","elevationProfileCache","getElevationProfileFromCache","feature","filter","elm","removeElevationProfileFromCache","featIdx","reduce","prev","cur","idx","splice","template","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","render","callback","promise","_set1stRenderPromise","call","_clearBtn","addEventListener","CLICK","e","confirm","getLocaleString","clear","_downloadBtn","showSketchDownloadDialog","_elevProfileBtn","elevationProfileActive","deactivateElevationProfile","activateElevationProfile","displayElevation","style","display","isFunction","getUID","map","Promise","resolve","reject","pointDrawControlId","modifyId","elevationPromise","loadJS","tool","Elevation","elevationOptions","elevation","all","layerPromise","objects","layer","title","_modifyPromise","addControl","id","modify","on","resultsPanelChart","features","some","currentFeature","setCurrentFeature","length","showMeasures","getFeatureMeasureData","_originalStyle","getStyle","Polygon","displayMode","geom","POLYGON","polygonDrawControl","setStrokeColorWatch","strokeColor","setStrokeWidthWatch","strokeWidth","Polyline","POLYLINE","lineDrawControl","profile","renderElevationChart","data","Point","POINT","pointDrawControl","setFontColorWatch","fontColor","setFontSizeWatch","fontSize","FEATURESUNSELECT","getSelectedFeatures","resetDrawWatches","resetElevationProfile","close","FEATUREMODIFY","setMeasures","measureData","setFeatureMeasureData","setGeometry","crs","getControlsByClass","forEach","pu","isVisible","hide","CONTROLDEACTIVATE","POPUP","indexOf","isMinimized","maximize","displayElevationProfile","geometry","PROJECTIONCHANGE","elevationChartData","coords","reproject","oldCrs","newCrs","_lineDrawControlPromise","DRAWSTART","resetValues","DRAWUNDO","DRAWREDO","history","slice","historyIndex","DRAWEND","lastCoord","point","push","STYLECHANGE","onStyleChange","_polygonDrawControlPromise","_pointDrawControlPromise","mode","persistent","styleTools","containerControl","drawControls","updateChanges","feat","units","wrap","isGeo","DRAWCANCEL","setTimeout","cancel","exportsState","setMode","FEATUREADD","displayLabelText","label","disabled","FEATUREREMOVE","FEATURESCLEAR","catch","error","_activeMode","classList","remove","classes","COLLAPSED","activate","firstCoordText","innerHTML","secondCoordText","elevationText","textContent","trim","CRS","substr","parseFloat","dataset","value","setData","_len","NOMEASURE","_area","_peri","result","measureOptions","Cfg","utmCrs","area","getArea","perimeter","getLength","locale","precision","coord1","coord2","METER_PRECISION","DEGREE_PRECISION","factor","Math","pow","round","val","formatNumber","toFixed","toLowerCase","ctl","clearFeatures","isActive","deactivate","fileName","replace","getFormattedDate","Date","toString","hasPoints","MultiPoint","hasLines","MultiPolyline","hasPolygons","MultiPolygon","Object","assign","excludedFormats","open","featureCtor","target","styleOptions","property","setStyle","li","getLoadingIndicator","waitId","addWait","getElevation","coordinates","partialCallback","elevCoords","removeWait","distance","maxElevation","Number","NEGATIVE_INFINITY","minElevation","POSITIVE_INFINITY","arr","dx","dy","sqrt","ele","max","min","x","elevationGainOptions","hillDeltaThreshold","extend","getElevationGain","matchingFeature","line","i","len","coord","lineCoord","cacheElevationProfile","createChartPanel","resultsPanelOptions","content","titles","main","chart","onmouseout","removeElevationTooltip","tooltip","getElevationTooltip","addControlPromise","addResultsPanelChart","controlContainer","position","POSITION","RIGHT","displayOn","toUpperCase","substring","createElement","caller","_decorateChartPanel","that","toggleSelectedStyle","profileData","openChart","show","d","showElevationMarker","getElevationChartTooltip","hideElevationMarker","add","ACTIVE","setAttribute","profileDrawn","getActiveFeatures","upHill","downHill"],"mappings":"AAAAA,GAAGC,QAAUD,GAAGC,SAAW,GAEtBD,GAAGC,QAAQC,SACZF,GAAGG,WAAWH,GAAGI,YAAc,sBAGnCJ,GAAGC,QAAQI,kBAAoB,WAC3B,IAAIC,EAAOC,KAEXP,GAAGC,QAAQC,QAAQM,MAAMF,EAAMG,WAE/BH,EAAKI,WAAaV,GAAGW,KAAKC,OAAON,EAAKO,QAAQC,WAC1CC,OAAOC,IACPV,EAAKW,YAAcD,EAAEV,EAAKI,aAEzBJ,EAAKO,QAAQC,WACdI,SAASC,KAAKC,YAAYd,EAAKI,YAGnC,MAAMW,EAAKf,EAAKgB,eAAiB,IAAMhB,EAAKiB,MAC5CjB,EAAKkB,WAAa,CACdC,mBAAoBJ,EAAK,qCAG7Bf,EAAKoB,wBAAyB,EAE9BpB,EAAKqB,gBAAgBC,KAAK,WACtBtB,EAAKuB,cAAgBvB,EAAKwB,IAAIC,cAAc,8BAC5CzB,EAAK0B,cAAgB1B,EAAKwB,IAAIC,cAAc,8BAC5CzB,EAAK2B,eAAiB3B,EAAKwB,IAAIC,cAAc,8BAC7CzB,EAAK4B,eAAiB5B,EAAKwB,IAAIC,cAAc,8BAC7CzB,EAAK6B,eAAiB7B,EAAKwB,IAAIC,cAAc,gCAC7CzB,EAAK8B,gBAAkB9B,EAAKwB,IAAIC,cAAc,mCAKtD/B,GAAGqC,QAAQrC,GAAGC,QAAQI,kBAAmBL,GAAGC,QAAQC,UAEpD,WACI,IAAIoC,EAAWtC,GAAGC,QAAQI,kBAAkBkC,UAE5CD,EAASf,MAAQ,aAEjB,IAIIiB,EAAiB,KAGrBxC,GAAGyC,OAAOC,MAAMC,kBAAoB3C,GAAGyC,OAAOC,MAAMC,mBAAqB,uBACzE3C,GAAGyC,OAAOC,MAAME,eAAiB5C,GAAGyC,OAAOC,MAAME,gBAAkB,oBAEnE,MAAMC,EAAwB,GAExBC,EAA+B,SAAUC,GAC3C,OAAOF,EAAsBG,OAAO,SAAUC,GAC1C,OAAOA,EAAIF,UAAYA,IACxB,IAeDG,EAAkC,SAAUH,GAC9C,MAAMI,EAAUN,EAAsBO,OAAO,SAAUC,EAAMC,EAAKC,GAC9D,OAAID,EAAIP,UAAYA,EACTQ,EAEJF,IACP,GACAF,GAAW,GACXN,EAAsBW,OAAOL,EAAS,IAQ9Cb,EAASmB,SAAW,WAAWC,KAAKC,SAASrB,EAASf,MAAMqC,GAAQ,SAASA,EAAOC,EAAIC,GAAK,OAAOD,EAAIE,EAAE,QAAQC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,mBAAmBF,EAAE,uIAAiJC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,WAAWF,EAAE,+GAAuHC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,UAAUF,EAAE,+GAAuHC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,aAAaF,EAAE,yJAA+JC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,4BAA4BF,EAAE,wdAA4eC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,aAAaF,EAAE,qGAA0GC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,+BAA+BF,EAAE,MAAOC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,uBAAuBF,EAAE,sJAA4JC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,SAASF,EAAE,kDAAoDC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,gBAAgBF,EAAE,0MAAqNC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,cAAcF,EAAE,MAAOC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,cAAcF,EAAE,+DAAkEC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,aAAaF,EAAE,MAAOC,EAAE,OAAOF,EAAI,GAAG,CAACG,KAAO,aAAaF,EAAE,4BAA6BH,EAAOM,YAAW,EAAG,OAAON,GAE12EtB,EAAS6B,OAAS,SAAUC,GACxB,MAAM9D,EAAOC,KACP8D,EAAU/D,EAAKgE,qBAAqBtE,GAAGC,QAAQC,QAAQqC,UAAU4B,OAAOI,KAAKjE,EAAM,WACrFA,EAAKkE,UAAYlE,EAAKwB,IAAIC,cAAc,6CACxCzB,EAAKkE,UAAUC,iBAAiBzE,GAAGyC,OAAOC,MAAMgC,MAAO,SAAUC,GAC7D3E,GAAG4E,QAAQtE,EAAKuE,gBAAgB,qBAAsB,WAClDvE,EAAKwE,YAGbxE,EAAKyE,aAAezE,EAAKwB,IAAIC,cAAc,4CAC3CzB,EAAKyE,aAAaN,iBAAiBzE,GAAGyC,OAAOC,MAAMgC,MAAO,SAAUC,GAChErE,EAAK0E,6BAGT1E,EAAK2E,gBAAkB3E,EAAKwB,IAAIC,cAAc,yBAC9CzB,EAAK2E,gBAAgBR,iBAAiBzE,GAAGyC,OAAOC,MAAMgC,MAAO,SAAUC,GACnErE,EAAK4E,uBAAyB5E,EAAK6E,6BAA+B7E,EAAK8E,6BAGtE9E,EAAKO,QAAQwE,mBACd/E,EAAK2E,gBAAgBK,MAAMC,QAAU,QAGrCvF,GAAGW,KAAK6E,WAAWpB,IACnBA,OAKQ9D,EAAKmF,SACNnF,EAAKO,QAAQwE,iBAG5B,OAAOhB,GAGX/B,EAASqB,SAAW,SAAU+B,GAC1B,MAAMpF,EAAOC,KACb,OAAO,IAAIoF,QAAQ,SAAUC,EAASC,GAClC7F,GAAGC,QAAQC,QAAQqC,UAAUoB,SAASY,KAAKjE,EAAMoF,GAAK9D,KAAK,WACvD,MAAMkE,EAAqBxF,EAAKmF,SAC1BM,EAAWzF,EAAKmF,SAEhBO,EAAmB,IAAIL,QAAQ,SAAUC,EAASC,GACpD,GAAIvF,EAAKO,QAAQwE,iBAAkB,CAC/B/E,EAAK4E,wBAAyB,EAC9BlF,GAAGiG,QACEjG,GAAGkG,OAASlG,GAAGkG,KAAKC,UACrBnG,GAAGI,YAAc,oBACjB,WACI,MAAMgG,EAA4D,kBAAlC9F,EAAKO,QAAQwE,iBAAiC,GAAK/E,EAAKO,QAAQwE,iBAChG/E,EAAK+F,UAAY,IAAIrG,GAAGkG,KAAKC,UAAUC,GACvCR,EAAQtF,EAAK+F,kBAIpB,GAAI/F,EAAKoF,IAAIW,UAAW,CACzB/F,EAAK+F,UAAY/F,EAAKoF,IAAIW,UAC1BT,EAAQtF,EAAK+F,gBAGbT,MAGRD,QAAQW,IAAI,CAAChG,EAAKiG,aAAcjG,EAAKqB,gBAAiBqE,IAAmBpE,KAAK,SAAU4E,GACpF,MAAMC,EAAQD,EAAQ,GACtBC,EAAMC,MAAQpG,EAAKuE,gBAAgB,UAEnCvE,EAAKqG,eAAiBjB,EAAIkB,WAAW,SAAU,CAC3CC,GAAId,EACJjE,IAAKxB,EAAKwB,IAAIC,cAAc,IAAMzB,EAAKiB,MAAQ,QAC/CkF,MAAOA,IAGXnG,EAAKqG,eAAe/E,KAAK,SAAUkF,GAE/BxG,EAAKwG,OAASA,EACdA,EACKC,GAAG/G,GAAGyC,OAAOC,MAAME,eAAgB,SAAU+B,GACtCrE,EAAK0G,oBAAsBrC,EAAEsC,SAASC,KAAK,SAAUnE,GACrD,OAAOzC,EAAK0G,kBAAkBG,iBAAmBpE,KAEjDzC,EAAK0G,kBAAkBI,kBAAkB,MAE7C,MAAMrE,EAAU4B,EAAEsC,SAAStC,EAAEsC,SAASI,OAAS,GAC/C,GAAItE,EAAS,CACTzC,EAAKgH,aAAahH,EAAKiH,sBAAsBxE,IAC7C,MAAMuC,EAAQvC,EAAQyE,gBAAkBzE,EAAQ0E,WAChD,QAAQ,GACJ,KAAKzH,GAAG+C,QAAQ2E,SAAW3E,aAAmB/C,GAAG+C,QAAQ2E,QACrDpH,EAAKqH,YAAY3H,GAAGyC,OAAOmF,KAAKC,SAChCvH,EAAKwH,mBACAC,oBAAoBzC,EAAM0C,aAC1BC,oBAAoB3C,EAAM4C,aAC/B,MACJ,KAAKlI,GAAG+C,QAAQoF,UAAYpF,aAAmB/C,GAAG+C,QAAQoF,SACtD7H,EAAKqH,YAAY3H,GAAGyC,OAAOmF,KAAKQ,UAChC9H,EAAK+H,gBACAN,oBAAoBzC,EAAM0C,aAC1BC,oBAAoB3C,EAAM4C,aAC/B,MAAMI,EAAUxF,EAA6BC,GAC7C,GAAIuF,EAAS,CACThI,EAAK0G,kBAAkBI,kBAAkBrE,GACzCzC,EAAKiI,qBAAqBD,EAAQE,MAEtC,MACJ,KAAKxI,GAAG+C,QAAQ0F,OAAS1F,aAAmB/C,GAAG+C,QAAQ0F,MACnDnI,EAAKqH,YAAY3H,GAAGyC,OAAOmF,KAAKc,OAChCpI,EAAKqI,iBACAZ,oBAAoBzC,EAAM0C,aAC1BC,oBAAoB3C,EAAM4C,aAKvC5H,EAAKwG,OACA8B,kBAAkBtD,EAAMuD,WACxBC,iBAAiBxD,EAAMyD,aAGnChC,GAAG/G,GAAGyC,OAAOC,MAAMsG,iBAAkB,SAAUrE,GAC3BrE,EAAKwG,OAAOmC,sBACf5B,QACV/G,EAAK4I,mBAET5I,EAAK6I,wBACD7I,EAAK0G,mBACL1G,EAAK0G,kBAAkBoC,UAG9BrC,GAAG/G,GAAGyC,OAAOC,MAAM2G,cAAe,SAAU1E,GACzC,GAAIA,EAAE8B,QAAUnG,EAAKmG,MAAO,CACxBvD,EAAgCyB,EAAE5B,SAClC,MAAMuG,EAAc,SAAUvG,GAC1B,MAAMwG,EAAcjJ,EAAKiH,sBAAsBxE,GAC/CzC,EAAKgH,aAAaiC,GAClBjJ,EAAKkJ,sBAAsBzG,IAE/BuG,EAAY3E,EAAE5B,SAGVzC,EAAKO,QAAQwE,kBAAoBrF,GAAG+C,QAAQ0F,OAAS9D,EAAE5B,mBAAmB/C,GAAG+C,QAAQ0F,OACrFnI,EAAK+F,UAAUoD,YAAY,CACvBxC,SAAU,CAACtC,EAAE5B,SACb2G,IAAKpJ,EAAKoF,IAAIgE,MACf9H,KAAK,SAAUqF,GACdqC,EAAYrC,EAAS,MAId3G,EAAKoF,IAAIiE,mBAAmB,oBACpCC,QAAQ,SAAUC,GACjBA,EAAG1C,iBAAmBxC,EAAE5B,SAAW8G,EAAGC,aACtCD,EAAGE,YAMvBrE,EACKqB,GAAG/G,GAAGyC,OAAOC,MAAMsH,kBAAmB,SAAUrF,GAC7C,MAAM1E,EAAU0E,EAAE1E,QAClB,GAAIA,IAAYK,EAAKwG,OAAQ,CACzBxG,EAAK4I,mBACL5I,EAAK6I,wBACL,GAAI7I,EAAK0G,kBAAmB,CACxB1G,EAAK0G,kBAAkBI,kBAAkB,MACzC9G,EAAK0G,kBAAkBoC,cAG1B,GAAInJ,IAAYK,EAAK+H,gBAAiB,CACvC/H,EAAK6I,wBACD7I,EAAK0G,mBACL1G,EAAK0G,kBAAkBoC,WAIlCrC,GAAG/G,GAAGyC,OAAOC,MAAMuH,MAAO,SAAUtF,GAEjC,MAAM5B,EAAU4B,EAAE1E,QAAQkH,eAC1B,GAAInH,GAAG+C,QAAQoF,UAAYpF,aAAmB/C,GAAG+C,QAAQoF,UAAY7H,EAAKmG,MAAMQ,SAASiD,QAAQnH,IAAY,GACrGzC,EAAK4E,uBAAwB,CAC7BP,EAAE1E,QAAQ8J,OACNzJ,EAAK0G,mBACL1G,EAAK0G,kBAAkBI,kBAAkBrE,GAE7C,MAAMuF,EAAUxF,EAA6BC,GAC7C,GAAIzC,EAAK0G,kBAAmB,CACxB1G,EAAK0G,kBAAkBG,eAAiBpE,EACpCzC,EAAK0G,kBAAkBmD,eACvB7J,EAAK0G,kBAAkBoD,WAG3B9B,EACAhI,EAAKiI,qBAAqBD,EAAQE,MAGlClI,EAAK+J,wBAAwBtH,EAAQuH,aAKpDvD,GAAG/G,GAAGyC,OAAOC,MAAM6H,iBAAkB,SAAU5F,GACxCrE,EAAKkK,qBACLlK,EAAKkK,mBAAmBC,OAASzK,GAAGW,KAAK+J,UAAUpK,EAAKkK,mBAAmBC,OAAQ9F,EAAEgG,OAAQhG,EAAEiG,aAM/GtK,EAAKuK,wBAAwBjJ,KAAK,SAAUyG,GACxCA,EACKtB,GAAG/G,GAAGyC,OAAOC,MAAMoI,UAAW,WAEvBxK,EAAK0G,mBAAqB1G,EAAK0G,kBAAkBG,gBACjD7G,EAAK0G,kBAAkBI,kBAAkB,MAE7C9G,EAAKyK,gBAERhE,GAAG/G,GAAGyC,OAAOC,MAAMsI,SAAW,IAAMhL,GAAGyC,OAAOC,MAAMuI,SAAU,WAE3D3K,EAAK+J,wBADmB9J,KACqB2K,QAAQC,MAAM,EADnC5K,KACsD6K,iBAEjFrE,GAAG/G,GAAGyC,OAAOC,MAAM2I,QAAS,SAAU1G,GAC/BrE,EAAK0G,oBACL1G,EAAK0G,kBAAkBG,eAAiBxC,EAAE5B,WAGjDgE,GAAG/G,GAAGyC,OAAOC,MAAMgG,MAAO,SAAU/D,GACjC,MACM8F,EADkBlK,KACO2K,QAAQC,MAAM,EADrB5K,KACwC6K,cAC1DE,EAAYb,EAAOA,EAAOpD,OAAS,GACrCiE,EAAU,KAAO3G,EAAE4G,MAAM,IAAMD,EAAU,KAAO3G,EAAE4G,MAAM,IACxDd,EAAOe,KAAK7G,EAAE4G,OAElBjL,EAAK+J,wBAAwBI,KAEhC1D,GAAG/G,GAAGyC,OAAOC,MAAM+I,YAAa,SAAU9G,GACvCrE,EAAKoL,cAAc/G,OAI/BrE,EAAKqL,2BAA2B/J,KAAK,SAAUkG,GAC3CA,EACKf,GAAG/G,GAAGyC,OAAOC,MAAMoI,UAAW,WAC3BxK,EAAKyK,gBAURhE,GAAG/G,GAAGyC,OAAOC,MAAM+I,YAAa,SAAU9G,GACvCrE,EAAKoL,cAAc/G,OAI/BrE,EAAKsL,yBAA2BlG,EAAIkB,WAAW,OAAQ,CACnDC,GAAIf,EACJhE,IAAKxB,EAAKwB,IAAIC,cAAc,IAAM/B,GAAGC,QAAQC,QAAQqC,UAAUhB,MAAQ,UACvEsK,KAAM7L,GAAGyC,OAAOmF,KAAKc,MACrBoD,WAAYxL,EAAKoB,uBACjBqK,YAAY,EACZtF,MAAOnG,EAAKmG,QAGhBnG,EAAKsL,yBAAyBhK,KAAK,SAAU+G,GAEzCA,EAAiBqD,iBAAmB1L,EACpCA,EAAK2L,aAAaT,KAAK7C,GACvBrI,EAAKqI,iBAAmBA,EAExBrI,EAAKyK,cAELpC,EACK5B,GAAG/G,GAAGyC,OAAOC,MAAM2I,QAAS,SAAU1G,GACnC,MAAMuH,EAAgB,SAAUC,GAC5B7L,EAAKgH,aAAa,CAAEmD,OAAQ0B,EAAK7B,SAAU8B,MAAO1G,EAAI2G,KAAKC,QAAU,UAAY,MACjFhM,EAAKkJ,sBAAsB2C,IAE/BD,EAAcvH,EAAE5B,SACZzC,EAAKO,QAAQwE,kBACb/E,EAAK+F,UAAUoD,YAAY,CACvBxC,SAAU,CAACtC,EAAE5B,SACb2G,IAAKpJ,EAAKoF,IAAIgE,MACf9H,KAAK,SAAUqF,GACdiF,EAAcjF,EAAS,QAIlCF,GAAG/G,GAAGyC,OAAOC,MAAM6J,WAAY,SAAU5H,GAStC6H,WAAW,WACPlM,EAAKmM,UACN,OAEN1F,GAAG/G,GAAGyC,OAAOC,MAAM+I,YAAa,SAAU9G,GACvCrE,EAAKoL,cAAc/G,KAG3BgE,EAAiB+D,cAAe,IAGpCpM,EAAKqM,QAAQrM,EAAKO,QAAQgL,MAE1BnG,EACKqB,GAAG/G,GAAGyC,OAAOC,MAAMkK,WAAY,SAAUjI,GACtC,MAAM8B,EAAQ9B,EAAE8B,MACV1D,EAAU4B,EAAE5B,QAClB,GAAI0D,IAAUnG,EAAKmG,MAAO,CACtBnG,EAAKkJ,sBAAsBzG,GAE3BzC,EAAKqG,eAAe/E,KAAK,SAAUkF,GAC/BA,EAAO+F,iBAAiB9J,EAAQ0E,WAAWqF,SAE/CxM,EAAKkE,UAAUuI,UAAW,EAC1BzM,EAAKyE,aAAagI,UAAW,KAGpChG,GAAG/G,GAAGyC,OAAOC,MAAMsK,cAAgB,IAAMhN,GAAGyC,OAAOC,MAAMuK,cAAe,SAAUtI,GAC/E,MAAM8B,EAAQ9B,EAAE8B,MACV1D,EAAU4B,EAAE5B,QAClB,GAAI0D,IAAUnG,EAAKmG,MACf,GAAmC,IAA/BnG,EAAKmG,MAAMQ,SAASI,OAAc,CAClC/G,EAAKkE,UAAUuI,UAAW,EAC1BzM,EAAKyE,aAAagI,UAAW,EAC7BzM,EAAKyK,cArVjClI,EAAsBwE,OAAS,OAwVEtE,GACLG,EAAgCH,KAI3CgE,GAAG/G,GAAGyC,OAAOC,MAAMC,kBAAmB,SAAUgC,GAC7C,MAAM1E,EAAU0E,EAAE1E,QACdA,EAAQmH,mBACRnH,EAAQmH,kBAAkB,QAItCxB,EAAQtF,OAGb4M,MAAM,SAAUC,GACftH,EAAOsH,QAKnB7K,EAASqF,YAAc,SAAUkE,GAC7B,MAAMvL,EAAOC,KACTsL,IAAS7L,GAAGyC,OAAOmF,KAAKc,QACxBpI,EAAK8M,YAAc9M,EAAKwB,IAAIC,cAAc,oBAE1CzB,EAAKwG,QACLxG,EAAKwG,OAAOhF,IAAIuL,UAAUC,OAAOtN,GAAGyC,OAAO8K,QAAQC,WAEvD,OAAOxN,GAAGC,QAAQC,QAAQqC,UAAUoF,YAAYpD,KAAKjE,EAAMuL,IAG/DvJ,EAASqK,QAAU,SAAUd,GACzB,MAAMvL,EAAOC,KACTsL,IAAS7L,GAAGyC,OAAOmF,KAAKc,OACxBpI,EAAKqI,iBAAiB8E,WAE1B,OAAOzN,GAAGC,QAAQC,QAAQqC,UAAUoK,QAAQpI,KAAKjE,EAAMuL,IAG3DvJ,EAASkH,sBAAwB,SAAUzG,GACvC,MAAMzC,EAAOC,KACPiI,EAAO,GACb,QAAQ,GACJ,KAAKxI,GAAG+C,QAAQ0F,OAAS1F,aAAmB/C,GAAG+C,QAAQ0F,MACnD,MAAMiF,EAAiBpN,EAAKuB,cAAc8L,UACpCC,EAAkBtN,EAAK0B,cAAc2L,UACrCE,EAAgBvN,EAAK6B,eAAewL,UAC1C,GAAIrN,EAAK2B,eAAe6L,YAAYC,OAAO1G,OAAS,GAAK/G,EAAK4B,eAAe4L,YAAYC,OAAO1G,OAAS,EAAG,CACxGmB,EAAKwF,IAAM1N,EAAKoF,IAAIgE,IACpBlB,EAAKkF,EAAeO,OAAO,EAAGP,EAAexD,QAAQ,OAASgE,WAAW5N,EAAK2B,eAAekM,QAAQC,OACrG5F,EAAKoF,EAAgBK,OAAO,EAAGL,EAAgB1D,QAAQ,OAASgE,WAAW5N,EAAK4B,eAAeiM,QAAQC,OACnGP,IACArF,EAAKlI,EAAKuE,gBAAgB,QAAUqJ,WAAW5N,EAAK8B,gBAAgB+L,QAAQC,QAEhFrL,EAAQsL,QAAQ7F,GAEpB,MACJ,KAAKxI,GAAG+C,QAAQoF,UAAYpF,aAAmB/C,GAAG+C,QAAQoF,SACtD,GAAI7H,EAAKgO,KAAKX,UAAUI,SAAWzN,EAAKiO,UAAW,CAC/C/F,EAAKlI,EAAKuE,gBAAgB,aAAevE,EAAKgO,KAAKX,UACnD5K,EAAQsL,QAAQ7F,GAEpB,MACJ,KAAKxI,GAAG+C,QAAQ2E,SAAW3E,aAAmB/C,GAAG+C,QAAQ2E,QACrD,GAAIpH,EAAKkO,MAAMb,UAAUI,SAAWzN,EAAKiO,WAAajO,EAAKmO,MAAMd,UAAUI,SAAWzN,EAAKiO,UAAW,CAClG/F,EAAKlI,EAAKuE,gBAAgB,SAAWvE,EAAKkO,MAAMb,UAChDnF,EAAKlI,EAAKuE,gBAAgB,gBAAkBvE,EAAKmO,MAAMd,UACvD5K,EAAQsL,QAAQ7F,IAM5B,OAAOlI,GAGXgC,EAASiF,sBAAwB,SAAUxE,GACvC,MAAMzC,EAAOC,KACPmO,EAAS,CACXtC,MAAO,KAELuC,EAAiB,GACnBrO,EAAKoF,IAAI2G,KAAKC,UACdqC,EAAejF,IAAM1J,GAAG4O,IAAIC,QAEhC,QAAQ,GACJ,KAAK7O,GAAG+C,QAAQ2E,SAAW3E,aAAmB/C,GAAG+C,QAAQ2E,QACrDgH,EAAOI,KAAO/L,EAAQgM,QAAQJ,GAC9BD,EAAOM,UAAYjM,EAAQkM,UAAUN,GACrC,MACJ,KAAK3O,GAAG+C,QAAQoF,UAAYpF,aAAmB/C,GAAG+C,QAAQoF,SACtDuG,EAAOrH,OAAStE,EAAQkM,UAAUN,GAClC,MAAMrG,EAAUxF,EAA6BC,GACzCuF,EACAhI,EAAKiI,qBAAqBD,EAAQE,MAGlClI,EAAK+J,wBAAwBtH,EAAQuH,UAEzC,MACJ,KAAKtK,GAAG+C,QAAQ0F,OAAS1F,aAAmB/C,GAAG+C,QAAQ0F,MACnDiG,EAAOjE,OAAS1H,EAAQuH,SAKhC,OAAOoE,GAGXpM,EAASgF,aAAe,SAAUzG,GAC9B,MAAMP,EAAOC,KACbP,GAAGC,QAAQC,QAAQqC,UAAU+E,aAAa/C,KAAKjE,EAAMO,IACrDA,EAAUA,GAAW,IACDuL,MACpB,MAAM8C,EAAS5O,EAAKoF,IAAI7E,QAAQqO,QAAUlP,GAAG4O,IAAIM,OACjD,GAAIrO,EAAQ4J,OAAQ,CAChB,IAAI0E,EACAC,EAAQC,EACZ,GAAsB,MAAlBxO,EAAQuL,MAAe,CACvB+C,EAAYnP,GAAGyC,OAAO6M,gBACtBF,EAASvO,EAAQ4J,OAAO,GACxB4E,EAASxO,EAAQ4J,OAAO,GACxBnK,EAAKuB,cAAc8L,UAAY,MAC/BrN,EAAK0B,cAAc2L,UAAY,UAE9B,CACDwB,EAAYnP,GAAGyC,OAAO8M,iBACtBH,EAASvO,EAAQ4J,OAAO,GACxB4E,EAASxO,EAAQ4J,OAAO,GACxBnK,EAAKuB,cAAc8L,UAAY,QAC/BrN,EAAK0B,cAAc2L,UAAY,QAEnC,MAAM6B,EAASC,KAAKC,IAAI,GAAIP,GACtBQ,EAAQ,SAAUC,GACpB,OAAOH,KAAKE,MAAMC,EAAMJ,GAAUA,GAEtClP,EAAK2B,eAAe0L,UAAY3N,GAAGW,KAAKkP,aAAaT,EAAOU,QAAQX,GAAYD,GAChF5O,EAAK2B,eAAekM,QAAQC,MAAQuB,EAAMP,GAC1C9O,EAAK4B,eAAeyL,UAAY3N,GAAGW,KAAKkP,aAAaR,EAAOS,QAAQX,GAAYD,GAChF5O,EAAK4B,eAAeiM,QAAQC,MAAQuB,EAAMN,GAC1C,GAAIxO,EAAQ4J,OAAOpD,OAAS,EAAG,CAC3B,MAAMhB,EAAYoJ,KAAKE,MAAM9O,EAAQ4J,OAAO,IAC5CnK,EAAK6B,eAAewL,UAAYrN,EAAKuE,gBAAgB,OAAOkL,cAAgB,KAC5EzP,EAAK8B,gBAAgBuL,UAAY3N,GAAGW,KAAKkP,aAAaxJ,EAAUyJ,QAAQ9P,GAAGyC,OAAO6M,iBAAkBJ,GAAU,KAC9G5O,EAAK8B,gBAAgB+L,QAAQC,MAAQ/H,MAEpC,CACD/F,EAAK6B,eAAewL,UAAY,GAChCrN,EAAK8B,gBAAgBuL,UAAY,GACjCrN,EAAK8B,gBAAgB+L,QAAQC,MAAQ,IAG7C,OAAO9N,GAGXgC,EAASyI,YAAc,WACnB,MAAMzK,EAAOC,KACbP,GAAGC,QAAQC,QAAQqC,UAAUwI,YAAYxG,KAAKjE,GAE9C,GAAIA,EAAKuB,cAAe,CACpBvB,EAAKuB,cAAc8L,UAAYrN,EAAKiO,UACpCjO,EAAK0B,cAAc2L,UAAY,GAC/BrN,EAAK2B,eAAe0L,UAAY,GAChCrN,EAAK2B,eAAekM,QAAQC,MAAQ,GACpC9N,EAAK4B,eAAeyL,UAAY,GAChCrN,EAAK4B,eAAeiM,QAAQC,MAAQ,GACpC9N,EAAK6B,eAAewL,UAAY,GAChCrN,EAAK8B,gBAAgBuL,UAAY,GACjCrN,EAAK8B,gBAAgB+L,QAAQC,MAAQ,GAEzC,OAAO9N,GAGXgC,EAAS4G,iBAAmB,WACX3I,KACR0L,aAAarC,QAAQ,SAAUoG,GAChCA,EACKjI,sBACAE,yBAIb3F,EAASwC,MAAQ,WACb,MAAMxE,EAAOC,KACbD,EAAKyK,cACLzK,EAAKmG,MAAMwJ,gBACP3P,EAAKwG,OAAOoJ,UACZ5P,EAAKwG,OAAOqJ,aAEhB,GAAI7P,EAAKO,QAAQwE,iBAAkB,CAC/B/E,EAAK6I,wBACD7I,EAAK0G,mBACL1G,EAAK0G,kBAAkBoC,QAG/B9I,EAAKkE,UAAUuI,UAAW,EAC1BzM,EAAKyE,aAAagI,UAAW,EAC7B,OAAOzM,GAGXgC,EAAS0C,yBAA2B,SAAUnE,GAC1C,MAAMP,EAAOC,KAEb,IAAIoF,QAAQ,SAAUC,EAASC,GACtBrD,EAODoD,EAAQpD,GANRlC,EAAKoF,IAAIkB,WAAW,yBAAyBhF,KAAKoO,IAE9CpK,EADApD,EAAiBwN,OAO1BpO,KAAK,SAAU3B,GACd,IAAIY,EAAU,CACV6F,MAAOpG,EAAKuE,gBAAgB,kBAC5BuL,SAAU9P,EAAKuE,gBAAgB,UAAUkL,cAAcM,QAAQ,IAAK,KAAO,IAAMrQ,GAAGW,KAAK2P,kBAAiB,IAAIC,MAAOC,YAAY,IAIrI,MAAMC,EAAYnQ,EAAKmG,MAAMQ,SAASC,KAAK,SAAUnE,GACjD,OAAQ/C,GAAG+C,QAAQ0F,OAAS1F,aAAmB/C,GAAG+C,QAAQ0F,OACrDzI,GAAG+C,QAAQ2N,YAAc3N,aAAmB/C,GAAG+C,QAAQ2N,aAE1DC,EAAWrQ,EAAKmG,MAAMQ,SAASC,KAAK,SAAUnE,GAChD,OAAQ/C,GAAG+C,QAAQoF,UAAYpF,aAAmB/C,GAAG+C,QAAQoF,UACxDnI,GAAG+C,QAAQ6N,eAAiB7N,aAAmB/C,GAAG+C,QAAQ6N,gBAE7DC,EAAcvQ,EAAKmG,MAAMQ,SAASC,KAAK,SAAUnE,GACnD,OAAQ/C,GAAG+C,QAAQ2E,SAAW3E,aAAmB/C,GAAG+C,QAAQ2E,SACvD1H,GAAG+C,QAAQ+N,cAAgB/N,aAAmB/C,GAAG+C,QAAQ+N,eAG7DL,GAAcE,IAAYE,IAC3BhQ,EAAUkQ,OAAOC,OAAO,GAAInQ,EAAS,CAAEoQ,gBAAiB,CAAC,UAIzDpQ,GADkC,IAAlCP,EAAKO,QAAQwE,iBACH0L,OAAOC,OAAO,GAAInQ,EAAS,CAAEwF,UAAW0K,OAAOC,OAAO,GAAI1Q,EAAKoF,IAAIW,WAAa/F,EAAKoF,IAAIW,UAAUxF,QAASP,EAAKO,QAAQwE,oBAEzH0L,OAAOC,OAAO,GAAInQ,EAAS,CAAEwF,UAAW/F,EAAKoF,IAAIW,WAAa/F,EAAKoF,IAAIW,UAAUxF,UAE/FZ,EAAQiR,KAAK5Q,EAAKmG,MAAMQ,SAAUpG,KAGtC,OAAOP,GAIXgC,EAASoJ,cAAgB,SAAU/G,GAC/B,MAAMrE,EAAOC,KACb,IAAI4Q,EACJ,OAAQxM,EAAEyM,OAAOvF,MACb,KAAK7L,GAAGyC,OAAOmF,KAAKC,QAChBsJ,EAAcnR,GAAG+C,QAAQ2E,QACzB,MACJ,KAAK1H,GAAGyC,OAAOmF,KAAKQ,SAChB+I,EAAcnR,GAAG+C,QAAQoF,SACzB,MACJ,KAAKnI,GAAGyC,OAAOmF,KAAKc,MAChByI,EAAcnR,GAAG+C,QAAQ0F,MAK7B0I,GACA7Q,EAAKwG,OAAOmC,sBAAsBW,QAAQ,SAAU7G,GAChD,GAAIA,aAAmBoO,EAAa,CAChC,MAAME,EAAe,GACrBA,EAAa1M,EAAE2M,UAAY3M,EAAEyJ,MAE7BrL,EAAQwO,SAASF,OAUjC/O,EAAS+H,wBAA0B,SAAUI,GACzC,MAAMnK,EAAOC,KACS,IAAlBkK,EAAOpD,SAEPoD,EAASA,EAAOU,SACTK,KAAKf,EAAO,IAEvB,MAAM+G,EAAKlR,EAAKoF,IAAI+L,sBACdC,EAASF,GAAMA,EAAGG,UACxBrR,EAAK+F,UAAUuL,aAAa,CACxBlI,IAAKpJ,EAAKoF,IAAIgE,IACdmI,YAAapH,EACbqH,gBAAiB,SAAUC,GACvBP,GAAMA,EAAGQ,WAAWN,GACpB,IAAIO,EAAW,EACXC,EAAeC,OAAOC,kBACtBC,EAAeF,OAAOG,kBAC1B,MAAMhK,EAAUyJ,EACXrM,IAAI,SAAU6F,EAAOhI,EAAKgP,GACvB,MAAMlP,EAAe,IAARE,EAAYgI,EAAQgH,EAAIhP,EAAM,GACrCiP,EAAKjH,EAAM,GAAKlI,EAAK,GACrBoP,EAAKlH,EAAM,GAAKlI,EAAK,GAC3B4O,GAAYxC,KAAKiD,KAAKF,EAAKA,EAAKC,EAAKA,GACrC,IAAIE,EAAMpH,EAAM,GAChB,GAAmB,iBAARoH,EAAkB,CACzBT,EAAezC,KAAKmD,IAAID,EAAKT,GAC7BG,EAAe5C,KAAKoD,IAAIF,EAAKN,GAEjC,MAAO,CAACJ,EAAUU,KAG1BrS,EAAKkK,mBAAqB,CACtBsI,EAAGxK,EAAQ5C,IAAI,SAAUzC,GACrB,OAAOA,EAAI,KAEf0P,IAAKrK,EAAQ5C,IAAI,SAAUzC,GACvB,OAAOA,EAAI,KAEfwH,OAAQsH,GAEZ,MAAMgB,EAAuB,CACzBtI,OAAQsH,GAEiC,iBAAlCzR,EAAKO,QAAQwE,mBACpB0N,EAAqBC,mBAAqB1S,EAAKO,QAAQwE,iBAAiB2N,oBAE5EhT,GAAGW,KAAKsS,OAAO3S,EAAKkK,mBAAoBxK,GAAGkG,KAAKC,UAAU+M,iBAAiBH,IAG3E,MAAMI,EAAkB7S,EAAKmG,MAAMQ,SAC9BjE,OAAO,SAAUmJ,GACd,OAAOnM,GAAG+C,QAAQoF,UAAYgE,aAAgBnM,GAAG+C,QAAQoF,WAE5DnF,OAAO,SAAUoQ,GACd,IAAK,IAAIC,EAAI,EAAGC,EAAMF,EAAK9I,SAASjD,OAAQgM,EAAIC,EAAKD,IAAK,CACtD,MAAME,EAAQ9I,EAAO4I,GACfG,EAAYJ,EAAK9I,SAAS+I,GAChC,IAAKE,GAASA,EAAM,KAAOC,EAAU,IAAMD,EAAM,KAAOC,EAAU,GAC9D,OAAO,EAGf,OAAO,IACR,GACHL,GA1sBc,SAAUpQ,EAASyF,GAC7C,IAAIkG,EAAS5L,EAA6BC,GAC1C,IAAK2L,EAAQ,CACTA,EAAS,CACL3L,QAASA,GAEbF,EAAsB2I,KAAKkD,GAE/BA,EAAOlG,KAAOA,EAmsBFiL,CAAsBN,EAAiB7S,EAAKkK,oBAG5ClK,EAAK0G,kBACL1G,EAAKiI,uBAGLjI,EAAKoT,mBAAmB9R,KAAK,SAAUoF,GACnC1G,EAAK0G,kBAAkBrF,gBAAgBC,KAAK,WACxCtB,EAAKiI,8BAKtB2E,MAAM,SAAUC,GACf7M,EAAK6I,wBACLqI,GAAMA,EAAGQ,WAAWN,MAI5BpP,EAASoR,iBAAmB,WACxB,MAAMpT,EAAOC,KAEPoT,EAAsB,CACxB9M,GAAIvG,EAAKmF,SACTmO,QAAS,QACTC,OAAQ,CACJC,KAAMxT,EAAKuE,gBAAgB,sBAC3B+N,IAAKtS,EAAKuE,gBAAgB,uBAE9BkP,MAAO,CACHjQ,IAAKxD,EACL0T,WAAY1R,EAAS2R,uBACrBC,QAAS5R,EAAS6R,sBAI1B,OAAO,IAAIxO,QAAQ,SAAUC,EAASC,GAClC,IAAIuO,EACJ,MAAMC,EAAuB,SAAUC,GACnCX,EAAoBY,SAAWD,EAAiBE,SAASC,MACzDL,EAAoBE,EAAiB1N,WAAW,eAAgB+M,IAGpE,GAAIrT,EAAKO,QAAQwE,iBAAiBqP,UAAW,CACzC,IAAIJ,EAAmBhU,EAAKoF,IAAIiE,mBAAmB,cAAgBrJ,EAAKO,QAAQwE,iBAAiBqP,UAAU,GAAGC,cAAgBrU,EAAKO,QAAQwE,iBAAiBqP,UAAUE,UAAU,IAAI,GAC/KN,EAGDD,EAAqBC,GAFrBhU,EAAKoF,IAAIkB,WAAWtG,EAAKO,QAAQwE,iBAAiBqP,WAAW9S,KAAKyS,OAInE,CACHV,EAAoB7R,IAAMZ,SAAS2T,cAAc,OACjDvU,EAAKoF,IAAI5D,IAAIV,YAAYuS,EAAoB7R,KAC7CsS,EAAoB9T,EAAKoF,IAAIkB,WAAW,eAAgB+M,GAG5DS,EAAkBxS,KAAK,SAAUoF,GAC7BA,EAAkB8N,OAASxU,EAC3BA,EAAK0G,kBAAoBA,EACzB1G,EAAKyU,sBACLnP,EAAQoB,QAKpB1E,EAASyS,oBAAsB,WACdxU,KACRyG,kBAAkBI,kBAAoB,SAAUrE,GACjD,MAAMiS,EAAOzU,KACTyU,EAAK7N,gBACL6N,EAAK7N,eAAe8N,qBAAoB,GAE5CD,EAAK7N,eAAiBpE,EAClBA,GACAA,EAAQkS,qBAAoB,KAKxC3S,EAASiG,qBAAuB,SAAU2M,GACtC,MAAM5U,EAAOC,KACbD,EAAKkK,mBAAqB0K,GAAe5U,EAAKkK,mBAC9C,GAAIlK,EAAK0G,mBAAqB1G,EAAK4E,uBAAwB,CACvD5E,EAAK0G,kBAAkB8N,OAASxU,EAChCA,EAAK0G,kBAAkBmO,UAAU7U,EAAKkK,oBACjClK,EAAK0G,kBAAkBmD,eACxB7J,EAAK0G,kBAAkBoO,SAKnC9S,EAAS6R,oBAAsB,SAAUkB,GACxB9U,KACRyG,kBAAkBqF,KAAKiJ,oBAAoB,CAC5C9M,KAAM6M,EACN5O,MAHSlG,KAGGkG,MACZgE,OAJSlK,KAIIiK,mBAAmBC,SAGpC,OAPalK,KAODyG,kBAAkBuO,yBAAyBF,IAG3D/S,EAAS2R,uBAAyB,WACnB1T,KACNyG,kBAAkBqF,KAAKmJ,uBAGhClT,EAAS8C,yBAA2B,WAChC,MAAM9E,EAAOC,KACbD,EAAK4E,wBAAyB,EAC9B5E,EAAK2E,gBAAgBoI,UAAUoI,IAAIzV,GAAGyC,OAAO8K,QAAQmI,QACrDpV,EAAK2E,gBAAgB0Q,aAAa,QAASrV,EAAKuE,gBAAgB,+BAChE,IAAI+Q,GAAe,EACnB,GAAItV,EAAK+H,gBAAgB+C,aAAe,EAAG,CACvC9K,EAAK+J,wBAAwB/J,EAAK+H,gBAAgB6C,QAAQC,MAAM,EAAG7K,EAAK+H,gBAAgB+C,eACxFwK,GAAe,MAEd,CACD,MAAM3O,EAAW3G,EAAKwG,OAAO+O,oBAAoB7S,OAAO,SAAUmJ,GAC9D,OAAOnM,GAAG+C,QAAQoF,UAAYgE,aAAgBnM,GAAG+C,QAAQoF,WAE7D,GAAIlB,EAASI,OAAQ,CACjB,MAAMtE,EAAUkE,EAASA,EAASI,OAAS,GAC3C/G,EAAK+J,wBAAwBtH,EAAQuH,UACrCsL,GAAe,GAGlBA,GACDtV,EAAK6I,wBAEL7I,EAAK0G,mBACL1G,EAAK0G,kBAAkBoO,QAI/B9S,EAAS6C,2BAA6B,WAClC,MAAM7E,EAAOC,KACbD,EAAK4E,wBAAyB,EAC9B5E,EAAK2E,gBAAgBoI,UAAUC,OAAOtN,GAAGyC,OAAO8K,QAAQmI,QACxDpV,EAAK2E,gBAAgB0Q,aAAa,QAASrV,EAAKuE,gBAAgB,6BAChEvE,EAAK6I,wBACD7I,EAAK0G,mBACL1G,EAAK0G,kBAAkBoC,SAI/B9G,EAAS6G,sBAAwB,WAC7B,MAAM7I,EAAOC,KACb,GAAID,EAAKO,QAAQwE,kBAAoB/E,EAAK0G,kBAAmB,CACzD1G,EAAKkK,mBAAqB,CACtBsI,EAAG,CAAC,GACJH,IAAK,CAAC,GACNlI,OAAQ,CAAC,EAAG,EAAG,GACfqL,OAAQ,EACRC,SAAU,GAEdzV,EAAK0G,kBAAkBmO,UAAU7U,EAAKkK,sBA/3BlD","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.Measure) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/Measure');\r\n}\r\n\r\nTC.control.DrawMeasureModify = function () {\r\n    var self = this;\r\n\r\n    TC.control.Measure.apply(self, arguments);\r\n\r\n    self._dialogDiv = TC.Util.getDiv(self.options.dialogDiv);\r\n    if (window.$) {\r\n        self._$dialogDiv = $(self._dialogDiv);\r\n    }\r\n    if (!self.options.dialogDiv) {\r\n        document.body.appendChild(self._dialogDiv);\r\n    }\r\n\r\n    const cs = self._classSelector = '.' + self.CLASS;\r\n    self._selectors = {\r\n        ELEVATION_CHECKBOX: cs + '-dialog-elev input[type=checkbox]'\r\n    };\r\n\r\n    self.persistentDrawControls = true;\r\n\r\n    self.renderPromise().then(function () {\r\n        self._1stCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-1-t');\r\n        self._2ndCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-2-t');\r\n        self._1stCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-1-v');\r\n        self._2ndCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-2-v');\r\n        self._elevationText = self.div.querySelector('.tc-ctl-meas-val-coord-ele-t');\r\n        self._elevationValue = self.div.querySelector('.tc-ctl-meas-val-coord-ele-v');\r\n    });\r\n\r\n};\r\n\r\nTC.inherit(TC.control.DrawMeasureModify, TC.control.Measure);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.DrawMeasureModify.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-dmm';\r\n\r\n    var _dataKeys = {\r\n        VALUE: 'tcValue'\r\n    };\r\n\r\n    var downloadDialog = null;\r\n\r\n\r\n    TC.Consts.event.RESULTSPANELCLOSE = TC.Consts.event.RESULTSPANELCLOSE || 'resultspanelclose.tc';\r\n    TC.Consts.event.FEATURESSELECT = TC.Consts.event.FEATURESSELECT || \"featuresselect.tc\";\r\n\r\n    const elevationProfileCache = [];\r\n\r\n    const getElevationProfileFromCache = function (feature) {\r\n        return elevationProfileCache.filter(function (elm) {\r\n            return elm.feature === feature;\r\n        })[0];\r\n    };\r\n\r\n    const cacheElevationProfile = function (feature, data) {\r\n        var result = getElevationProfileFromCache(feature);\r\n        if (!result) {\r\n            result = {\r\n                feature: feature\r\n            };\r\n            elevationProfileCache.push(result);\r\n        }\r\n        result.data = data;\r\n        return result;\r\n    };\r\n\r\n    const removeElevationProfileFromCache = function (feature) {\r\n        const featIdx = elevationProfileCache.reduce(function (prev, cur, idx) {\r\n            if (cur.feature === feature) {\r\n                return idx;\r\n            }\r\n            return prev;\r\n        }, -1);\r\n        if (featIdx >= 0) {\r\n            elevationProfileCache.splice(featIdx, 1);\r\n        }\r\n    };\r\n\r\n    const clearElevationProfileCache = function () {\r\n        elevationProfileCache.length = 0;\r\n    };\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/DrawMeasureModify.html\";        \r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        const promise = self._set1stRenderPromise(TC.control.Measure.prototype.render.call(self, function () {\r\n            self._clearBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-clr');\r\n            self._clearBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                TC.confirm(self.getLocaleString('deleteAll.confirm'), function () {\r\n                    self.clear();\r\n                });\r\n            });\r\n            self._downloadBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-dl');\r\n            self._downloadBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.showSketchDownloadDialog();\r\n            });\r\n\r\n            self._elevProfileBtn = self.div.querySelector('.tc-ctl-meas-prof-btn');\r\n            self._elevProfileBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.elevationProfileActive ? self.deactivateElevationProfile() : self.activateElevationProfile();\r\n            });\r\n\r\n            if (!self.options.displayElevation) {\r\n                self._elevProfileBtn.style.display = 'none';\r\n            }\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n\r\n        const renderOptions = {\r\n            checkboxId: self.getUID(),\r\n            elevation: self.options.displayElevation\r\n        };\r\n        \r\n        return promise;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.control.Measure.prototype.register.call(self, map).then(function () {\r\n                const pointDrawControlId = self.getUID();\r\n                const modifyId = self.getUID();\r\n\r\n                const elevationPromise = new Promise(function (resolve, reject) {\r\n                    if (self.options.displayElevation) {\r\n                        self.elevationProfileActive = true;\r\n                        TC.loadJS(\r\n                            !TC.tool || !TC.tool.Elevation,\r\n                            TC.apiLocation + 'TC/tool/Elevation',\r\n                            function () {\r\n                                const elevationOptions = typeof self.options.displayElevation === 'boolean' ? {} : self.options.displayElevation;\r\n                                self.elevation = new TC.tool.Elevation(elevationOptions);\r\n                                resolve(self.elevation);\r\n                            }\r\n                        );\r\n                    }\r\n                    else if (self.map.elevation) {\r\n                        self.elevation = self.map.elevation;\r\n                        resolve(self.elevation);\r\n                    }\r\n                    else\r\n                        resolve();\r\n                });\r\n                \r\n                Promise.all([self.layerPromise, self.renderPromise(), elevationPromise]).then(function (objects) {\r\n                    const layer = objects[0];\r\n                    layer.title = self.getLocaleString('sketch');\r\n\r\n                    self._modifyPromise = map.addControl('modify', {\r\n                        id: modifyId,\r\n                        div: self.div.querySelector('.' + self.CLASS + '-mod'),\r\n                        layer: layer\r\n                    });\r\n\r\n                    self._modifyPromise.then(function (modify) {\r\n\r\n                        self.modify = modify;\r\n                        modify\r\n                            .on(TC.Consts.event.FEATURESSELECT, function (e) {\r\n                                if (self.resultsPanelChart && !e.features.some(function (feature) {\r\n                                    return self.resultsPanelChart.currentFeature === feature;\r\n                                })) {\r\n                                    self.resultsPanelChart.setCurrentFeature(null);\r\n                                }\r\n                                const feature = e.features[e.features.length - 1];\r\n                                if (feature) {\r\n                                    self.showMeasures(self.getFeatureMeasureData(feature));\r\n                                    const style = feature._originalStyle || feature.getStyle();\r\n                                    switch (true) {\r\n                                        case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                                            self.displayMode(TC.Consts.geom.POLYGON);\r\n                                            self.polygonDrawControl\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            break;\r\n                                        case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                                            self.displayMode(TC.Consts.geom.POLYLINE);\r\n                                            self.lineDrawControl\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            const profile = getElevationProfileFromCache(feature);\r\n                                            if (profile) {\r\n                                                self.resultsPanelChart.setCurrentFeature(feature);\r\n                                                self.renderElevationChart(profile.data);\r\n                                            }\r\n                                            break;\r\n                                        case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                                            self.displayMode(TC.Consts.geom.POINT);\r\n                                            self.pointDrawControl\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                    self.modify\r\n                                        .setFontColorWatch(style.fontColor)\r\n                                        .setFontSizeWatch(style.fontSize);\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATURESUNSELECT, function (e) {\r\n                                const features = self.modify.getSelectedFeatures();\r\n                                if (!features.length) {\r\n                                    self.resetDrawWatches();\r\n                                }\r\n                                self.resetElevationProfile();\r\n                                if (self.resultsPanelChart) {\r\n                                    self.resultsPanelChart.close();\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATUREMODIFY, function (e) {\r\n                                if (e.layer === self.layer) {\r\n                                    removeElevationProfileFromCache(e.feature);\r\n                                    const setMeasures = function (feature) {\r\n                                        const measureData = self.getFeatureMeasureData(feature);\r\n                                        self.showMeasures(measureData);\r\n                                        self.setFeatureMeasureData(feature);\r\n                                    };\r\n                                    setMeasures(e.feature);\r\n\r\n                                    // Si es un punto metemos la elevación en la geometría (porque la mostramos en las medidas)\r\n                                    if (self.options.displayElevation && TC.feature.Point && e.feature instanceof TC.feature.Point) {\r\n                                        self.elevation.setGeometry({\r\n                                            features: [e.feature],\r\n                                            crs: self.map.crs\r\n                                        }).then(function (features) {\r\n                                            setMeasures(features[0]);\r\n                                        });\r\n                                    }\r\n\r\n                                    const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                                    popups.forEach(function (pu) {\r\n                                        if (pu.currentFeature === e.feature && pu.isVisible()) {\r\n                                            pu.hide();\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                        map\r\n                            .on(TC.Consts.event.CONTROLDEACTIVATE, function (e) {\r\n                                const control = e.control;\r\n                                if (control === self.modify) {\r\n                                    self.resetDrawWatches();\r\n                                    self.resetElevationProfile();\r\n                                    if (self.resultsPanelChart) {\r\n                                        self.resultsPanelChart.setCurrentFeature(null);\r\n                                        self.resultsPanelChart.close();\r\n                                    }\r\n                                }\r\n                                else if (control === self.lineDrawControl) {\r\n                                    self.resetElevationProfile();\r\n                                    if (self.resultsPanelChart) {\r\n                                        self.resultsPanelChart.close();\r\n                                    }\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.POPUP, function (e) {\r\n                                // En líneas queremos mostrar el perfil en vez del popup\r\n                                const feature = e.control.currentFeature;\r\n                                if (TC.feature.Polyline && feature instanceof TC.feature.Polyline && self.layer.features.indexOf(feature) >= 0) {\r\n                                    if (self.elevationProfileActive) {\r\n                                        e.control.hide();\r\n                                        if (self.resultsPanelChart) {\r\n                                            self.resultsPanelChart.setCurrentFeature(feature);\r\n                                        }\r\n                                        const profile = getElevationProfileFromCache(feature);\r\n                                        if (self.resultsPanelChart) {\r\n                                            self.resultsPanelChart.currentFeature = feature;\r\n                                            if (self.resultsPanelChart.isMinimized()) {\r\n                                                self.resultsPanelChart.maximize();\r\n                                            }\r\n                                        }\r\n                                        if (profile) {\r\n                                            self.renderElevationChart(profile.data);\r\n                                        }\r\n                                        else {\r\n                                            self.displayElevationProfile(feature.geometry);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.PROJECTIONCHANGE, function (e) {\r\n                                if (self.elevationChartData) {\r\n                                    self.elevationChartData.coords = TC.Util.reproject(self.elevationChartData.coords, e.oldCrs, e.newCrs);\r\n                                }\r\n                            });\r\n\r\n                    });\r\n\r\n                    self._lineDrawControlPromise.then(function (lineDrawControl) {\r\n                        lineDrawControl\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                //self.resetElevationProfile();\r\n                                if (self.resultsPanelChart && self.resultsPanelChart.currentFeature) {\r\n                                    self.resultsPanelChart.setCurrentFeature(null);\r\n                                }\r\n                                self.resetValues();\r\n                            })\r\n                            .on(TC.Consts.event.DRAWUNDO + ' ' + TC.Consts.event.DRAWREDO, function () {\r\n                                const lineDrawControl = this;\r\n                                self.displayElevationProfile(lineDrawControl.history.slice(0, lineDrawControl.historyIndex));\r\n                            })\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                if (self.resultsPanelChart) {\r\n                                    self.resultsPanelChart.currentFeature = e.feature;\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.POINT, function (e) {\r\n                                const lineDrawControl = this;\r\n                                const coords = lineDrawControl.history.slice(0, lineDrawControl.historyIndex);\r\n                                const lastCoord = coords[coords.length - 1];\r\n                                if (lastCoord[0] !== e.point[0] || lastCoord[1] !== e.point[1]) {\r\n                                    coords.push(e.point);\r\n                                }\r\n                                self.displayElevationProfile(coords);\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });\r\n\r\n                    self._polygonDrawControlPromise.then(function (polygonDrawControl) {\r\n                        polygonDrawControl\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                self.resetValues();\r\n                            })\r\n                            //.on(TC.Consts.event.DRAWEND, function (e) {\r\n                            //    if (self.options.displayElevation) {\r\n                            //        self.elevation.setGeometry({\r\n                            //            features: [e.feature],\r\n                            //            crs: self.map.crs\r\n                            //        });\r\n                            //    }\r\n                            //})\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });\r\n\r\n                    self._pointDrawControlPromise = map.addControl('draw', {\r\n                        id: pointDrawControlId,\r\n                        div: self.div.querySelector('.' + TC.control.Measure.prototype.CLASS + '-point'),\r\n                        mode: TC.Consts.geom.POINT,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: true,\r\n                        layer: self.layer\r\n                    });\r\n\r\n                    self._pointDrawControlPromise.then(function (pointDrawControl) {\r\n\r\n                        pointDrawControl.containerControl = self;\r\n                        self.drawControls.push(pointDrawControl);\r\n                        self.pointDrawControl = pointDrawControl;\r\n\r\n                        self.resetValues();\r\n\r\n                        pointDrawControl\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                const updateChanges = function (feat) {\r\n                                    self.showMeasures({ coords: feat.geometry, units: map.wrap.isGeo() ? 'degrees' : 'm' });\r\n                                    self.setFeatureMeasureData(feat);\r\n                                };\r\n                                updateChanges(e.feature);\r\n                                if (self.options.displayElevation) {\r\n                                    self.elevation.setGeometry({\r\n                                        features: [e.feature],\r\n                                        crs: self.map.crs\r\n                                    }).then(function (features) {\r\n                                        updateChanges(features[0]);\r\n                                    })\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.DRAWCANCEL, function (e) {\r\n                                // Alerta de condición de carrera si no ponemos un timeout:\r\n                                // 1- Se llama a cancel de un control Draw.\r\n                                // 2- Se llama a deactivate (como es mediante cancel, no se se corta la cadena de activación controles).\r\n                                // 3- Si el control activo anterior era otro de los modos de dibujo de Measure, se activa.\r\n                                // 4- Se llama a cancel desde aquí.\r\n                                // 5- Se llama a deactivate del control que acabamos de activar en 3.\r\n                                // El activate de 3 y el deactivate de 5 sobre el mismo control entran en condición de carrera al crear/destruir la interaction\r\n                                // por tanto se puede quedar en un estado inconsistente. Para evitar eso, separamos 3 de 5 por el siguiente timeout.\r\n                                setTimeout(function () {\r\n                                    self.cancel();\r\n                                }, 100);\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                        // Desactivamos el método exportState que ya se encarga el control padre de ello\r\n                        pointDrawControl.exportsState = false;\r\n                    });\r\n\r\n                    self.setMode(self.options.mode);\r\n\r\n                    map\r\n                        .on(TC.Consts.event.FEATUREADD, function (e) {\r\n                            const layer = e.layer;\r\n                            const feature = e.feature;\r\n                            if (layer === self.layer) {\r\n                                self.setFeatureMeasureData(feature);\r\n                                \r\n                                self._modifyPromise.then(function (modify) {\r\n                                    modify.displayLabelText(feature.getStyle().label);\r\n                                });\r\n                                self._clearBtn.disabled = false;\r\n                                self._downloadBtn.disabled = false;\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREREMOVE + ' ' + TC.Consts.event.FEATURESCLEAR, function (e) {\r\n                            const layer = e.layer;\r\n                            const feature = e.feature;\r\n                            if (layer === self.layer) {\r\n                                if (self.layer.features.length === 0) {\r\n                                    self._clearBtn.disabled = true;\r\n                                    self._downloadBtn.disabled = true;\r\n                                    self.resetValues();\r\n                                    clearElevationProfileCache();\r\n                                }\r\n                                else if (feature) {\r\n                                    removeElevationProfileFromCache(feature);\r\n                                }\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.RESULTSPANELCLOSE, function (e) {\r\n                            const control = e.control;\r\n                            if (control.setCurrentFeature) {\r\n                                control.setCurrentFeature(null);\r\n                            }\r\n                        });\r\n\r\n                    resolve(self);\r\n                });\r\n\r\n            }).catch(function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self._activeMode = self.div.querySelector('.tc-ctl-meas-pt');\r\n        }\r\n        if (self.modify) {\r\n            self.modify.div.classList.remove(TC.Consts.classes.COLLAPSED);\r\n        }\r\n        return TC.control.Measure.prototype.displayMode.call(self, mode);\r\n    };\r\n\r\n    ctlProto.setMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self.pointDrawControl.activate();\r\n        }\r\n        return TC.control.Measure.prototype.setMode.call(self, mode);\r\n    };\r\n\r\n    ctlProto.setFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const data = {};\r\n        switch (true) {\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                const firstCoordText = self._1stCoordText.innerHTML;\r\n                const secondCoordText = self._2ndCoordText.innerHTML;\r\n                const elevationText = self._elevationText.innerHTML;\r\n                if (self._1stCoordValue.textContent.trim().length > 0 && self._2ndCoordValue.textContent.trim().length > 0) {\r\n                    data.CRS = self.map.crs;\r\n                    data[firstCoordText.substr(0, firstCoordText.indexOf(':'))] = parseFloat(self._1stCoordValue.dataset.value);\r\n                    data[secondCoordText.substr(0, secondCoordText.indexOf(':'))] = parseFloat(self._2ndCoordValue.dataset.value);\r\n                    if (elevationText) {\r\n                        data[self.getLocaleString('ele')] = parseFloat(self._elevationValue.dataset.value);\r\n                    }\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                if (self._len.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('2dLength')] = self._len.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                if (self._area.innerHTML.trim() !== self.NOMEASURE && self._peri.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('area')] = self._area.innerHTML;\r\n                    data[self.getLocaleString('2dPerimeter')] = self._peri.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const result = {\r\n            units: 'm'\r\n        };\r\n        const measureOptions = {};\r\n        if (self.map.wrap.isGeo()) {\r\n            measureOptions.crs = TC.Cfg.utmCrs;\r\n        }\r\n        switch (true) {\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                result.area = feature.getArea(measureOptions);\r\n                result.perimeter = feature.getLength(measureOptions);\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                result.length = feature.getLength(measureOptions);\r\n                const profile = getElevationProfileFromCache(feature);\r\n                if (profile) {\r\n                    self.renderElevationChart(profile.data);\r\n                }\r\n                else {\r\n                    self.displayElevationProfile(feature.geometry);\r\n                }\r\n                break;\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                result.coords = feature.geometry;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.showMeasures = function (options) {\r\n        const self = this;\r\n        TC.control.Measure.prototype.showMeasures.call(self, options);\r\n        options = options || {};\r\n        var units = options.units;\r\n        const locale = self.map.options.locale || TC.Cfg.locale\r\n        if (options.coords) {\r\n            var precision;\r\n            var coord1, coord2;\r\n            if (options.units === 'm') {\r\n                precision = TC.Consts.METER_PRECISION;\r\n                coord1 = options.coords[0];\r\n                coord2 = options.coords[1];\r\n                self._1stCoordText.innerHTML = 'x: ';\r\n                self._2ndCoordText.innerHTML = 'y: ';\r\n            }\r\n            else {\r\n                precision = TC.Consts.DEGREE_PRECISION;\r\n                coord1 = options.coords[1];\r\n                coord2 = options.coords[0];\r\n                self._1stCoordText.innerHTML = 'lat: ';\r\n                self._2ndCoordText.innerHTML = 'lon: ';\r\n            }\r\n            const factor = Math.pow(10, precision);\r\n            const round = function (val) {\r\n                return Math.round(val * factor) / factor;\r\n            }\r\n            self._1stCoordValue.innerHTML = TC.Util.formatNumber(coord1.toFixed(precision), locale);\r\n            self._1stCoordValue.dataset.value = round(coord1);\r\n            self._2ndCoordValue.innerHTML = TC.Util.formatNumber(coord2.toFixed(precision), locale);\r\n            self._2ndCoordValue.dataset.value = round(coord2);\r\n            if (options.coords.length > 2) {\r\n                const elevation = Math.round(options.coords[2]);\r\n                self._elevationText.innerHTML = self.getLocaleString('ele').toLowerCase() + ': ';\r\n                self._elevationValue.innerHTML = TC.Util.formatNumber(elevation.toFixed(TC.Consts.METER_PRECISION), locale) + ' m';\r\n                self._elevationValue.dataset.value = elevation;\r\n            }\r\n            else {\r\n                self._elevationText.innerHTML = '';\r\n                self._elevationValue.innerHTML = '';\r\n                self._elevationValue.dataset.value = '';\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        TC.control.Measure.prototype.resetValues.call(self);\r\n\r\n        if (self._1stCoordText) {\r\n            self._1stCoordText.innerHTML = self.NOMEASURE;\r\n            self._2ndCoordText.innerHTML = '';\r\n            self._1stCoordValue.innerHTML = '';\r\n            self._1stCoordValue.dataset.value = '';\r\n            self._2ndCoordValue.innerHTML = '';\r\n            self._2ndCoordValue.dataset.value = '';\r\n            self._elevationText.innerHTML = '';\r\n            self._elevationValue.innerHTML = '';\r\n            self._elevationValue.dataset.value = '';\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetDrawWatches = function () {\r\n        const self = this;\r\n        self.drawControls.forEach(function (ctl) {\r\n            ctl\r\n                .setStrokeColorWatch()\r\n                .setStrokeWidthWatch();\r\n        });\r\n    };\r\n\r\n    ctlProto.clear = function () {\r\n        const self = this;\r\n        self.resetValues();\r\n        self.layer.clearFeatures();\r\n        if (self.modify.isActive) {\r\n            self.modify.deactivate();\r\n        }\r\n        if (self.options.displayElevation) {\r\n            self.resetElevationProfile();\r\n            if (self.resultsPanelChart) {\r\n                self.resultsPanelChart.close();\r\n            }\r\n        }\r\n        self._clearBtn.disabled = true;\r\n        self._downloadBtn.disabled = true;\r\n        return self;\r\n    };\r\n\r\n    ctlProto.showSketchDownloadDialog = function (options) {\r\n        const self = this;\r\n\r\n        new Promise(function (resolve, reject) {\r\n            if (!downloadDialog) {\r\n                self.map.addControl('FeatureDownloadDialog').then(ctl => {\r\n                    downloadDialog = ctl;\r\n                    resolve(downloadDialog);\r\n                });\r\n            }\r\n            else {\r\n                resolve(downloadDialog);\r\n            }\r\n        }).then(function (control) {\r\n            var options = {\r\n                title: self.getLocaleString(\"downloadSketch\"),\r\n                fileName: self.getLocaleString('sketch').toLowerCase().replace(' ', '_') + '_' + TC.Util.getFormattedDate(new Date().toString(), true)\r\n            };\r\n\r\n            //const dialog = self._dialogDiv.querySelector('.' + self.CLASS + '-dialog');\r\n            const hasPoints = self.layer.features.some(function (feature) {\r\n                return (TC.feature.Point && feature instanceof TC.feature.Point) ||\r\n                    (TC.feature.MultiPoint && feature instanceof TC.feature.MultiPoint);\r\n            });\r\n            const hasLines = self.layer.features.some(function (feature) {\r\n                return (TC.feature.Polyline && feature instanceof TC.feature.Polyline) ||\r\n                    (TC.feature.MultiPolyline && feature instanceof TC.feature.MultiPolyline);\r\n            });\r\n            const hasPolygons = self.layer.features.some(function (feature) {\r\n                return (TC.feature.Polygon && feature instanceof TC.feature.Polygon) ||\r\n                    (TC.feature.MultiPolygon && feature instanceof TC.feature.MultiPolygon);\r\n            });\r\n            //si solo hay poligonos ocultamos el botón de formato GPX\r\n            if (!hasPoints && !hasLines && hasPolygons)\r\n                options = Object.assign({}, options, { excludedFormats: [\"GPX\"] })\r\n\r\n            //si el control tiene su propia configurtación de elevacion la pasamos para que sobrescriba  a la del mapa\r\n            if (self.options.displayElevation !== true)\r\n                options = Object.assign({}, options, { elevation: Object.assign({}, self.map.elevation && self.map.elevation.options, self.options.displayElevation) });\r\n            else\r\n                options = Object.assign({}, options, { elevation: self.map.elevation && self.map.elevation.options });\r\n\r\n            control.open(self.layer.features, options);\r\n            \r\n        });\r\n        return self;\r\n        \r\n    };\r\n\r\n    ctlProto.onStyleChange = function (e) {\r\n        const self = this;\r\n        var featureCtor;\r\n        switch (e.target.mode) {\r\n            case TC.Consts.geom.POLYGON:\r\n                featureCtor = TC.feature.Polygon;\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n                featureCtor = TC.feature.Polyline;\r\n                break;\r\n            case TC.Consts.geom.POINT:\r\n                featureCtor = TC.feature.Point;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (featureCtor) {\r\n            self.modify.getSelectedFeatures().forEach(function (feature) {\r\n                if (feature instanceof featureCtor) {\r\n                    const styleOptions = {};\r\n                    styleOptions[e.property] = e.value;\r\n                    //feature._originalStyle[e.property] = e.value;\r\n                    feature.setStyle(styleOptions);\r\n                    //clearTimeout(feature._selectionStyleTimeout);\r\n                    //feature._selectionStyleTimeout = setTimeout(function () {\r\n                    //    feature.setStyle(self.modify.styleFunction(feature));\r\n                    //}, self.options.styleChangeDisplayTimeout || 1000);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ctlProto.displayElevationProfile = function (coords) {\r\n        const self = this;\r\n        if (coords.length === 1) {\r\n            // Espera una línea, metemos un segundo punto\r\n            coords = coords.slice();\r\n            coords.push(coords[0]);\r\n        }\r\n        const li = self.map.getLoadingIndicator();\r\n        const waitId = li && li.addWait();\r\n        self.elevation.getElevation({\r\n            crs: self.map.crs,\r\n            coordinates: coords,\r\n            partialCallback: function (elevCoords) {\r\n                li && li.removeWait(waitId);\r\n                var distance = 0.0;\r\n                var maxElevation = Number.NEGATIVE_INFINITY;\r\n                var minElevation = Number.POSITIVE_INFINITY;\r\n                const profile = elevCoords\r\n                    .map(function (point, idx, arr) {\r\n                        const prev = idx === 0 ? point : arr[idx - 1];\r\n                        const dx = point[0] - prev[0];\r\n                        const dy = point[1] - prev[1];\r\n                        distance += Math.sqrt(dx * dx + dy * dy);\r\n                        var ele = point[2];\r\n                        if (typeof ele === 'number') {\r\n                            maxElevation = Math.max(ele, maxElevation);\r\n                            minElevation = Math.min(ele, minElevation);\r\n                        }\r\n                        return [distance, ele];\r\n                    });\r\n\r\n                self.elevationChartData = {\r\n                    x: profile.map(function (elm) {\r\n                        return elm[0];\r\n                    }),\r\n                    ele: profile.map(function (elm) {\r\n                        return elm[1];\r\n                    }),\r\n                    coords: elevCoords\r\n                };\r\n                const elevationGainOptions = {\r\n                    coords: elevCoords\r\n                };\r\n                if (typeof self.options.displayElevation === 'object') {\r\n                    elevationGainOptions.hillDeltaThreshold = self.options.displayElevation.hillDeltaThreshold;\r\n                }\r\n                TC.Util.extend(self.elevationChartData, TC.tool.Elevation.getElevationGain(elevationGainOptions));\r\n\r\n                // Cacheamos el perfil\r\n                const matchingFeature = self.layer.features\r\n                    .filter(function (feat) {\r\n                        return TC.feature.Polyline && feat instanceof TC.feature.Polyline;\r\n                    })\r\n                    .filter(function (line) {\r\n                        for (var i = 0, len = line.geometry.length; i < len; i++) {\r\n                            const coord = coords[i];\r\n                            const lineCoord = line.geometry[i];\r\n                            if (!coord || coord[0] !== lineCoord[0] || coord[1] !== lineCoord[1]) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    })[0];\r\n                if (matchingFeature) {\r\n                    cacheElevationProfile(matchingFeature, self.elevationChartData);\r\n                }\r\n\r\n                if (self.resultsPanelChart) {\r\n                    self.renderElevationChart();\r\n                }\r\n                else {\r\n                    self.createChartPanel().then(function (resultsPanelChart) {\r\n                        self.resultsPanelChart.renderPromise().then(function () {\r\n                            self.renderElevationChart();\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n        }).catch(function (error) {\r\n            self.resetElevationProfile();\r\n            li && li.removeWait(waitId);\r\n        });\r\n    };\r\n\r\n    ctlProto.createChartPanel = function () {\r\n        const self = this;\r\n\r\n        const resultsPanelOptions = {\r\n            id: self.getUID(),\r\n            content: \"chart\",\r\n            titles: {\r\n                main: self.getLocaleString(\"geo.trk.chart.chpe\"),\r\n                max: self.getLocaleString(\"geo.trk.chart.chpe\")\r\n            },\r\n            chart: {\r\n                ctx: self,\r\n                onmouseout: ctlProto.removeElevationTooltip,\r\n                tooltip: ctlProto.getElevationTooltip\r\n            }\r\n        };\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            var addControlPromise;\r\n            const addResultsPanelChart = function (controlContainer) {\r\n                resultsPanelOptions.position = controlContainer.POSITION.RIGHT;\r\n                addControlPromise = controlContainer.addControl('resultsPanel', resultsPanelOptions);\r\n            };\r\n\r\n            if (self.options.displayElevation.displayOn) {\r\n                var controlContainer = self.map.getControlsByClass('TC.control.' + self.options.displayElevation.displayOn[0].toUpperCase() + self.options.displayElevation.displayOn.substring(1))[0];\r\n                if (!controlContainer) {\r\n                    self.map.addControl(self.options.displayElevation.displayOn).then(addResultsPanelChart);\r\n                } else {\r\n                    addResultsPanelChart(controlContainer);\r\n                }\r\n            } else {\r\n                resultsPanelOptions.div = document.createElement('div');\r\n                self.map.div.appendChild(resultsPanelOptions.div);\r\n                addControlPromise = self.map.addControl('resultsPanel', resultsPanelOptions);\r\n            }\r\n\r\n            addControlPromise.then(function (resultsPanelChart) {\r\n                resultsPanelChart.caller = self;\r\n                self.resultsPanelChart = resultsPanelChart;\r\n                self._decorateChartPanel();\r\n                resolve(resultsPanelChart);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto._decorateChartPanel = function () {\r\n        const self = this;\r\n        self.resultsPanelChart.setCurrentFeature = function (feature) {\r\n            const that = this;\r\n            if (that.currentFeature) {\r\n                that.currentFeature.toggleSelectedStyle(false);\r\n            }\r\n            that.currentFeature = feature;\r\n            if (feature) {\r\n                feature.toggleSelectedStyle(true);\r\n            }\r\n        };\r\n    };\r\n\r\n    ctlProto.renderElevationChart = function (profileData) {\r\n        const self = this;\r\n        self.elevationChartData = profileData || self.elevationChartData;\r\n        if (self.resultsPanelChart && self.elevationProfileActive) {\r\n            self.resultsPanelChart.caller = self;\r\n            self.resultsPanelChart.openChart(self.elevationChartData);\r\n            if (!self.resultsPanelChart.isMinimized()) {\r\n                self.resultsPanelChart.show();\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.getElevationTooltip = function (d) {\r\n        const self = this;\r\n        self.resultsPanelChart.wrap.showElevationMarker({\r\n            data: d,\r\n            layer: self.layer,\r\n            coords: self.elevationChartData.coords\r\n        });\r\n\r\n        return self.resultsPanelChart.getElevationChartTooltip(d);\r\n    };\r\n\r\n    ctlProto.removeElevationTooltip = function () {\r\n        var self = this;\r\n        self.resultsPanelChart.wrap.hideElevationMarker();\r\n    }\r\n\r\n    ctlProto.activateElevationProfile = function () {\r\n        const self = this;\r\n        self.elevationProfileActive = true;\r\n        self._elevProfileBtn.classList.add(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('deactivateElevationProfile'));\r\n        var profileDrawn = false;\r\n        if (self.lineDrawControl.historyIndex > 1) {\r\n            self.displayElevationProfile(self.lineDrawControl.history.slice(0, self.lineDrawControl.historyIndex));\r\n            profileDrawn = true;\r\n        }\r\n        else {\r\n            const features = self.modify.getActiveFeatures().filter(function (feat) {\r\n                return TC.feature.Polyline && feat instanceof TC.feature.Polyline;\r\n            });\r\n            if (features.length) {\r\n                const feature = features[features.length - 1];\r\n                self.displayElevationProfile(feature.geometry);\r\n                profileDrawn = true;\r\n            }\r\n        }\r\n        if (!profileDrawn) {\r\n            self.resetElevationProfile();\r\n        }\r\n        if (self.resultsPanelChart) {\r\n            self.resultsPanelChart.show();\r\n        }\r\n    };\r\n\r\n    ctlProto.deactivateElevationProfile = function () {\r\n        const self = this;\r\n        self.elevationProfileActive = false;\r\n        self._elevProfileBtn.classList.remove(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('activateElevationProfile'));\r\n        self.resetElevationProfile();\r\n        if (self.resultsPanelChart) {\r\n            self.resultsPanelChart.close();\r\n        }\r\n    };\r\n\r\n    ctlProto.resetElevationProfile = function () {\r\n        const self = this;\r\n        if (self.options.displayElevation && self.resultsPanelChart) {\r\n            self.elevationChartData = {\r\n                x: [0],\r\n                ele: [0],\r\n                coords: [0, 0, 0],\r\n                upHill: 0,\r\n                downHill: 0\r\n            };\r\n            self.resultsPanelChart.openChart(self.elevationChartData);\r\n        }\r\n    };\r\n\r\n})();"]}