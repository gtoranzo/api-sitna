{"version":3,"sources":["control/DrawMeasureModify.js"],"names":["TC","control","Measure","syncLoadJS","apiLocation","DrawMeasureModify","self","this","apply","arguments","_dialogDiv","Util","getDiv","options","dialogDiv","window","$","_$dialogDiv","document","body","appendChild","cs","_classSelector","CLASS","_selectors","ELEVATION_CHECKBOX","persistentDrawControls","renderPromise","then","_1stCoordText","div","querySelector","_2ndCoordText","_1stCoordValue","_2ndCoordValue","_elevationText","_elevationValue","displayElevation","elevationProfileActive","loadJS","tool","Elevation","elevationOptions","elevation","inherit","ctlProto","prototype","Consts","event","RESULTSPANELCLOSE","FEATURESSELECT","elevationProfileCache","getElevationProfileFromCache","feature","filter","elm","removeElevationProfileFromCache","featIdx","reduce","prev","cur","idx","splice","template","isDebug","dust","register","body_0","chk","ctx","w","h","$key","__dustBody","s","get","block","body_1","f","x","body_2","render","callback","promise","_set1stRenderPromise","call","_clearBtn","addEventListener","CLICK","e","confirm","getLocaleString","clear","_downloadBtn","showSketchDownloadDialog","_elevProfileBtn","deactivateElevationProfile","activateElevationProfile","style","display","isFunction","renderOptions","checkboxId","getUID","getRenderedHtml","html","endExport","format","closeModal","exportOptions","fileName","toLowerCase","replace","getFormattedDate","Date","toString","includeElevation","checked","interpolateCoords","value","li","map","getLoadingIndicator","waitId","addWait","elevOptions","crs","features","layer","feat","getGeometryStride","Point","clone","maxCoordQuantity","sampleNumber","resolution","parseFloat","setGeometry","forEach","exportFeatures","catch","error","message","errors","MAX_COORD_QUANTITY_EXCEEDED","alert","finally","removeWait","getCoordsArray","coord","length","setCoords","geometry","innerHTML","EventTarget","listenerBySelector","classList","toggle","classes","HIDDEN","target","dataset","GPX","some","Polygon","Promise","resolve","reject","drawPointsId","modifyId","all","layerPromise","objects","title","_modifyPromise","addControl","id","modify","on","resultsPanelChart","currentFeature","setCurrentFeature","showMeasures","getFeatureMeasureData","_originalStyle","getStyle","displayMode","geom","POLYGON","drawPolygons","setStrokeColorWatch","strokeColor","setStrokeWidthWatch","strokeWidth","Polyline","POLYLINE","drawLines","profile","renderElevationChart","data","POINT","drawPoints","setFontColorWatch","fontColor","setFontSizeWatch","fontSize","FEATURESUNSELECT","getSelectedFeatures","resetDrawWatches","resetElevationProfile","close","FEATUREMODIFY","setMeasures","measureData","setFeatureMeasureData","getControlsByClass","pu","isVisible","hide","CONTROLDEACTIVATE","FEATURECLICK","activeControl","Draw","Modify","indexOf","ctl","isMinimized","maximize","displayElevationProfile","_drawLinesPromise","DRAWSTART","resetValues","DRAWUNDO","DRAWREDO","history","slice","historyIndex","DRAWEND","coords","lastCoord","point","push","STYLECHANGE","onStyleChange","_drawPolygonsPromise","_drawPointsPromise","mode","persistent","styleTools","containerControl","drawControls","updateChanges","units","wrap","isGeo","DRAWCANCEL","setTimeout","cancel","exportsState","setMode","FEATUREADD","displayLabelText","label","disabled","FEATUREREMOVE","FEATURESCLEAR","_activeMode","remove","COLLAPSED","activate","firstCoordText","secondCoordText","elevationText","textContent","trim","CRS","substr","setData","_len","NOMEASURE","_area","_peri","result","measureOptions","Cfg","utmCrs","area","getArea","perimeter","getLength","locale","precision","coord1","coord2","METER_PRECISION","DEGREE_PRECISION","factor","Math","pow","round","val","formatNumber","toFixed","clearFeatures","isActive","deactivate","dialog","hasPoints","MultiPoint","hasLines","MultiPolyline","hasPolygons","MultiPolygon","showModal","featureCtor","styleOptions","property","setStyle","getElevation","coordinates","elevCoords","distance","maxElevation","Number","NEGATIVE_INFINITY","minElevation","POSITIVE_INFINITY","arr","dx","dy","sqrt","ele","max","min","elevationProfileData","elevationGainOptions","hillDeltaThreshold","extend","getElevationGain","matchingFeature","line","i","len","lineCoord","cacheElevationProfile","createChartPanel","resultsPanelOptions","content","titles","main","chart","onmouseout","removeElevationTooltip","tooltip","getElevationTooltip","addControlPromise","addResultsPanelChart","controlContainer","side","SIDE","RIGHT","displayOn","toUpperCase","substring","createElement","caller","_decorateChartPanel","that","toggleSelectedStyle","profileData","openChart","show","d","showElevationMarker","getElevationChartTooltip","hideElevationMarker","add","ACTIVE","setAttribute","profileDrawn","getActiveFeatures","upHill","downHill"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.control.Measure) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/control/Measure');\r\n}\r\n\r\nTC.control.DrawMeasureModify = function () {\r\n    var self = this;\r\n\r\n    TC.control.Measure.apply(self, arguments);\r\n\r\n    self._dialogDiv = TC.Util.getDiv(self.options.dialogDiv);\r\n    if (window.$) {\r\n        self._$dialogDiv = $(self._dialogDiv);\r\n    }\r\n    if (!self.options.dialogDiv) {\r\n        document.body.appendChild(self._dialogDiv);\r\n    }\r\n\r\n    const cs = self._classSelector = '.' + self.CLASS;\r\n    self._selectors = {\r\n        ELEVATION_CHECKBOX: cs + '-dialog-elev input[type=checkbox]'\r\n    };\r\n\r\n    self.persistentDrawControls = true;\r\n\r\n    self.renderPromise().then(function () {\r\n        self._1stCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-1-t');\r\n        self._2ndCoordText = self.div.querySelector('.tc-ctl-meas-val-coord-2-t');\r\n        self._1stCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-1-v');\r\n        self._2ndCoordValue = self.div.querySelector('.tc-ctl-meas-val-coord-2-v');\r\n        self._elevationText = self.div.querySelector('.tc-ctl-meas-val-coord-ele-t');\r\n        self._elevationValue = self.div.querySelector('.tc-ctl-meas-val-coord-ele-v');\r\n    });\r\n\r\n    if (self.options.displayElevation) {        \r\n        self.elevationProfileActive = true;\r\n        TC.loadJS(\r\n            !TC.tool || !TC.tool.Elevation,\r\n            TC.apiLocation + 'TC/tool/Elevation',\r\n            function () {\r\n                const elevationOptions = typeof self.options.displayElevation === 'boolean' ? {} : self.options.displayElevation;\r\n                self.elevation = new TC.tool.Elevation(elevationOptions);\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\nTC.inherit(TC.control.DrawMeasureModify, TC.control.Measure);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.DrawMeasureModify.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-dmm';\r\n\r\n    var _dataKeys = {\r\n        VALUE: 'tcValue'\r\n    };\r\n\r\n\r\n    TC.Consts.event.RESULTSPANELCLOSE = TC.Consts.event.RESULTSPANELCLOSE || 'resultspanelclose.tc';\r\n    TC.Consts.event.FEATURESSELECT = TC.Consts.event.FEATURESSELECT || \"featuresselect.tc\";\r\n\r\n    const elevationProfileCache = [];\r\n\r\n    const getElevationProfileFromCache = function (feature) {\r\n        return elevationProfileCache.filter(function (elm) {\r\n            return elm.feature === feature;\r\n        })[0];\r\n    };\r\n\r\n    const cacheElevationProfile = function (feature, data) {\r\n        var result = getElevationProfileFromCache(feature);\r\n        if (!result) {\r\n            result = {\r\n                feature: feature\r\n            };\r\n            elevationProfileCache.push(result);\r\n        }\r\n        result.data = data;\r\n        return result;\r\n    };\r\n\r\n    const removeElevationProfileFromCache = function (feature) {\r\n        const featIdx = elevationProfileCache.reduce(function (prev, cur, idx) {\r\n            if (cur.feature === feature) {\r\n                return idx;\r\n            }\r\n            return prev;\r\n        }, -1);\r\n        if (featIdx >= 0) {\r\n            elevationProfileCache.splice(featIdx, 1);\r\n        }\r\n    };\r\n\r\n    const clearElevationProfileCache = function () {\r\n        elevationProfileCache.length = 0;\r\n    };\r\n\r\n    ctlProto.template = {};\r\n    if (TC.isDebug) {\r\n        ctlProto.template[ctlProto.CLASS] = TC.apiLocation + \"TC/templates/DrawMeasureModify.html\";\r\n        ctlProto.template[ctlProto.CLASS + '-dialog'] = TC.apiLocation + \"TC/templates/DrawMeasureModifyDialog.html\";\r\n    }\r\n    else {\r\n        ctlProto.template[ctlProto.CLASS] = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<h2>\").h(\"i18n\", ctx, {}, { \"$key\": \"drawAndMeasure\" }).w(\"</h2><div class=\\\"tc-ctl-meas-select\\\"><form><label class=\\\"tc-ctl-meas-btn-pt\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"point\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"points\" }).w(\"</span></label><label class=\\\"tc-ctl-meas-btn-len\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"polyline\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"lines\" }).w(\"</span></label><label class=\\\"tc-ctl-meas-btn-area\\\"><input type=\\\"radio\\\" name=\\\"mode\\\" value=\\\"polygon\\\" /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"polygons\" }).w(\"</span></label></form></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-pt tc-hidden\\\"><div class=\\\"tc-ctl-meas-point\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"search.list.coordinates\" }).w(\" <span class=\\\"tc-ctl-meas-val-coord\\\"><span class=\\\"tc-ctl-meas-val-coord-1-t\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-1-v\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-2-t\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-2-v\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-ele-t\\\"></span> <span class=\\\"tc-ctl-meas-val-coord-ele-v\\\"></span></span></div></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-len tc-hidden\\\"><div class=\\\"tc-ctl-meas-line\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"2dLength\" }).w(\": <span class=\\\"tc-ctl-meas-val-len\\\"></span><button class=\\\"tc-ctl-meas-prof-btn tc-active\\\" title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"deactivateElevationProfile\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"geo.trk.chart.chpe\" }).w(\"</button></div></div><div class=\\\"tc-ctl-meas-mode tc-ctl-meas-area tc-hidden\\\"><div class=\\\"tc-ctl-meas-polygon\\\"></div><div class=\\\"tc-ctl-meas-txt\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"area\" }).w(\": <span class=\\\"tc-ctl-meas-val-area\\\"></span>, \").h(\"i18n\", ctx, {}, { \"$key\": \"2dPerimeter\" }).w(\": <span class=\\\"tc-ctl-meas-val-peri\\\"></span></div></div><div class=\\\"tc-ctl-dmm-tool\\\"><div class=\\\"tc-ctl-dmm-mod\\\"></div><div class=\\\"tc-ctl-dmm-cmd\\\"><button class=\\\"tc-ctl-dmm-btn-clr\\\" disabled title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"deleteAll\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"deleteAll\" }).w(\"</button><button class=\\\"tc-ctl-dmm-btn-dl\\\" disabled title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"download\" }).w(\"\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"download\" }).w(\"...</button></div></div>\"); } body_0.__dustBody = !0; return body_0 };\r\n        ctlProto.template[ctlProto.CLASS + '-dialog'] = function () { dust.register(ctlProto.CLASS + '-dialog', body_0); function body_0(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-dmm-dialog tc-modal\\\"><div class=\\\"tc-modal-background tc-modal-close\\\"></div><div class=\\\"tc-modal-window\\\"><div class=\\\"tc-modal-header\\\"><h3>\").h(\"i18n\", ctx, {}, { \"$key\": \"downloadSketch\" }).w(\"</h3><div class=\\\"tc-modal-close\\\"></div></div><div class=\\\"tc-modal-body\\\">\").s(ctx.get([\"elevation\"], false), ctx, { \"block\": body_1 }, {}).w(\"<div class=\\\"tc-ctl-dmm-dialog-dl\\\"><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-kml\\\" data-format=\\\"KML\\\" title=\\\"KML\\\">KML</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-gml\\\" data-format=\\\"GML\\\" title=\\\"GML\\\">GML</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-geojson\\\" data-format=\\\"GeoJSON\\\" title=\\\"GeoJSON\\\">GeoJSON</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-wkt\\\" data-format=\\\"WKT\\\" title=\\\"WKT\\\">WKT</button><button class=\\\"tc-button tc-btn-dl tc-ctl-dmm-dl-btn-gpx\\\" data-format=\\\"GPX\\\" title=\\\"GPX\\\">GPX</button></div></div></div></div>\"); } body_0.__dustBody = !0; function body_1(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-dmm-dialog-elev\\\"><input id=\\\"\").f(ctx.get([\"checkboxId\"], false), ctx, \"h\").w(\"\\\" type=\\\"checkbox\\\" checked /><label for=\\\"\").f(ctx.get([\"checkboxId\"], false), ctx, \"h\").w(\"\\\" class=\\\"tc-ctl-ftools-dialog-elev-label\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"includeElevations\" }).w(\"</label></div>\").x(ctx.get([\"resolution\"], false), ctx, { \"block\": body_2 }, {}); } body_1.__dustBody = !0; function body_2(chk, ctx) { return chk.w(\"<div class=\\\"tc-ctl-dmm-dialog-ip\\\"><h4>\").h(\"i18n\", ctx, {}, { \"$key\": \"interpolateCoordsFromElevProfile\" }).w(\"</h4><label><input type=\\\"radio\\\" name=\\\"ip-coords\\\" value=\\\"0\\\" checked /><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"no\" }).w(\"</span></label><label><input type=\\\"radio\\\" name=\\\"ip-coords\\\" value=\\\"1\\\"/><span>\").h(\"i18n\", ctx, {}, { \"$key\": \"yes\" }).w(\"</span></label><div class=\\\"tc-ctl-dmm-dialog-ip-m tc-hidden\\\">\").h(\"i18n\", ctx, {}, { \"$key\": \"interpolateEveryXMeters.1\" }).w(\"<input type=\\\"number\\\" min=\\\"1\\\" step=\\\"1\\\" class=\\\"tc-textbox\\\" value=\\\"\").f(ctx.get([\"resolution\"], false), ctx, \"h\").w(\"\\\" />\").h(\"i18n\", ctx, {}, { \"$key\": \"interpolateEveryXMeters.2\" }).w(\"</div></div>\"); } body_2.__dustBody = !0; return body_0 };\r\n    }\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        const promise = self._set1stRenderPromise(TC.control.Measure.prototype.render.call(self, function () {\r\n            self._clearBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-clr');\r\n            self._clearBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                TC.confirm(self.getLocaleString('deleteAll.confirm'), function () {\r\n                    self.clear();\r\n                });\r\n            });\r\n            self._downloadBtn = self.div.querySelector('.tc-ctl-dmm-cmd button.tc-ctl-dmm-btn-dl');\r\n            self._downloadBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.showSketchDownloadDialog();\r\n            });\r\n\r\n            self._elevProfileBtn = self.div.querySelector('.tc-ctl-meas-prof-btn');\r\n            self._elevProfileBtn.addEventListener(TC.Consts.event.CLICK, function (e) {\r\n                self.elevationProfileActive ? self.deactivateElevationProfile() : self.activateElevationProfile();\r\n            });\r\n\r\n            if (!self.options.displayElevation) {\r\n                self._elevProfileBtn.style.display = 'none';\r\n            }\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n\r\n        const renderOptions = {\r\n            checkboxId: self.getUID(),\r\n            elevation: self.options.displayElevation\r\n        };\r\n        self.getRenderedHtml(self.CLASS + '-dialog', renderOptions, function (html) {\r\n            const endExport = function (format) {\r\n                TC.Util.closeModal();\r\n                const exportOptions = {\r\n                    fileName: self.getLocaleString('sketch').toLowerCase().replace(' ', '_') + '_' + TC.Util.getFormattedDate(new Date().toString(), true),\r\n                    format: format\r\n                };\r\n                const includeElevation = self.options.displayElevation ? self._dialogDiv.querySelector(self._selectors.ELEVATION_CHECKBOX).checked : false;\r\n                if (includeElevation) {\r\n                    const interpolateCoords = self._dialogDiv.querySelector('input[type=radio][name=ip-coords]:checked').value === \"1\";\r\n                    const li = self.map.getLoadingIndicator();\r\n                    const waitId = li && li.addWait();\r\n\r\n                    const elevOptions = {\r\n                        crs: self.map.crs,\r\n                        features: self.layer.features.map(function (feat) {\r\n                            // Solo mantenemos las features de las que hay que obtener elevación:\r\n                            // - Las que no tienen elevación\r\n                            // - Cuando hay interpolación, todas las líneas y los polígonos\r\n                            if (feat.getGeometryStride() >= 3) {\r\n                                if (!interpolateCoords || (TC.feature.Point && feat instanceof TC.feature.Point)) {\r\n                                    return null;\r\n                                }\r\n                            }\r\n                            return feat.clone();\r\n                        }),\r\n                        maxCoordQuantity: self.options.displayElevation.maxCoordQuantity,\r\n                        sampleNumber: 0 // No queremos determinar el número de muestras\r\n                    };\r\n                    if (interpolateCoords) {\r\n                        elevOptions.resolution = parseFloat(self._dialogDiv.querySelector('.' + self.CLASS + '-dialog-ip-m input[type=number]').value) || self.options.displayElevation.resolution;\r\n                    }\r\n                    self.elevation.setGeometry(elevOptions)\r\n                        .then(function (features) {\r\n                            // Volvemos a añadir las features de las que no hemos pedido elevación\r\n                            features.forEach(function (feat, idx) {\r\n                                if (!feat) {\r\n                                    features[idx] = self.layer.features[idx];\r\n                                }\r\n                            });\r\n                            self.map.exportFeatures(features, exportOptions);\r\n                        })\r\n                        .catch(function (error) {\r\n                            if (error.message === TC.tool.Elevation.errors.MAX_COORD_QUANTITY_EXCEEDED) {\r\n                                TC.alert(self.getLocaleString('tooManyCoordinatesForElevation.warning'));\r\n                                return;\r\n                            }\r\n                            TC.error(self.getLocaleString('elevation.error'));\r\n                        })\r\n                        .finally(function () {\r\n                            li && li.removeWait(waitId);\r\n                        });\r\n                }\r\n                else {\r\n                    var features;\r\n                    if (self.options.displayElevation && !includeElevation) { // Hay que quitar elevaciones\r\n                        features = self.layer.features\r\n                            .map(function (feat) {\r\n                                var f = feat.clone();\r\n                                if (f.getGeometryStride() > 2) {\r\n                                    f.getCoordsArray().forEach(function (coord) {\r\n                                        coord.length = 2;\r\n                                    });\r\n                                    f.setCoords(f.geometry);\r\n                                }\r\n                                return f;\r\n                            });\r\n                    }\r\n                    else {\r\n                        features = self.layer.features;\r\n                    }\r\n                    self.map.exportFeatures(features, exportOptions);\r\n                }\r\n            };\r\n            self._dialogDiv.innerHTML = html;\r\n            self._dialogDiv.addEventListener('change', TC.EventTarget.listenerBySelector(self._selectors.ELEVATION_CHECKBOX, function (e) {\r\n                self.showSketchDownloadDialog(); // Recalculamos todo el aspecto del diálogo de descarga\r\n            }));\r\n            self._dialogDiv.addEventListener('change', TC.EventTarget.listenerBySelector('input[type=radio][name=ip-coords]', function (e) {\r\n                const ipMessage = self._dialogDiv.querySelector('.' + self.CLASS + '-dialog-ip-m');\r\n                ipMessage.classList.toggle(TC.Consts.classes.HIDDEN, e.target.value === '0');\r\n            }));\r\n            self._dialogDiv.addEventListener(TC.Consts.event.CLICK, TC.EventTarget.listenerBySelector('button[data-format]', function (e) {\r\n                const format = e.target.dataset.format;\r\n                if (format === TC.Consts.format.GPX) {\r\n                    if (self.layer.features.some(function (feature) {\r\n                        return TC.feature.Polygon && feature instanceof TC.feature.Polygon;\r\n                    })) {\r\n                        TC.confirm(self.getLocaleString('gpxNotCompatible.confirm'), function () {\r\n                            endExport(format);\r\n                        });\r\n                    }\r\n                    else {\r\n                        endExport(format);\r\n                    }\r\n                }\r\n                else {\r\n                    endExport(format);\r\n                }\r\n            }));\r\n        });\r\n\r\n        return promise;\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            TC.control.Measure.prototype.register.call(self, map).then(function () {\r\n                const drawPointsId = self.getUID();\r\n                const modifyId = self.getUID();\r\n\r\n                Promise.all([self.layerPromise, self.renderPromise()]).then(function (objects) {\r\n                    const layer = objects[0];\r\n                    layer.title = self.getLocaleString('sketch');\r\n\r\n                    self._modifyPromise = map.addControl('modify', {\r\n                        id: modifyId,\r\n                        div: self.div.querySelector('.' + self.CLASS + '-mod'),\r\n                        layer: layer\r\n                    });\r\n\r\n                    self._modifyPromise.then(function (modify) {\r\n\r\n                        self.modify = modify;\r\n                        modify\r\n                            .on(TC.Consts.event.FEATURESSELECT, function (e) {\r\n                                if (self.resultsPanelChart && !e.features.some(function (feature) {\r\n                                    return self.resultsPanelChart.currentFeature === feature;\r\n                                })) {\r\n                                    self.resultsPanelChart.setCurrentFeature(null);\r\n                                }\r\n                                const feature = e.features[e.features.length - 1];\r\n                                if (feature) {\r\n                                    self.showMeasures(self.getFeatureMeasureData(feature));\r\n                                    const style = feature._originalStyle || feature.getStyle();\r\n                                    switch (true) {\r\n                                        case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                                            self.displayMode(TC.Consts.geom.POLYGON);\r\n                                            self.drawPolygons\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            break;\r\n                                        case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                                            self.displayMode(TC.Consts.geom.POLYLINE);\r\n                                            self.drawLines\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            const profile = getElevationProfileFromCache(feature);\r\n                                            if (profile) {\r\n                                                self.resultsPanelChart.setCurrentFeature(feature);\r\n                                                self.renderElevationChart(profile.data);\r\n                                            }\r\n                                            break;\r\n                                        case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                                            self.displayMode(TC.Consts.geom.POINT);\r\n                                            self.drawPoints\r\n                                                .setStrokeColorWatch(style.strokeColor)\r\n                                                .setStrokeWidthWatch(style.strokeWidth);\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                    self.modify\r\n                                        .setFontColorWatch(style.fontColor)\r\n                                        .setFontSizeWatch(style.fontSize);\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATURESUNSELECT, function (e) {\r\n                                const features = self.modify.getSelectedFeatures();\r\n                                if (!features.length) {\r\n                                    self.resetDrawWatches();\r\n                                }\r\n                                self.resetElevationProfile();\r\n                                if (self.resultsPanelChart) {\r\n                                    self.resultsPanelChart.close();\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATUREMODIFY, function (e) {\r\n                                if (e.layer === self.layer) {\r\n                                    removeElevationProfileFromCache(e.feature);\r\n                                    const setMeasures = function (feature) {\r\n                                        const measureData = self.getFeatureMeasureData(feature);\r\n                                        self.showMeasures(measureData);\r\n                                        self.setFeatureMeasureData(feature);\r\n                                    };\r\n                                    setMeasures(e.feature);\r\n\r\n                                    // Si es un punto metemos la elevación en la geometría (porque la mostramos en las medidas)\r\n                                    if (self.options.displayElevation && TC.feature.Point && e.feature instanceof TC.feature.Point) {\r\n                                        self.elevation.setGeometry({\r\n                                            features: [e.feature],\r\n                                            crs: self.map.crs\r\n                                        }).then(function (features) {\r\n                                            setMeasures(features[0]);\r\n                                        });\r\n                                    }\r\n\r\n                                    const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                                    popups.forEach(function (pu) {\r\n                                        if (pu.isVisible() && pu.currentFeature === e.feature) {\r\n                                            pu.hide();\r\n                                        }\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                        map\r\n                            .on(TC.Consts.event.CONTROLDEACTIVATE, function (e) {\r\n                                const control = e.control;\r\n                                if (control === self.modify) {\r\n                                    self.resetDrawWatches();\r\n                                    self.resetElevationProfile();\r\n                                    if (self.resultsPanelChart) {\r\n                                        self.resultsPanelChart.setCurrentFeature(null);\r\n                                        self.resultsPanelChart.close();\r\n                                    }\r\n                                }\r\n                                else if (control === self.drawLines) {\r\n                                    self.resetElevationProfile();\r\n                                    if (self.resultsPanelChart) {\r\n                                        self.resultsPanelChart.close();\r\n                                    }\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.FEATURECLICK, function (e) {\r\n                                const feature = e.feature;\r\n                                // No queremos que se muestre el perfil de la feature ya dibujada si estamos dibujando o seleccionando otra\r\n                                if (!(map.activeControl instanceof TC.control.Draw || map.activeControl instanceof TC.control.Modify)) {\r\n                                    if (TC.feature.Polyline && feature instanceof TC.feature.Polyline && self.layer.features.indexOf(feature) >= 0) {\r\n                                        if (self.elevationProfileActive) {\r\n                                            if (self.resultsPanelChart) {\r\n                                                self.resultsPanelChart.setCurrentFeature(feature);\r\n                                            }\r\n                                            map.getControlsByClass('TC.control.Popup').forEach(function (ctl) {\r\n                                                if (ctl.currentFeature === feature) {\r\n                                                    ctl.hide();\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                        const profile = getElevationProfileFromCache(feature);\r\n                                        if (self.resultsPanelChart && self.resultsPanelChart.isMinimized()) {\r\n                                            self.resultsPanelChart.maximize();\r\n                                        }\r\n                                        if (profile) {\r\n                                            self.renderElevationChart(profile.data);\r\n                                        }\r\n                                        else {\r\n                                            self.displayElevationProfile(feature.geometry);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                    });\r\n\r\n                    self._drawLinesPromise.then(function (drawLines) {\r\n                        drawLines\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                //self.resetElevationProfile();\r\n                                if (self.resultsPanelChart && self.resultsPanelChart.currentFeature) {\r\n                                    self.resultsPanelChart.setCurrentFeature(null);\r\n                                }\r\n                                self.resetValues();\r\n                            })\r\n                            .on(TC.Consts.event.DRAWUNDO + ' ' + TC.Consts.event.DRAWREDO, function () {\r\n                                const drawLines = this;\r\n                                self.displayElevationProfile(drawLines.history.slice(0, drawLines.historyIndex));\r\n                            })\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                if (self.resultsPanelChart) {\r\n                                    self.resultsPanelChart.currentFeature = e.feature;\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.POINT, function (e) {\r\n                                const drawLines = this;\r\n                                const coords = drawLines.history.slice(0, drawLines.historyIndex);\r\n                                const lastCoord = coords[coords.length - 1];\r\n                                if (lastCoord[0] !== e.point[0] || lastCoord[1] !== e.point[1]) {\r\n                                    coords.push(e.point);\r\n                                }\r\n                                self.displayElevationProfile(coords);\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });\r\n\r\n                    self._drawPolygonsPromise.then(function (drawPolygons) {\r\n                        drawPolygons\r\n                            .on(TC.Consts.event.DRAWSTART, function () {\r\n                                self.resetValues();\r\n                            })\r\n                            //.on(TC.Consts.event.DRAWEND, function (e) {\r\n                            //    if (self.options.displayElevation) {\r\n                            //        self.elevation.setGeometry({\r\n                            //            features: [e.feature],\r\n                            //            crs: self.map.crs\r\n                            //        });\r\n                            //    }\r\n                            //})\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                    });\r\n\r\n                    self._drawPointsPromise = map.addControl('draw', {\r\n                        id: drawPointsId,\r\n                        div: self.div.querySelector('.' + TC.control.Measure.prototype.CLASS + '-point'),\r\n                        mode: TC.Consts.geom.POINT,\r\n                        persistent: self.persistentDrawControls,\r\n                        styleTools: true,\r\n                        layer: self.layer\r\n                    });\r\n\r\n                    self._drawPointsPromise.then(function (drawPoints) {\r\n\r\n                        drawPoints.containerControl = self;\r\n                        self.drawControls.push(drawPoints);\r\n                        self.drawPoints = drawPoints;\r\n\r\n                        self.resetValues();\r\n\r\n                        drawPoints\r\n                            .on(TC.Consts.event.DRAWEND, function (e) {\r\n                                const updateChanges = function (feat) {\r\n                                    self.showMeasures({ coords: feat.geometry, units: map.wrap.isGeo() ? 'degrees' : 'm' });\r\n                                    self.setFeatureMeasureData(feat);\r\n                                };\r\n                                updateChanges(e.feature);\r\n                                if (self.options.displayElevation) {\r\n                                    self.elevation.setGeometry({\r\n                                        features: [e.feature],\r\n                                        crs: self.map.crs\r\n                                    }).then(function (features) {\r\n                                        updateChanges(features[0]);\r\n                                    })\r\n                                }\r\n                            })\r\n                            .on(TC.Consts.event.DRAWCANCEL, function (e) {\r\n                                // Alerta de condición de carrera si no ponemos un timeout:\r\n                                // 1- Se llama a cancel de un control Draw.\r\n                                // 2- Se llama a deactivate (como es mediante cancel, no se se corta la cadena de activación controles).\r\n                                // 3- Si el control activo anterior era otro de los modos de dibujo de Measure, se activa.\r\n                                // 4- Se llama a cancel desde aquí.\r\n                                // 5- Se llama a deactivate del control que acabamos de activar en 3.\r\n                                // El activate de 3 y el deactivate de 5 sobre el mismo control entran en condición de carrera al crear/destruir la interaction\r\n                                // por tanto se puede quedar en un estado inconsistente. Para evitar eso, separamos 3 de 5 por el siguiente timeout.\r\n                                setTimeout(function () {\r\n                                    self.cancel();\r\n                                }, 100);\r\n                            })\r\n                            .on(TC.Consts.event.STYLECHANGE, function (e) {\r\n                                self.onStyleChange(e);\r\n                            });\r\n                        // Desactivamos el método exportState que ya se encarga el control padre de ello\r\n                        drawPoints.exportsState = false;\r\n                    });\r\n\r\n                    self.setMode(self.options.mode);\r\n\r\n                    map\r\n                        .on(TC.Consts.event.FEATUREADD, function (e) {\r\n                            const layer = e.layer;\r\n                            const feature = e.feature;\r\n                            if (layer === self.layer) {\r\n                                self.setFeatureMeasureData(feature);\r\n                                \r\n                                self._modifyPromise.then(function (modify) {\r\n                                    modify.displayLabelText(feature.getStyle().label);\r\n                                });\r\n                                self._clearBtn.disabled = false;\r\n                                self._downloadBtn.disabled = false;\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.FEATUREREMOVE + ' ' + TC.Consts.event.FEATURESCLEAR, function (e) {\r\n                            const layer = e.layer;\r\n                            const feature = e.feature;\r\n                            if (layer === self.layer) {\r\n                                if (self.layer.features.length === 0) {\r\n                                    self._clearBtn.disabled = true;\r\n                                    self._downloadBtn.disabled = true;\r\n                                    self.resetValues();\r\n                                    clearElevationProfileCache();\r\n                                }\r\n                                else if (feature) {\r\n                                    removeElevationProfileFromCache(feature);\r\n                                }\r\n                            }\r\n                        })\r\n                        .on(TC.Consts.event.RESULTSPANELCLOSE, function (e) {\r\n                            const control = e.control;\r\n                            if (control.setCurrentFeature) {\r\n                                control.setCurrentFeature(null);\r\n                            }\r\n                        });\r\n\r\n                    resolve(self);\r\n                });\r\n\r\n            }).catch(function (error) {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.displayMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self._activeMode = self.div.querySelector('.tc-ctl-meas-pt');\r\n        }\r\n        if (self.modify) {\r\n            self.modify.div.classList.remove(TC.Consts.classes.COLLAPSED);\r\n        }\r\n        return TC.control.Measure.prototype.displayMode.call(self, mode);\r\n    };\r\n\r\n    ctlProto.setMode = function (mode) {\r\n        const self = this;\r\n        if (mode === TC.Consts.geom.POINT) {\r\n            self.drawPoints.activate();\r\n        }\r\n        return TC.control.Measure.prototype.setMode.call(self, mode);\r\n    };\r\n\r\n    ctlProto.setFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const data = {};\r\n        switch (true) {\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                const firstCoordText = self._1stCoordText.innerHTML;\r\n                const secondCoordText = self._2ndCoordText.innerHTML;\r\n                const elevationText = self._elevationText.innerHTML;\r\n                if (self._1stCoordValue.textContent.trim().length > 0 && self._2ndCoordValue.textContent.trim().length > 0) {\r\n                    data.CRS = self.map.crs;\r\n                    data[firstCoordText.substr(0, firstCoordText.indexOf(':'))] = parseFloat(self._1stCoordValue.dataset.value);\r\n                    data[secondCoordText.substr(0, secondCoordText.indexOf(':'))] = parseFloat(self._2ndCoordValue.dataset.value);\r\n                    if (elevationText) {\r\n                        data[self.getLocaleString('ele')] = parseFloat(self._elevationValue.dataset.value);\r\n                    }\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                if (self._len.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('2dLength')] = self._len.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                if (self._area.innerHTML.trim() !== self.NOMEASURE && self._peri.innerHTML.trim() !== self.NOMEASURE) {\r\n                    data[self.getLocaleString('area')] = self._area.innerHTML;\r\n                    data[self.getLocaleString('2dPerimeter')] = self._peri.innerHTML;\r\n                    feature.setData(data);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.getFeatureMeasureData = function (feature) {\r\n        const self = this;\r\n        const result = {\r\n            units: 'm'\r\n        };\r\n        const measureOptions = {};\r\n        if (self.map.wrap.isGeo()) {\r\n            measureOptions.crs = TC.Cfg.utmCrs;\r\n        }\r\n        switch (true) {\r\n            case TC.feature.Polygon && feature instanceof TC.feature.Polygon:\r\n                result.area = feature.getArea(measureOptions);\r\n                result.perimeter = feature.getLength(measureOptions);\r\n                break;\r\n            case TC.feature.Polyline && feature instanceof TC.feature.Polyline:\r\n                result.length = feature.getLength(measureOptions);\r\n                const profile = getElevationProfileFromCache(feature);\r\n                if (profile) {\r\n                    self.renderElevationChart(profile.data);\r\n                }\r\n                else {\r\n                    self.displayElevationProfile(feature.geometry);\r\n                }\r\n                break;\r\n            case TC.feature.Point && feature instanceof TC.feature.Point:\r\n                result.coords = feature.geometry;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    ctlProto.showMeasures = function (options) {\r\n        const self = this;\r\n        TC.control.Measure.prototype.showMeasures.call(self, options);\r\n        options = options || {};\r\n        var units = options.units;\r\n        const locale = self.map.options.locale || TC.Cfg.locale\r\n        if (options.coords) {\r\n            var precision;\r\n            var coord1, coord2;\r\n            if (options.units === 'm') {\r\n                precision = TC.Consts.METER_PRECISION;\r\n                coord1 = options.coords[0];\r\n                coord2 = options.coords[1];\r\n                self._1stCoordText.innerHTML = 'x: ';\r\n                self._2ndCoordText.innerHTML = 'y: ';\r\n            }\r\n            else {\r\n                precision = TC.Consts.DEGREE_PRECISION;\r\n                coord1 = options.coords[1];\r\n                coord2 = options.coords[0];\r\n                self._1stCoordText.innerHTML = 'lat: ';\r\n                self._2ndCoordText.innerHTML = 'lon: ';\r\n            }\r\n            const factor = Math.pow(10, precision);\r\n            const round = function (val) {\r\n                return Math.round(val * factor) / factor;\r\n            }\r\n            self._1stCoordValue.innerHTML = TC.Util.formatNumber(coord1.toFixed(precision), locale);\r\n            self._1stCoordValue.dataset.value = round(coord1);\r\n            self._2ndCoordValue.innerHTML = TC.Util.formatNumber(coord2.toFixed(precision), locale);\r\n            self._2ndCoordValue.dataset.value = round(coord2);\r\n            if (options.coords.length > 2) {\r\n                const elevation = Math.round(options.coords[2]);\r\n                self._elevationText.innerHTML = self.getLocaleString('ele').toLowerCase() + ': ';\r\n                self._elevationValue.innerHTML = TC.Util.formatNumber(elevation.toFixed(TC.Consts.METER_PRECISION), locale) + ' m';\r\n                self._elevationValue.dataset.value = elevation;\r\n            }\r\n            else {\r\n                self._elevationText.innerHTML = '';\r\n                self._elevationValue.innerHTML = '';\r\n                self._elevationValue.dataset.value = '';\r\n            }\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetValues = function () {\r\n        const self = this;\r\n        TC.control.Measure.prototype.resetValues.call(self);\r\n\r\n        if (self._1stCoordText) {\r\n            self._1stCoordText.innerHTML = self.NOMEASURE;\r\n            self._2ndCoordText.innerHTML = '';\r\n            self._1stCoordValue.innerHTML = '';\r\n            self._1stCoordValue.dataset.value = '';\r\n            self._2ndCoordValue.innerHTML = '';\r\n            self._2ndCoordValue.dataset.value = '';\r\n            self._elevationText.innerHTML = '';\r\n            self._elevationValue.innerHTML = '';\r\n            self._elevationValue.dataset.value = '';\r\n        }\r\n        return self;\r\n    };\r\n\r\n    ctlProto.resetDrawWatches = function () {\r\n        const self = this;\r\n        self.drawControls.forEach(function (ctl) {\r\n            ctl\r\n                .setStrokeColorWatch()\r\n                .setStrokeWidthWatch();\r\n        });\r\n    };\r\n\r\n    ctlProto.clear = function () {\r\n        const self = this;\r\n        self.resetValues();\r\n        self.layer.clearFeatures();\r\n        if (self.modify.isActive) {\r\n            self.modify.deactivate();\r\n        }\r\n        if (self.options.displayElevation) {\r\n            self.resetElevationProfile();\r\n            if (self.resultsPanelChart) {\r\n                self.resultsPanelChart.close();\r\n            }\r\n        }\r\n        self._clearBtn.disabled = true;\r\n        self._downloadBtn.disabled = true;\r\n        return self;\r\n    };\r\n\r\n    ctlProto.showSketchDownloadDialog = function (options) {\r\n        const self = this;\r\n\r\n        const dialog = self._dialogDiv.querySelector('.' + self.CLASS + '-dialog');\r\n        const hasPoints = self.layer.features.some(function (feature) {\r\n            return (TC.feature.Point && feature instanceof TC.feature.Point) ||\r\n                (TC.feature.MultiPoint && feature instanceof TC.feature.MultiPoint);\r\n        });\r\n        const hasLines = self.layer.features.some(function (feature) {\r\n            return (TC.feature.Polyline && feature instanceof TC.feature.Polyline) ||\r\n                (TC.feature.MultiPolyline && feature instanceof TC.feature.MultiPolyline);\r\n        });\r\n        const hasPolygons = self.layer.features.some(function (feature) {\r\n            return (TC.feature.Polygon && feature instanceof TC.feature.Polygon) ||\r\n                (TC.feature.MultiPolygon && feature instanceof TC.feature.MultiPolygon);\r\n        });\r\n\r\n        if (self.options.displayElevation) {\r\n            // Si no hay líneas o polígonos, no es necesario preguntar si queremos interpolar\r\n            const ipDiv = dialog.querySelector('.' + self.CLASS + '-dialog-ip');\r\n            ipDiv.classList.toggle(TC.Consts.classes.HIDDEN, !self._dialogDiv.querySelector(self._selectors.ELEVATION_CHECKBOX).checked || (!hasLines && !hasPolygons));\r\n        }\r\n\r\n        // Si no hay líneas o puntos, no es necesario mostrar el botón de GPX\r\n        const gpxButton = dialog.querySelector('button[data-format=GPX]');\r\n        gpxButton.classList.toggle(TC.Consts.classes.HIDDEN, !(hasLines || hasPoints));\r\n\r\n        TC.Util.showModal(dialog, options);\r\n        return self;\r\n    };\r\n\r\n    ctlProto.onStyleChange = function (e) {\r\n        const self = this;\r\n        var featureCtor;\r\n        switch (e.target.mode) {\r\n            case TC.Consts.geom.POLYGON:\r\n                featureCtor = TC.feature.Polygon;\r\n                break;\r\n            case TC.Consts.geom.POLYLINE:\r\n                featureCtor = TC.feature.Polyline;\r\n                break;\r\n            case TC.Consts.geom.POINT:\r\n                featureCtor = TC.feature.Point;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (featureCtor) {\r\n            self.modify.getSelectedFeatures().forEach(function (feature) {\r\n                if (feature instanceof featureCtor) {\r\n                    const styleOptions = {};\r\n                    styleOptions[e.property] = e.value;\r\n                    //feature._originalStyle[e.property] = e.value;\r\n                    feature.setStyle(styleOptions);\r\n                    //clearTimeout(feature._selectionStyleTimeout);\r\n                    //feature._selectionStyleTimeout = setTimeout(function () {\r\n                    //    feature.setStyle(self.modify.styleFunction(feature));\r\n                    //}, self.options.styleChangeDisplayTimeout || 1000);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ctlProto.displayElevationProfile = function (coords) {\r\n        const self = this;\r\n        if (coords.length === 1) {\r\n            // Espera una línea, metemos un segundo punto\r\n            coords = coords.slice();\r\n            coords.push(coords[0]);\r\n        }\r\n        const li = self.map.getLoadingIndicator();\r\n        const waitId = li && li.addWait();\r\n        self.elevation.getElevation({\r\n            crs: self.map.crs,\r\n            coordinates: coords\r\n        }).then(\r\n            function (elevCoords) {\r\n                li && li.removeWait(waitId);\r\n                var distance = 0.0;\r\n                var maxElevation = Number.NEGATIVE_INFINITY;\r\n                var minElevation = Number.POSITIVE_INFINITY;\r\n                const profile = elevCoords\r\n                    .map(function (point, idx, arr) {\r\n                        const prev = idx === 0 ? point : arr[idx - 1];\r\n                        const dx = point[0] - prev[0];\r\n                        const dy = point[1] - prev[1];\r\n                        distance += Math.sqrt(dx * dx + dy * dy);\r\n                        var ele = point[2];\r\n                        if (typeof ele === 'number') {\r\n                            maxElevation = Math.max(ele, maxElevation);\r\n                            minElevation = Math.min(ele, minElevation);\r\n                        }\r\n                        return [distance, ele];\r\n                    });\r\n\r\n                self.elevationProfileData = {\r\n                    x: profile.map(function (elm) {\r\n                        return elm[0];\r\n                    }),\r\n                    ele: profile.map(function (elm) {\r\n                        return elm[1];\r\n                    }),\r\n                    coords: elevCoords\r\n                };\r\n                const elevationGainOptions = {\r\n                    coords: elevCoords\r\n                };\r\n                if (typeof self.options.displayElevation === 'object') {\r\n                    elevationGainOptions.hillDeltaThreshold = self.options.displayElevation.hillDeltaThreshold;\r\n                }\r\n                TC.Util.extend(self.elevationProfileData, TC.tool.Elevation.getElevationGain(elevationGainOptions));\r\n\r\n                // Cacheamos el perfil\r\n                const matchingFeature = self.layer.features\r\n                    .filter(function (feat) {\r\n                        return TC.feature.Polyline && feat instanceof TC.feature.Polyline;\r\n                    })\r\n                    .filter(function (line) {\r\n                        for (var i = 0, len = line.geometry.length; i < len; i++) {\r\n                            const coord = coords[i];\r\n                            const lineCoord = line.geometry[i];\r\n                            if (!coord || coord[0] !== lineCoord[0] || coord[1] !== lineCoord[1]) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                        return true;\r\n                    })[0];\r\n                if (matchingFeature) {\r\n                    cacheElevationProfile(matchingFeature, self.elevationProfileData);\r\n                }\r\n\r\n                if (self.resultsPanelChart) {\r\n                    self.renderElevationChart();\r\n                }\r\n                else {\r\n                    self.createChartPanel().then(function (resultsPanelChart) {\r\n                        self.resultsPanelChart.renderPromise().then(function () {\r\n                            self.renderElevationChart();\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n            function (error) {\r\n                self.resetElevationProfile();\r\n                li && li.removeWait(waitId);\r\n            });\r\n\r\n    };\r\n\r\n    ctlProto.createChartPanel = function () {\r\n        const self = this;\r\n\r\n        const resultsPanelOptions = {\r\n            id: self.getUID(),\r\n            content: \"chart\",\r\n            titles: {\r\n                main: self.getLocaleString(\"geo.trk.chart.chpe\"),\r\n                max: self.getLocaleString(\"geo.trk.chart.chpe\")\r\n            },\r\n            chart: {\r\n                ctx: self,\r\n                onmouseout: ctlProto.removeElevationTooltip,\r\n                tooltip: ctlProto.getElevationTooltip\r\n            }\r\n        };\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            var addControlPromise;\r\n            const addResultsPanelChart = function (controlContainer) {\r\n                resultsPanelOptions.side = controlContainer.SIDE.RIGHT;\r\n                addControlPromise = controlContainer.addControl('resultsPanel', resultsPanelOptions);\r\n            };\r\n\r\n            if (self.options.displayElevation.displayOn) {\r\n                var controlContainer = self.map.getControlsByClass('TC.control.' + self.options.displayElevation.displayOn[0].toUpperCase() + self.options.displayElevation.displayOn.substring(1))[0];\r\n                if (!controlContainer) {\r\n                    self.map.addControl(self.options.displayElevation.displayOn).then(addResultsPanelChart);\r\n                } else {\r\n                    addResultsPanelChart(controlContainer);\r\n                }\r\n            } else {\r\n                resultsPanelOptions.div = document.createElement('div');\r\n                self.map.div.appendChild(resultsPanelOptions.div);\r\n                addControlPromise = self.map.addControl('resultsPanel', resultsPanelOptions);\r\n            }\r\n\r\n            addControlPromise.then(function (resultsPanelChart) {\r\n                resultsPanelChart.caller = self;\r\n                self.resultsPanelChart = resultsPanelChart;\r\n                self._decorateChartPanel();\r\n                resolve(resultsPanelChart);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto._decorateChartPanel = function () {\r\n        const self = this;\r\n        self.resultsPanelChart.setCurrentFeature = function (feature) {\r\n            const that = this;\r\n            if (that.currentFeature) {\r\n                that.currentFeature.toggleSelectedStyle(false);\r\n            }\r\n            that.currentFeature = feature;\r\n            if (feature) {\r\n                feature.toggleSelectedStyle(true);\r\n            }\r\n        };\r\n    };\r\n\r\n    ctlProto.renderElevationChart = function (profileData) {\r\n        const self = this;\r\n        self.elevationProfileData = profileData || self.elevationProfileData;\r\n        if (self.resultsPanelChart && self.elevationProfileActive) {\r\n            self.resultsPanelChart.openChart(self.elevationProfileData);\r\n            if (!self.resultsPanelChart.isMinimized()) {\r\n                self.resultsPanelChart.show();\r\n            }\r\n        }\r\n    };\r\n\r\n    ctlProto.getElevationTooltip = function (d) {\r\n        const self = this;\r\n        self.resultsPanelChart.wrap.showElevationMarker({\r\n            data: d,\r\n            layer: self.layer,\r\n            coords: self.elevationProfileData.coords\r\n        });\r\n\r\n        return self.resultsPanelChart.getElevationChartTooltip(d);\r\n    };\r\n\r\n    ctlProto.removeElevationTooltip = function () {\r\n        var self = this;\r\n        self.resultsPanelChart.wrap.hideElevationMarker();\r\n    }\r\n\r\n    ctlProto.activateElevationProfile = function () {\r\n        const self = this;\r\n        self.elevationProfileActive = true;\r\n        self._elevProfileBtn.classList.add(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('deactivateElevationProfile'));\r\n        var profileDrawn = false;\r\n        if (self.drawLines.historyIndex > 1) {\r\n            self.displayElevationProfile(self.drawLines.history.slice(0, self.drawLines.historyIndex));\r\n            profileDrawn = true;\r\n        }\r\n        else {\r\n            const features = self.modify.getActiveFeatures().filter(function (feat) {\r\n                return TC.feature.Polyline && feat instanceof TC.feature.Polyline;\r\n            });\r\n            if (features.length) {\r\n                const feature = features[features.length - 1];\r\n                self.displayElevationProfile(feature.geometry);\r\n                profileDrawn = true;\r\n            }\r\n        }\r\n        if (!profileDrawn) {\r\n            self.resetElevationProfile();\r\n        }\r\n        if (self.resultsPanelChart) {\r\n            self.resultsPanelChart.show();\r\n        }\r\n    };\r\n\r\n    ctlProto.deactivateElevationProfile = function () {\r\n        const self = this;\r\n        self.elevationProfileActive = false;\r\n        self._elevProfileBtn.classList.remove(TC.Consts.classes.ACTIVE);\r\n        self._elevProfileBtn.setAttribute('title', self.getLocaleString('activateElevationProfile'));\r\n        self.resetElevationProfile();\r\n        if (self.resultsPanelChart) {\r\n            self.resultsPanelChart.close();\r\n        }\r\n    };\r\n\r\n    ctlProto.resetElevationProfile = function () {\r\n        const self = this;\r\n        if (self.options.displayElevation && self.resultsPanelChart) {\r\n            self.elevationProfileData = {\r\n                x: [0],\r\n                ele: [0],\r\n                coords: [0, 0, 0],\r\n                upHill: 0,\r\n                downHill: 0\r\n            };\r\n            self.resultsPanelChart.openChart(self.elevationProfileData);\r\n        }\r\n    };\r\n\r\n})();"]}