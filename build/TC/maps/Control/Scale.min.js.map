{"version":3,"sources":["control/Scale.js"],"names":["TC","control","Consts","SCREEN_SIZE_KEY","Control","syncLoadJS","apiLocation","Scale","apply","this","arguments","inherit","ctlProto","prototype","CLASS","template","dust","register","body_0","chk","ctx","w","h","key","body_1","method","f","get","$key","__dustBody","render","callback","self","_set1stRenderPromise","renderData","scale","getScale","screenSize","Cfg","span","div","querySelector","textContent","format","substr","addEventListener","event","CLICK","setScreenSize","Util","isFunction","map","result","call","storage","getLocalValue","on","ZOOM","metersPerDegree","update","prompt","getLocaleString","value","parseFloat","setLocalValue","resolution","res","wrap","getResolution","getDpi","window","devicePixelRatio","isGeo","extent","getExtent","getMetersPerDegree","dpi","Math","sqrt","screen","width","height","number","n","Number","toFixed","a","length","l","unshift","join"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\nTC.Consts = TC.Consts || {};\r\nTC.Consts.SCREEN_SIZE_KEY = 'TC.Map.screenSize';\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.Scale = function () {\r\n    TC.Control.apply(this, arguments);\r\n};\r\n\r\nTC.inherit(TC.control.Scale, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Scale.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-scl';\r\n\r\n    ctlProto.template = TC.apiLocation + \"TC/templates/Scale.html\";\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(self.renderData({ scale: self.getScale(), screenSize: TC.Cfg.screenSize }, function () {\r\n\r\n            const span = self.div.querySelector('span');\r\n            span.textContent = '1:' + self.format(span.textContent.substr(2));\r\n\r\n            self.div.querySelector('input[type=\"button\"]').addEventListener(TC.Consts.event.CLICK, function () { self.setScreenSize(); });\r\n\r\n            if (TC.Util.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n        var screenSize = TC.Util.storage.getLocalValue(TC.Consts.SCREEN_SIZE_KEY);\r\n        if (screenSize) {\r\n            TC.Cfg.screenSize = screenSize;\r\n        }\r\n        self.render(function () {\r\n            map.on(TC.Consts.event.ZOOM, function () {\r\n                delete self.metersPerDegree;\r\n                self.update();\r\n            });\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.update = function () {\r\n        this.render();\r\n    };\r\n\r\n    /*\r\n     *  setScreenSize: Prompts for screen size in inches, updates and stores value\r\n     */\r\n    ctlProto.setScreenSize = function () {\r\n        var self = this;\r\n        TC.prompt(self.getLocaleString('selectScreenSize'), TC.Cfg.screenSize, function (value) {\r\n            if (value) {\r\n                TC.Cfg.screenSize = parseFloat(value);\r\n                TC.Util.storage.setLocalValue(TC.Consts.SCREEN_SIZE_KEY, TC.Cfg.screenSize);\r\n                self.update();\r\n            }\r\n        });\r\n    };\r\n\r\n    /*\r\n     *  getScale: Gets scale denominator with a resolution or current map resolution and estimated screen DPI\r\n     *  Parameters: number (optional), the resolution to get scale from. If no parameter is given, current map resolution is used\r\n     *  Returns: number\r\n     */\r\n    ctlProto.getScale = function (resolution) {\r\n        var self = this;\r\n        var result = 0;\r\n        var res = (!resolution && self.map) ? self.map.wrap.getResolution() : resolution;\r\n        if (res) {\r\n            result = res * self.getDpi(TC.Cfg.screenSize) / .0254;\r\n            if (window.devicePixelRatio) {\r\n                result = result * window.devicePixelRatio;\r\n            }\r\n        }\r\n        if (self.map && self.map.wrap.isGeo()) {\r\n            if (!self.metersPerDegree) {\r\n                var extent = self.map.getExtent();\r\n                if (extent) {\r\n                    self.metersPerDegree = TC.Util.getMetersPerDegree(extent);\r\n                }\r\n            }\r\n            if (self.metersPerDegree) {\r\n                result = result * self.metersPerDegree;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /*\r\n     *  getDpi: Gets estimated DPI based on screen resolution and screenSize value\r\n     *  Returns: number\r\n     */\r\n    ctlProto.getDpi = function (screenSize) {\r\n        var self = this;\r\n        self.dpi = Math.sqrt(screen.width * screen.width + screen.height * screen.height) / screenSize;\r\n        return self.dpi;\r\n    };\r\n\r\n\r\n    ctlProto.format = function (number) {\r\n        var n = (new Number(number)).toFixed(0);\r\n        var a = [];\r\n        while (n.length > 3) {\r\n            var l = n.length - 3;\r\n            a.unshift(n.substr(l));\r\n            n = n.substr(0, l);\r\n        }\r\n        if (n) {\r\n            a.unshift(n);\r\n        }\r\n        return a.join('.');\r\n    };\r\n\r\n})();"]}