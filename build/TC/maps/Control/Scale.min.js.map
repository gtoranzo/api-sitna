{"version":3,"sources":["control/Scale.js"],"names":["TC","control","Consts","SCREEN_SIZE_KEY","Control","syncLoadJS","apiLocation","Scale","apply","this","arguments","inherit","ctlProto","prototype","CLASS","isDebug","template","dust","register","body_0","chk","ctx","w","h","key","body_1","method","f","get","$key","__dustBody","render","callback","self","_set1stRenderPromise","renderData","scale","getScale","screenSize","Cfg","span","div","querySelector","textContent","format","substr","addEventListener","event","CLICK","setScreenSize","$","isFunction","map","result","call","Util","storage","getLocalValue","on","ZOOM","metersPerDegree","update","prompt","getLocaleString","value","parseFloat","setLocalValue","resolution","res","wrap","getResolution","getDpi","window","devicePixelRatio","isGeo","extent","getExtent","getMetersPerDegree","dpi","Math","sqrt","screen","width","height","number","n","Number","toFixed","a","length","l","unshift","join"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\nTC.Consts = TC.Consts || {};\r\nTC.Consts.SCREEN_SIZE_KEY = 'TC.Map.screenSize';\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\nTC.control.Scale = function () {\r\n    TC.Control.apply(this, arguments);\r\n};\r\n\r\nTC.inherit(TC.control.Scale, TC.Control);\r\n\r\n(function () {\r\n    var ctlProto = TC.control.Scale.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-scl';\r\n\r\n    if (TC.isDebug) {\r\n        ctlProto.template = TC.apiLocation + \"TC/templates/Scale.html\";\r\n    }\r\n    else {\r\n        ctlProto.template = function () { dust.register(ctlProto.CLASS, body_0); function body_0(chk, ctx) { return chk.w(\"<div class=\\\"ol-scale-line ol-unselectable\\\"><span>1:\").h(\"math\", ctx, {}, { \"key\": body_1, \"method\": \"round\" }).w(\"</span> <input type=\\\"button\\\" value=\\\"\").f(ctx.get([\"screenSize\"], false), ctx, \"h\").w(\"''\\\" title=\\\"\").h(\"i18n\", ctx, {}, { \"$key\": \"estimatedMapSize\" }).w(\"\\\" /></div>\"); } body_0.__dustBody = !0; function body_1(chk, ctx) { return chk.f(ctx.get([\"scale\"], false), ctx, \"h\"); } body_1.__dustBody = !0; return body_0 };\r\n    }\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(self.renderData({ scale: self.getScale(), screenSize: TC.Cfg.screenSize }, function () {\r\n\r\n            const span = self.div.querySelector('span');\r\n            span.textContent = '1:' + self.format(span.textContent.substr(2));\r\n\r\n            self.div.querySelector('input[type=\"button\"]').addEventListener(TC.Consts.event.CLICK, function () { self.setScreenSize(); });\r\n\r\n            if ($.isFunction(callback)) {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n        var screenSize = TC.Util.storage.getLocalValue(TC.Consts.SCREEN_SIZE_KEY);\r\n        if (screenSize) {\r\n            TC.Cfg.screenSize = screenSize;\r\n        }\r\n        self.render(function () {\r\n            map.on(TC.Consts.event.ZOOM, function () {\r\n                delete self.metersPerDegree;\r\n                self.update();\r\n            });\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.update = function () {\r\n        this.render();\r\n    };\r\n\r\n    /*\r\n     *  setScreenSize: Prompts for screen size in inches, updates and stores value\r\n     */\r\n    ctlProto.setScreenSize = function () {\r\n        var self = this;\r\n        TC.prompt(self.getLocaleString('selectScreenSize'), TC.Cfg.screenSize, function (value) {\r\n            if (value) {\r\n                TC.Cfg.screenSize = parseFloat(value);\r\n                TC.Util.storage.setLocalValue(TC.Consts.SCREEN_SIZE_KEY, TC.Cfg.screenSize);\r\n                self.update();\r\n            }\r\n        });\r\n    };\r\n\r\n    /*\r\n     *  getScale: Gets scale denominator with a resolution or current map resolution and estimated screen DPI\r\n     *  Parameters: number (optional), the resolution to get scale from. If no parameter is given, current map resolution is used\r\n     *  Returns: number\r\n     */\r\n    ctlProto.getScale = function (resolution) {\r\n        var self = this;\r\n        var result = 0;\r\n        var res = (!resolution && self.map) ? self.map.wrap.getResolution() : resolution;\r\n        if (res) {\r\n            result = res * self.getDpi(TC.Cfg.screenSize) / .0254;\r\n            if (window.devicePixelRatio) {\r\n                result = result * window.devicePixelRatio;\r\n            }\r\n        }\r\n        if (self.map && self.map.wrap.isGeo()) {\r\n            if (!self.metersPerDegree) {\r\n                var extent = self.map.getExtent();\r\n                if (extent) {\r\n                    self.metersPerDegree = TC.Util.getMetersPerDegree(extent);\r\n                }\r\n            }\r\n            if (self.metersPerDegree) {\r\n                result = result * self.metersPerDegree;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /*\r\n     *  getDpi: Gets estimated DPI based on screen resolution and screenSize value\r\n     *  Returns: number\r\n     */\r\n    ctlProto.getDpi = function (screenSize) {\r\n        var self = this;\r\n        self.dpi = Math.sqrt(screen.width * screen.width + screen.height * screen.height) / screenSize;\r\n        return self.dpi;\r\n    };\r\n\r\n\r\n    ctlProto.format = function (number) {\r\n        var n = (new Number(number)).toFixed(0);\r\n        var a = [];\r\n        while (n.length > 3) {\r\n            var l = n.length - 3;\r\n            a.unshift(n.substr(l));\r\n            n = n.substr(0, l);\r\n        }\r\n        if (n) {\r\n            a.unshift(n);\r\n        }\r\n        return a.join('.');\r\n    };\r\n\r\n})();"],"file":"../../control/Scale.min.js"}