{"version":3,"sources":["control/SWCacheClient.js"],"names":["TC","control","Control","syncLoadJS","apiLocation","SWCacheClient","apply","this","arguments","serviceWorkerEnabled","inherit","ctlProto","prototype","CLASS","register","map","self","result","call","_swPromise","Promise","resolve","reject","navigator","serviceWorker","scope","then","reg","installing","waiting","active","console","log","reason","error","Error","getServiceWorker","addMessageEventListener","cacheName","action","eventName","addEventListener","messageHandler","event","data","name","removeEventListener","createCache","options","sw","opts","postMessage","list","urlList","silent","deleteCache"],"mappings":"AAACA,GAAGC,QAAUD,GAAGC,YAEZD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,eAGnC,WAEIJ,GAAGC,QAAQI,cAAgB,WAEvBL,GAAGE,QAAQI,MAAMC,KAAMC,WADVD,KAERE,sBAAuB,GAGhCT,GAAGU,QAAQV,GAAGC,QAAQI,cAAeL,GAAGE,SAExC,IAAIS,EAAWX,GAAGC,QAAQI,cAAcO,UAExCD,EAASE,MAAQ,cAEjBF,EAASG,SAAW,SAAUC,GAC1B,MAAMC,EAAOT,KAEPU,EAASjB,GAAGE,QAAQU,UAAUE,SAASI,KAAKF,EAAMD,GAGxDC,EAAKG,WAAa,IAAIC,QAAQ,SAAUC,EAASC,GACzCC,UAAUC,cAEVD,UAAUC,cAAcV,SAAS,2BAC7BW,MAAO,OACRC,KACC,SAAUC,GACNX,EAAKP,sBAAuB,EACxBkB,EAAIC,WACJP,EAAQM,EAAIC,YACLD,EAAIE,QACXR,EAAQM,EAAIE,SACLF,EAAIG,QACXT,EAAQM,EAAIG,QAEhBC,QAAQC,IAAIL,EAAIF,MAAO,aAE3B,SAAUQ,GACNjB,EAAKP,sBAAuB,EAC5Ba,IACAS,QAAQG,MAAM,sCAAwCD,KAI9DX,EAAO,IAAIa,MAAM,+CAIzB,OAAOlB,GAGXN,EAASyB,iBAAmB,WACxB,OAAK7B,KAAKY,WAGHZ,KAAKY,WAFDC,QAAQE,OAAO,IAAIa,MAAM,iCAKxC,IAAIE,EAA0B,SAAUhB,EAASC,EAAQgB,EAAWC,EAAQC,GAaxEjB,UAAUC,cAAciB,iBAZV,UACO,SAASC,EAAeC,GACzC,GAAIA,EAAMC,KAAKC,OAASP,EAAW,CAC3BK,EAAMC,KAAKL,SAAWA,GAAUI,EAAMC,KAAKD,QAAUH,EACrDnB,EAAQiB,GAEkB,UAArBK,EAAMC,KAAKD,OAChBrB,IAEJC,UAAUC,cAAcsB,oBATlB,UAS+CJ,OAMjE/B,EAASoC,YAAc,SAAUF,EAAMG,GACnC,IAAIhC,EAAOT,KACX,OAAO,IAAIa,QAAQ,SAAUC,EAASC,GAClCN,EAAKoB,mBAAmBV,KAAK,SAAUuB,GACnC,IACIC,EAAOF,MACXX,EAAwBhB,EAASC,EAAQuB,EAF5B,SAE0C,UACvDI,EAAGE,aACCZ,OAJS,SAKTM,KAAMA,EACNO,KAAMF,EAAKG,YACXC,OAAQJ,EAAKI,UAElB,WACCjC,GAAQ,QAKpBV,EAAS4C,YAAc,SAAUV,EAAMG,GACnC,IAAIhC,EAAOT,KACX,OAAO,IAAIa,QAAQ,SAAUC,EAASC,GAClCN,EAAKoB,mBAAmBV,KAAK,SAAUuB,GACnC,IACIC,EAAOF,MACXX,EAAwBhB,EAASC,EAAQuB,EAF5B,SAE0C,WACvDI,EAAGE,aACCZ,OAJS,SAKTM,KAAMA,EACNS,OAAQJ,EAAKI,UAElB,WACCjC,GAAQ,QA1GxB","sourcesContent":["TC.control = TC.control || {};\r\n\r\nif (!TC.Control) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Control');\r\n}\r\n\r\n(function () {\r\n\r\n    TC.control.SWCacheClient = function () {\r\n        const self = this;\r\n        TC.Control.apply(this, arguments);\r\n        self.serviceWorkerEnabled = false;\r\n    };\r\n\r\n    TC.inherit(TC.control.SWCacheClient, TC.Control);\r\n\r\n    var ctlProto = TC.control.SWCacheClient.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl-swcc';\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n\r\n        const result = TC.Control.prototype.register.call(self, map);\r\n\r\n        // Si el navegador es compatible, a√±adimos el service worker.\r\n        self._swPromise = new Promise(function (resolve, reject) {\r\n            if (navigator.serviceWorker) {\r\n\r\n                navigator.serviceWorker.register('tc-cb-service-worker.js', {\r\n                    scope: './'\r\n                }).then(\r\n                    function (reg) {\r\n                        self.serviceWorkerEnabled = true;\r\n                        if (reg.installing) {\r\n                            resolve(reg.installing);\r\n                        } else if (reg.waiting) {\r\n                            resolve(reg.waiting);\r\n                        } else if (reg.active) {\r\n                            resolve(reg.active);\r\n                        }\r\n                        console.log(reg.scope, 'register');\r\n                    },\r\n                    function (reason) {\r\n                        self.serviceWorkerEnabled = false;\r\n                        reject();\r\n                        console.error('Could not register service worker: ' + reason);\r\n                    });\r\n            }\r\n            else {                \r\n                reject(new Error(\"Browser does not support service workers\"));\r\n            }\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    ctlProto.getServiceWorker = function () {\r\n        if (!this._swPromise) {\r\n            return Promise.reject(new Error('No service worker available'));\r\n        }\r\n        return this._swPromise;\r\n    };\r\n\r\n    var addMessageEventListener = function (resolve, reject, cacheName, action, eventName) {\r\n        var MESSAGE = 'message';\r\n        var messageHandler = function messageHandler(event) {\r\n            if (event.data.name === cacheName) {\r\n                if (event.data.action === action && event.data.event === eventName) {\r\n                    resolve(cacheName);\r\n                }\r\n                else if (event.data.event === 'error') {\r\n                    reject();\r\n                }\r\n                navigator.serviceWorker.removeEventListener(MESSAGE, messageHandler);\r\n            }\r\n        };\r\n        navigator.serviceWorker.addEventListener(MESSAGE, messageHandler);\r\n    };\r\n\r\n    ctlProto.createCache = function (name, options) {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getServiceWorker().then(function (sw) {\r\n                var ACTION = 'create';\r\n                var opts = options || {};\r\n                addMessageEventListener(resolve, reject, name, ACTION, 'cached');\r\n                sw.postMessage({\r\n                    action: ACTION,\r\n                    name: name,\r\n                    list: opts.urlList || [],\r\n                    silent: opts.silent\r\n                });\r\n            }, function () {\r\n                resolve(false);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.deleteCache = function (name, options) {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.getServiceWorker().then(function (sw) {\r\n                var ACTION = 'delete';\r\n                var opts = options || {};\r\n                addMessageEventListener(resolve, reject, name, ACTION, 'deleted');\r\n                sw.postMessage({\r\n                    action: ACTION,\r\n                    name: name,\r\n                    silent: opts.silent\r\n                });\r\n            }, function () {\r\n                resolve(false);\r\n            });\r\n        });\r\n    };\r\n\r\n})();\r\n"],"file":"../../control/SWCacheClient.min.js"}