{"version":3,"sources":["workers/tc-cb-service-worker.js"],"names":["self","addEventListener","event","cacheName","waitUntil","caches","has","then","hasCache","open","cache","keys","console","log","length","fetch","delete","e","clients","claim","respondWith","match","request","response","catch","reason","url","currentMapStates","postMessage","msg","matchAll","clientList","forEach","client","action","data","name","silent","urlList","list","finally","addToCache","idx","count","add","total"],"mappings":"CAAA,WAGIA,KAAKC,iBAAiB,UAAW,SAAUC,GACvC,MAAMC,EAAY,wBAClBD,EAAME,UACFC,OAAOC,IAAIH,GAAWI,KAAK,SAAUC,GAC7BA,GACAH,OAAOI,KAAKN,GAAWI,KAAK,SAAUG,GAClCA,EAAMC,OAAOJ,KAAK,SAAUI,GACxBC,QAAQC,IAAI,sBACRF,EAAKG,QACLC,MAAMJ,EAAK,IAAIJ,KAAK,WAEhBF,OAAOW,OAAOb,GAAWI,KAAK,WAC1BK,QAAQC,IAAI,kBAAoBV,EAAY,gBAEjD,SAAUc,GACTL,QAAQC,IAAII,cAe5CjB,KAAKC,iBAAiB,WAAY,SAAUC,GAExCA,EAAME,UAAUJ,KAAKkB,QAAQC,WAGjCnB,KAAKC,iBAAiB,QAAS,SAAUC,GAErCA,EAAMkB,YACFf,OAAOgB,MAAMnB,EAAMoB,SACdf,KAAK,SAAUgB,GACZ,OAAIA,GAIGR,MAAMb,EAAMoB,SAASE,MAAM,SAAUC,GACxCb,QAAQC,IAAI,2BAA6BX,EAAMoB,QAAQI,IAAM,KAAOD,UAOxF,MAAME,EAAmB,GAEnBC,EAAc,SAAUC,GAC1B7B,KAAKkB,QAAQY,WACRvB,KAAK,SAAUwB,GACZA,EAAWC,QAAQ,SAAUC,GACzBA,EAAOL,YAAYC,QAKnC7B,KAAKC,iBAAiB,UAAW,SAAUC,GAGvC,MAAMgC,EAAShC,EAAMiC,KAAKD,OACpBE,EAAOlC,EAAMiC,KAAKC,KAClBC,EAASnC,EAAMiC,KAAKE,OACpBC,EAAUpC,EAAMiC,KAAKI,KAC3B,OAAQL,GACJ,IAAK,SACDP,EAAiBS,GAAQF,EACzB7B,OAAOW,OAAOoB,GAAMI,QAAQ,WACxBnC,OAAOI,KAAK2B,GACP7B,KAAK,SAAUG,GACZ,MAAM+B,EAAa,SAAUC,GACzB,IAAKf,EAAiBS,GAClB,OAEJ,GAAIM,IAAQJ,EAAQxB,OAAQ,CACnBuB,GACDT,EAAY,CACRM,OAAQA,EACRE,KAAMA,EACNlC,MAAO,WAGf,OAEJ,MAAMyC,EAAQD,EAAM,EACpBhC,EAAMkC,IAAIN,EAAQI,IACbnC,KACG,WACS8B,GACDT,EAAY,CACRM,OAAQA,EACRE,KAAMA,EACNlC,MAAO,WACPyC,MAAOA,EACPE,MAAOP,EAAQxB,UAI3B,WACIc,EAAY,CACRM,OAAQA,EACRE,KAAMA,EACNlC,MAAO,QACPwB,IAAKA,QAIhBc,QAAQ,WACLC,EAAWE,MAGvBF,EAAW,OAGvB,MACJ,IAAK,gBACMd,EAAiBS,GACxB/B,OAAOW,OAAOoB,GAAM7B,KAChB,WACS8B,GACDT,EAAY,CACRM,OAAQA,EACRE,KAAMA,EACNlC,MAAO,aAInB,WACI0B,EAAY,CACRM,OAAQA,EACRE,KAAMA,EACNlC,MAAO,eA5InC","sourcesContent":["(function () {\r\n\r\n    // Arreglo del bug de actualización de la cache\r\n    self.addEventListener('install', function (event) {\r\n        const cacheName = 'TC.offline.map.common';\r\n        event.waitUntil(\r\n            caches.has(cacheName).then(function (hasCache) {\r\n                if (hasCache) {\r\n                    caches.open(cacheName).then(function (cache) {\r\n                        cache.keys().then(function (keys) {\r\n                            console.log(\"Revisando cache...\");\r\n                            if (keys.length) {\r\n                                fetch(keys[0]).then(function () {\r\n                                    // Estamos online, borramos cache\r\n                                    caches.delete(cacheName).then(function () {\r\n                                        console.log(\"Cache con bug (\" + cacheName + \") borrada\");\r\n                                    });\r\n                                }, function (e) {\r\n                                    console.log(e);\r\n                                });\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            })\r\n        );\r\n    });\r\n\r\n    //self.addEventListener('install', function (event) {\r\n    // No hacemos nada en la instalaci\\u00f3n del service worker\r\n    //    event.waitUntil(self.skipWaiting());\r\n    //});\r\n\r\n    self.addEventListener('activate', function (event) {\r\n        // Reclamamos el control inmediatamente, para evitar tener que recargar la página\r\n        event.waitUntil(self.clients.claim());\r\n    });\r\n\r\n    self.addEventListener('fetch', function (event) {\r\n        // Si está la petición en la cache se responde de ella, si no, se pide a la red\r\n        event.respondWith(\r\n            caches.match(event.request)\r\n                .then(function (response) {\r\n                    if (response) {\r\n                        return response;\r\n                    }\r\n\r\n                    return fetch(event.request).catch(function (reason) {\r\n                        console.log('[fetch] Could not fetch ' + event.request.url + ': ' + reason);\r\n                    });\r\n                })\r\n        );\r\n    });\r\n\r\n    // Diccionario de estados de cacheo de mapas. Necesario para poder cancelar cacheos.\r\n    const currentMapStates = {};\r\n\r\n    const postMessage = function (msg) {\r\n        self.clients.matchAll()\r\n            .then(function (clientList) {\r\n                clientList.forEach(function (client) {\r\n                    client.postMessage(msg);\r\n                });\r\n            });\r\n    };\r\n\r\n    self.addEventListener('message', function (event) {\r\n        // Procesamos las solicitudes de cacheo y borrado\r\n\r\n        const action = event.data.action;\r\n        const name = event.data.name;\r\n        const silent = event.data.silent;\r\n        const urlList = event.data.list;\r\n        switch (action) {\r\n            case 'create':\r\n                currentMapStates[name] = action;\r\n                caches.delete(name).finally(function () {\r\n                    caches.open(name)\r\n                        .then(function (cache) {\r\n                            const addToCache = function (idx) {\r\n                                if (!currentMapStates[name]) { // Se ha cancelado la creación de la cache\r\n                                    return;\r\n                                }\r\n                                if (idx === urlList.length) {\r\n                                    if (!silent) {\r\n                                        postMessage({\r\n                                            action: action,\r\n                                            name: name,\r\n                                            event: 'cached'\r\n                                        });\r\n                                    }\r\n                                    return;\r\n                                }\r\n                                const count = idx + 1;\r\n                                cache.add(urlList[idx])\r\n                                    .then(\r\n                                        function () {\r\n                                            if (!silent) {\r\n                                                postMessage({\r\n                                                    action: action,\r\n                                                    name: name,\r\n                                                    event: 'progress',\r\n                                                    count: count,\r\n                                                    total: urlList.length\r\n                                                });\r\n                                            }\r\n                                        },\r\n                                        function () {\r\n                                            postMessage({\r\n                                                action: action,\r\n                                                name: name,\r\n                                                event: 'error',\r\n                                                url: url\r\n                                            });\r\n                                        }\r\n                                    )\r\n                                    .finally(function () {\r\n                                        addToCache(count);\r\n                                    });\r\n                            };\r\n                            addToCache(0);\r\n                        });\r\n                });\r\n                break;\r\n            case 'delete':\r\n                delete currentMapStates[name];\r\n                caches.delete(name).then(\r\n                    function () {\r\n                        if (!silent) {\r\n                            postMessage({\r\n                                action: action,\r\n                                name: name,\r\n                                event: 'deleted'\r\n                            });\r\n                        }\r\n                    },\r\n                    function () {\r\n                        postMessage({\r\n                            action: action,\r\n                            name: name,\r\n                            event: 'error'\r\n                        });\r\n                    }\r\n                );\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n})();"]}