{"version":3,"sources":["workers/tc-caps-web-worker.js"],"names":["tXml","S","options","pos","openBracket","openBracketCC","charCodeAt","closeBracket","closeBracketCC","minusCC","slashCC","exclamationCC","singleQuoteCC","doubleQuoteCC","openSquareBracketCC","closeSquareBracketCC","parseChildren","children","indexOf","char2","length","node","parseNode","push","text","parseText","trim","start","slice","nameSpacer","parseName","c","NoChildNodes","tagName","attrFound","name","code","attributes","value","parseString","startChar","startpos","r","out","undefined","attrValue","attrName","RegExp","exec","index","lastIndexOf","substr","filter","simplify","forEach","child","kids","_attributes","i","f","concat","stringify","O","writeChildren","writeNode","N","toContentString","tDom","Array","isArray","e","getElementById","id","simplified","getElementsByClassName","classname","module","exports","flattenOnlineResource","olr","flattenLayerUrls","layer","tag","hasOwnProperty","tagObj","urls","len","url","OnlineResource","booleanValues","parseCorner","cornerString","split","map","elm","parseFloat","processDCPVerb","dcpVerb","verbs","result","verb","Constraint","j","lenj","allowedValues","AllowedValues","Value","href","postprocessWMS","xml","capabilities","processWMSLayer","crsList","queryable","bbox","EX_GeographicBoundingBox","westBoundLongitude","southBoundLatitude","eastBoundLongitude","northBoundLatitude","BoundingBox","crs","CRS","extent","minx","miny","maxx","maxy","res","Attribution","Style","newCrsList","Layer","Capability","request","Request","dcpts","DCPType","dcpt","protocol","dcptp","dcptpv","processDCPType","GetMap","GetFeatureInfo","Format","postprocessWMTS","contents","layers","ResourceURL","TileMatrixSetLink","tmsl","TileMatrixSetLimits","TileMatrixLimits","k","lenk","tmslm","MaxTileCol","parseInt","MaxTileRow","MinTileCol","MinTileRow","WGS84BoundingBox","lowerCorner","LowerCorner","upperCorner","UpperCorner","processWMTSLayers","Contents","TileMatrixSet","tileMatrixSets","tms","TileMatrix","tm","MatrixHeight","MatrixWidth","TileHeight","TileWidth","ScaleDenominator","TopLeftCorner","processTMS","om","operations","Operation","operation","DCP","protocolProp","processOM","OperationsMetadata","onmessage","prefixIdx","key","data","type","postMessage","state"],"mappings":"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","sourcesContent":["// ==ClosureCompiler==\r\n// @output_file_name default.js\r\n// @compilation_level SIMPLE_OPTIMIZATIONS\r\n// ==/ClosureCompiler==\r\n\r\n/**\r\n * @author: Tobias Nickel\r\n * @created: 06.04.2015\r\n * I needed a small xmlparser chat can be used in a worker.\r\n */\r\n\r\n/**\r\n * parseXML / html into a DOM Object. with no validation and some failur tolerance\r\n * @params S {string} your XML to parse\r\n * @param options {object} all other options:\r\n * searchId {string} the id of a single element, that should be returned. using this will increase the speed rapidly\r\n * filter {function} filter method, as you know it from Array.filter. but is goes throw the DOM.\r\n * simplify {bool} to use tXml.simplify.\r\n */\r\n\r\nfunction tXml(S, options) {\r\n    \"use strict\";\r\n    options = options || {};\r\n\r\n    var pos = 0;\r\n\r\n    var openBracket = \"<\";\r\n    var openBracketCC = \"<\".charCodeAt(0);\r\n    var closeBracket = \">\";\r\n    var closeBracketCC = \">\".charCodeAt(0);\r\n    var minus = \"-\";\r\n    var minusCC = \"-\".charCodeAt(0);\r\n    var slash = \"/\";\r\n    var slashCC = \"/\".charCodeAt(0);\r\n    var exclamation = '!';\r\n    var exclamationCC = '!'.charCodeAt(0);\r\n    var singleQuote = \"'\";\r\n    var singleQuoteCC = \"'\".charCodeAt(0);\r\n    var doubleQuote = '\"';\r\n    var doubleQuoteCC = '\"'.charCodeAt(0);\r\n    var openSquareBracket = \"[\";\r\n    var openSquareBracketCC = \"[\".charCodeAt(0);\r\n    var closeSquareBracket = \"]\";\r\n    var closeSquareBracketCC = \"]\".charCodeAt(0);\r\n\r\n    /**\r\n     * parsing a list of entries\r\n     */\r\n\r\n    function parseChildren() {\r\n        var children = [];\r\n        while (S[pos]) {\r\n            if (S.charCodeAt(pos) == openBracketCC) {\r\n                if (S.charCodeAt(pos + 1) === slashCC) {\r\n                    pos = S.indexOf(closeBracket, pos);\r\n                    return children;\r\n                } else if (S.charCodeAt(pos + 1) === exclamationCC) {\r\n                    var char2 = S.charCodeAt(pos + 2);\r\n                    if (char2 == openSquareBracketCC) {\r\n                        // cdata support\r\n                    }\r\n                    else {\r\n                        if (char2 == minusCC) {\r\n                            //comment support\r\n                            while (pos !== -1 && !(S.charCodeAt(pos) === closeBracketCC && S.charCodeAt(pos - 1) == minusCC && S.charCodeAt(pos - 2) == minusCC && pos != -1)) {\r\n                                pos = S.indexOf(closeBracket, pos + 1);\r\n                            }\r\n                            if (pos === -1)\r\n                                pos = S.length\r\n                        } else {\r\n                            // doctypesupport\r\n                            pos += 2;\r\n                            while (S.charCodeAt(pos) !== closeBracketCC) {\r\n                                pos++;\r\n                            }\r\n                        }\r\n                        pos++;\r\n                        continue;\r\n                    }\r\n                }\r\n                var node = parseNode();\r\n                children.push(node);\r\n            } else {\r\n                var text = parseText()\r\n                if (text.trim().length > 0)\r\n                    children.push(text);\r\n            }\r\n            pos++;\r\n        }\r\n        return children;\r\n    }\r\n\r\n    /**\r\n     *    returns the text outside of texts until the first '<'\r\n     */\r\n\r\n    function parseText() {\r\n        var start = pos;\r\n        pos = S.indexOf(openBracket, pos) - 1;\r\n        if (pos === -2)\r\n            pos = S.length;\r\n        return S.slice(start, pos + 1);\r\n    }\r\n    /**\r\n     *    returns text until the first nonAlphebetic letter\r\n     */\r\n    var nameSpacer = '\\n\\t>/= ';\r\n\r\n    function parseName() {\r\n        var start = pos;\r\n        var c = S[pos];\r\n        while (nameSpacer.indexOf(c) === -1) {\r\n            c = S[++pos];\r\n            // flacunza: Ignoramos los prefijos\r\n            if (c === ':') {\r\n                pos++;\r\n                start = pos;\r\n            }\r\n        }\r\n        return S.slice(start, pos);\r\n    }\r\n    /**\r\n     *    is parsing a node, including tagName, Attributes and its children,\r\n     * to parse children it uses the parseChildren again, that makes the parsing recursive\r\n     */\r\n    var NoChildNodes = ['img', 'br', 'input', 'meta', 'link'];\r\n\r\n    function parseNode() {\r\n        var node = {};\r\n        pos++;\r\n        if (S.charCodeAt(pos) === exclamationCC && S.charCodeAt(pos + 1) === openSquareBracketCC) {\r\n            // parse cdata\r\n            var start = pos + 8;\r\n            while (!(S.charCodeAt(pos) === closeBracketCC && S.charCodeAt(pos - 1) === closeSquareBracketCC && S.charCodeAt(pos - 2) === closeSquareBracketCC)) {\r\n                pos++;\r\n            }\r\n            return S.slice(start, pos - 2);\r\n        }\r\n\r\n        node.tagName = parseName();\r\n\r\n        // parsing attributes\r\n        var attrFound = false;\r\n        while (S.charCodeAt(pos) !== closeBracketCC) {\r\n            var c = S.charCodeAt(pos);\r\n            if ((c > 64 && c < 91) || (c > 96 && c < 123)) {\r\n                //if('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(S[pos])!==-1 ){\r\n                var name = parseName();\r\n                // search beginning of the string\r\n                var code = S.charCodeAt(pos);\r\n                while (code !== singleQuoteCC && code !== doubleQuoteCC && !((code > 64 && code < 91) || (code > 96 && code < 123)) && code !== closeBracketCC) {\r\n                    pos++;\r\n                    code = S.charCodeAt(pos);\r\n                }\r\n                if (!attrFound) {\r\n                    node.attributes = {};\r\n                    attrFound = true;\r\n                }\r\n                if (code === singleQuoteCC || code === doubleQuoteCC) {\r\n                    var value = parseString();\r\n                } else {\r\n                    value = null;\r\n                    pos--;\r\n                }\r\n                node.attributes[name] = value;\r\n            }\r\n            pos++;\r\n\r\n        }\r\n        // optional parsing of children\r\n        if (S.charCodeAt(pos - 1) !== slashCC) {\r\n            if (node.tagName == \"script\") {\r\n                var start = pos + 1;\r\n                pos = S.indexOf('</script>', pos);\r\n                node.children = [S.slice(start, pos - 1)];\r\n                pos += 8;\r\n            } else if (node.tagName == \"style\") {\r\n                var start = pos + 1;\r\n                pos = S.indexOf('</style>', pos);\r\n                node.children = [S.slice(start, pos - 1)];\r\n                pos += 7;\r\n            } else if (NoChildNodes.indexOf(node.tagName) == -1) {\r\n                pos++;\r\n                node.children = parseChildren(name);\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     *    is parsing a string, that starts with a char and with the same usually  ' or \"\r\n     */\r\n\r\n    function parseString() {\r\n        var startChar = S[pos];\r\n        var startpos = ++pos;\r\n        pos = S.indexOf(startChar, startpos)\r\n        return S.slice(startpos, pos);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n\r\n    function findElements() {\r\n        var r = new RegExp('\\\\s' + options.attrName + '\\\\s*=[\\'\"]' + options.attrValue + '[\\'\"]').exec(S)\r\n        if (r) {\r\n            return r.index;\r\n        } else {\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    var out = null;\r\n    if (options.attrValue !== undefined) {\r\n        options.attrName = options.attrName || 'id';\r\n        var out = [];\r\n\r\n        while ((pos = findElements()) !== -1) {\r\n            pos = S.lastIndexOf('<', pos);\r\n            if (pos !== -1) {\r\n                out.push(parseNode());\r\n            }\r\n            S = S.substr(pos);\r\n            pos = 0;\r\n        }\r\n    } else {\r\n        out = parseChildren();\r\n    }\r\n\r\n    if (options.filter) {\r\n        out = tXml.filter(out, options.filter);\r\n    }\r\n\r\n    if (options.simplify) {\r\n        out = tXml.simplify(out);\r\n    }\r\n    return out;\r\n}\r\n/**\r\n * transform the DomObject to an object that is like the object of PHPs simplexmp_load_*() methods.\r\n * this format helps you to write that is more likely to keep your programm working, even if there a small changes in the XML schema.\r\n * be aware, that it is not possible to reproduce the original xml from a simplified version, because the order of elements is not saved.\r\n * therefore your programm will be more flexible and easyer to read.\r\n *\r\n * @param {array} the childrenList\r\n */\r\ntXml.simplify = function simplify(children) {\r\n    var out = {};\r\n    if (!children || !children.length) {\r\n        return '';\r\n    }\r\n\r\n    if (children.length === 1 && typeof children[0] == 'string') {\r\n        return children[0];\r\n    }\r\n    // map each object\r\n    children.forEach(function (child) {\r\n        if (typeof child !== 'object') {\r\n            return;\r\n        }\r\n        if (!out[child.tagName])\r\n            out[child.tagName] = [];\r\n        var kids = tXml.simplify(child.children);\r\n        out[child.tagName].push(kids);\r\n        if (child.attributes) {\r\n            kids._attributes = child.attributes;\r\n        }\r\n    });\r\n\r\n    for (var i in out) {\r\n        if (out[i].length == 1) {\r\n            out[i] = out[i][0];\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\n/**\r\n * behaves the same way as Array.filter, if the filter method return true, the element is in the resultList\r\n * @params children{Array} the children of a node\r\n * @param f{function} the filter method\r\n */\r\ntXml.filter = function (children, f) {\r\n    var out = [];\r\n    children.forEach(function (child) {\r\n        if (typeof (child) === 'object' && f(child)) out.push(child);\r\n        if (child.children) {\r\n            var kids = tXml.filter(child.children, f);\r\n            out = out.concat(kids);\r\n        }\r\n    });\r\n    return out;\r\n};\r\n\r\n/**\r\n * stringify a previously parsed string object.\r\n * this is useful,\r\n *  1. to remove whitespaces\r\n * 2. to recreate xml data, with some changed data.\r\n * @param O{tXMLDomObject} the object to Stringify\r\n */\r\ntXml.stringify = function TOMObjToXML(O) {\r\n    var out = '';\r\n\r\n    function writeChildren(O) {\r\n        if (O)\r\n            for (var i = 0; i < O.length; i++) {\r\n                if (typeof O[i] == 'string') {\r\n                    out += O[i].trim();\r\n                } else {\r\n                    writeNode(O[i]);\r\n                }\r\n            }\r\n    }\r\n\r\n    function writeNode(N) {\r\n        out += \"<\" + N.tagName;\r\n        for (var i in N.attributes) {\r\n            if (N.attributes[i] === null) {\r\n                out += ' ' + i;\r\n            } else if (N.attributes[i].indexOf('\"') === -1) {\r\n                out += ' ' + i + '=\"' + N.attributes[i].trim() + '\"';\r\n            } else {\r\n                out += ' ' + i + \"='\" + N.attributes[i].trim() + \"'\";\r\n            }\r\n        }\r\n        out += '>';\r\n        writeChildren(N.children);\r\n        out += '</' + N.tagName + '>';\r\n    }\r\n    writeChildren(O);\r\n\r\n    return out;\r\n};\r\n\r\n\r\n/**\r\n * use this method to read the textcontent, of some node.\r\n * It is great if you have mixed content like:\r\n * this text has some <b>big</b> text and a <a href=''>link</a>\r\n */\r\ntXml.toContentString = function (tDom) {\r\n    if (Array.isArray(tDom)) {\r\n        var out = '';\r\n        tDom.forEach(function (e) {\r\n            out += ' ' + tXml.toContentString(e);\r\n            out = out.trim();\r\n        });\r\n        return out;\r\n    } else if (typeof tDom === 'object') {\r\n        return tXml.toContentString(tDom.children)\r\n    } else {\r\n        return ' ' + tDom;\r\n    }\r\n};\r\n\r\ntXml.getElementById = function (S, id, simplified) {\r\n    var out = tXml(S, {\r\n        attrValue: id,\r\n        simplify: simplified\r\n    });\r\n    return simplified ? out : out[0];\r\n};\r\n/**\r\n * A fast parsing method, that not realy finds by classname,\r\n * more: the class attribute contains XXX\r\n * @param\r\n */\r\ntXml.getElementsByClassName = function (S, classname, simplified) {\r\n    return tXml(S, {\r\n        attrName: 'class',\r\n        attrValue: '[a-zA-Z0-9\\-\\s ]*' + classname + '[a-zA-Z0-9\\-\\s ]*',\r\n        simplify: simplified\r\n    });\r\n};\r\n\r\nif ('object' === typeof module) {\r\n    module.exports = tXml;\r\n}\r\n//console.clear();\r\n//console.log('here:',tXml.getElementById('<some><xml id=\"test\">dada</xml><that id=\"test\">value</that></some>','test'));\r\n//console.log('here:',tXml.getElementsByClassName('<some><xml id=\"test\" class=\"sdf test jsalf\">dada</xml><that id=\"test\">value</that></some>','test'));\r\n\r\n/*\r\nconsole.clear();\r\ntXml(d,'content');\r\n //some testCode\r\nvar s = document.body.innerHTML.toLowerCase();\r\nvar start = new Date().getTime();\r\nvar o = tXml(s,'content');\r\nvar end = new Date().getTime();\r\n//console.log(JSON.stringify(o,undefined,'\\t'));\r\nconsole.log(\"MILLISECONDS\",end-start);\r\nvar nodeCount=document.querySelectorAll('*').length;\r\nconsole.log('node count',nodeCount);\r\nconsole.log(\"speed:\",(1000/(end-start))*nodeCount,'Nodes / second')\r\n//console.log(JSON.stringify(tXml('<html><head><title>testPage</title></head><body><h1>TestPage</h1><p>this is a <b>test</b>page</p></body></html>'),undefined,'\\t'));\r\nvar p = new DOMParser();\r\nvar s2='<body>'+s+'</body>'\r\nvar start2= new Date().getTime();\r\nvar o2 = p.parseFromString(s2,'text/html').querySelector('#content')\r\nvar end2=new Date().getTime();\r\nconsole.log(\"MILLISECONDS\",end2-start2);\r\n// */\r\n\r\n\r\n(function () {\r\n\r\n    var simplify = function simplify(children, attributes) {\r\n        var out = {};\r\n        if ((!children || !children.length) && !attributes) {\r\n            return '';\r\n        }\r\n        children = children || [];\r\n\r\n        if (children.length === 1 && typeof children[0] == 'string') {\r\n            return children[0];\r\n        }\r\n        // map each object\r\n        children.forEach(function (child) {\r\n            if (typeof child !== 'object') {\r\n                return;\r\n            }\r\n            var prefixIdx = child.tagName.indexOf('ows:');\r\n            var tagName = prefixIdx < 0 ? child.tagName : child.tagName.substr(prefixIdx + 4);\r\n            if (!out[tagName])\r\n                out[tagName] = [];\r\n            var kids = simplify(child.children, child.attributes);\r\n            out[tagName].push(kids);\r\n            if (child.attributes) {\r\n                for (var key in child.attributes) {\r\n                    kids[key] = child.attributes[key];\r\n                }\r\n            }\r\n        });\r\n\r\n        for (var i in out) {\r\n            if (out[i].length == 1) {\r\n                out[i] = out[i][0];\r\n            }\r\n        }\r\n\r\n        return out;\r\n    };\r\n\r\n    var flattenOnlineResource = function (olr) {\r\n        return olr['href'];\r\n    };\r\n\r\n    var flattenLayerUrls = function (layer, tag) {\r\n        if (layer.hasOwnProperty(tag)) {\r\n            var tagObj = layer[tag];\r\n            var urls = tagObj.length ? tagObj : [tagObj];\r\n            for (var i = 0, len = urls.length; i < len; i++) {\r\n                var url = urls[i];\r\n                url.OnlineResource = flattenOnlineResource(url.OnlineResource);\r\n            }\r\n            layer[tag] = urls;\r\n        }\r\n    };\r\n\r\n    var processDCPType = function (node) {\r\n        if (node) {\r\n            var dcpts = node.DCPType.length ? node.DCPType : [node.DCPType];\r\n            for (var i = 0, len = dcpts.length; i < len; i++) {\r\n                var dcpt = dcpts[i];\r\n                for (var protocol in dcpt) {\r\n                    var dcptp = dcpt[protocol];\r\n                    for (var verb in dcptp) {\r\n                        var dcptpv = dcptp[verb];\r\n                        dcptpv.OnlineResource = flattenOnlineResource(dcptpv.OnlineResource);\r\n                    }\r\n                }\r\n            }\r\n            node.DCPType = dcpts;\r\n        }\r\n    };\r\n\r\n    var booleanValues = [false, true];\r\n    var processWMSLayer = function processWMSLayer(layer, crsList) {\r\n        // Transformamos booleanos\r\n        if (layer.hasOwnProperty('queryable')) {\r\n            layer.queryable = booleanValues[layer.queryable];\r\n        }\r\n        var bbox;\r\n        // Convertimos EX_GeographicBoundingBox a array\r\n        if (layer.hasOwnProperty('EX_GeographicBoundingBox')) {\r\n            bbox = layer.EX_GeographicBoundingBox;\r\n            layer.EX_GeographicBoundingBox = [\r\n                parseFloat(bbox.westBoundLongitude),\r\n                parseFloat(bbox.southBoundLatitude),\r\n                parseFloat(bbox.eastBoundLongitude),\r\n                parseFloat(bbox.northBoundLatitude)\r\n            ]\r\n        }\r\n        // Convertimos BoundingBox a array\r\n        if (layer.hasOwnProperty('BoundingBox')) {\r\n            bbox = layer.BoundingBox;\r\n            bbox = layer.BoundingBox.length ? layer.BoundingBox : [layer.BoundingBox];\r\n            layer.BoundingBox = bbox.map(function (elm) {\r\n                return {\r\n                    crs: elm.CRS,\r\n                    extent: [\r\n                        parseFloat(elm.minx),\r\n                        parseFloat(elm.miny),\r\n                        parseFloat(elm.maxx),\r\n                        parseFloat(elm.maxy)\r\n                    ],\r\n                    res: new Array(2)\r\n                }\r\n            });\r\n        }\r\n        // Convertimos OnlineResource a string\r\n        if (layer.hasOwnProperty('Attribution') && layer.Attribution.OnlineResource) {\r\n            layer.Attribution.OnlineResource = flattenOnlineResource(layer.Attribution.OnlineResource);\r\n        }\r\n        flattenLayerUrls(layer, 'AuthorityURL');\r\n        flattenLayerUrls(layer, 'MetadataURL');\r\n        // Convertimos Style a array\r\n        if (layer.Style) {\r\n            if (!layer.Style.length) {\r\n                layer.Style = [layer.Style];\r\n            }\r\n            // Convertimos OnlineResource a string\r\n            for (var i = 0, len = layer.Style.length; i < len; i++) {\r\n                flattenLayerUrls(layer.Style[i], 'LegendURL');\r\n            }\r\n        }\r\n        // Hacemos heredar la lista de CRS\r\n        var newCrsList = typeof layer.CRS === 'string' ? [layer.CRS] : layer.CRS;\r\n        if (crsList) {\r\n            if (layer.CRS) {\r\n                layer.CRS = newCrsList.concat(crsList);\r\n            }\r\n        }\r\n        if (layer.Layer) {\r\n            var children = layer.Layer[1] ? layer.Layer : [layer.Layer];\r\n            layer.Layer = children;\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                processWMSLayer(children[i], newCrsList);\r\n            }\r\n        }\r\n    };\r\n\r\n    var cornerSeparator = ' ';\r\n    var parseCorner = function (cornerString) {\r\n        return cornerString.split(cornerSeparator).map(function (elm) {\r\n            return parseFloat(elm);\r\n        });\r\n    };\r\n\r\n    var processWMTSLayers = function (contents) {\r\n        if (!contents.Layer.length) {\r\n            contents.Layer = [contents.Layer];\r\n        }\r\n        var layers = contents.Layer;\r\n        for (var i = 0, len = layers.length; i < len; i++) {\r\n            var layer = layers[i];\r\n            if (typeof layer.Format === 'string') {\r\n                layer.Format = [layer.Format];\r\n            }\r\n            if (layer.ResourceURL && !layer.ResourceURL.length) {\r\n                layer.ResourceURL = [layer.ResourceURL];\r\n            }\r\n            if (!layer.Style.length) {\r\n                layer.Style = [layer.Style];\r\n            }\r\n            if (!layer.TileMatrixSetLink.length) {\r\n                layer.TileMatrixSetLink = [layer.TileMatrixSetLink];\r\n            }\r\n            for (var j = 0, lenj = layer.TileMatrixSetLink.length; j < lenj; j++) {\r\n                var tmsl = layer.TileMatrixSetLink[j];\r\n                if (tmsl.TileMatrixSetLimits) {\r\n                    tmsl.TileMatrixSetLimits = tmsl.TileMatrixSetLimits.TileMatrixLimits;\r\n                    for (var k = 0, lenk = tmsl.TileMatrixSetLimits.length; k < lenk; k++) {\r\n                        var tmslm = tmsl.TileMatrixSetLimits[k];\r\n                        tmslm.MaxTileCol = parseInt(tmslm.MaxTileCol);\r\n                        tmslm.MaxTileRow = parseInt(tmslm.MaxTileRow);\r\n                        tmslm.MinTileCol = parseInt(tmslm.MinTileCol);\r\n                        tmslm.MinTileRow = parseInt(tmslm.MinTileRow);\r\n                    }\r\n                }\r\n                else {\r\n                    tmsl.TileMatrixSetLimits = [];\r\n                }\r\n            }\r\n            if (layer.WGS84BoundingBox) {\r\n                var lowerCorner = parseCorner(layer.WGS84BoundingBox.LowerCorner);\r\n                var upperCorner = parseCorner(layer.WGS84BoundingBox.UpperCorner);\r\n                layer.WGS84BoundingBox = [\r\n                    lowerCorner[0],\r\n                    lowerCorner[1],\r\n                    upperCorner[0],\r\n                    upperCorner[1]\r\n                ];\r\n            }\r\n        }\r\n    };\r\n\r\n    var processTMS = function (contents) {\r\n        if (!contents.TileMatrixSet.length) {\r\n            contents.TileMatrixSet = [contents.TileMatrixSet];\r\n        }\r\n        var tileMatrixSets = contents.TileMatrixSet;\r\n        for (var i = 0, len = tileMatrixSets.length; i < len; i++) {\r\n            var tms = tileMatrixSets[i];\r\n            for (var j = 0, lenj = tms.TileMatrix.length; j < lenj; j++) {\r\n                var tm = tms.TileMatrix[j];\r\n                tm.MatrixHeight = parseInt(tm.MatrixHeight);\r\n                tm.MatrixWidth = parseInt(tm.MatrixWidth);\r\n                tm.TileHeight = parseInt(tm.TileHeight);\r\n                tm.TileWidth = parseInt(tm.TileWidth);\r\n                tm.ScaleDenominator = parseFloat(tm.ScaleDenominator);\r\n                tm.TopLeftCorner = parseCorner(tm.TopLeftCorner);\r\n            }\r\n        }\r\n    };\r\n\r\n    var processDCPVerb = function (dcpVerb) {\r\n        var verbs = dcpVerb.length ? dcpVerb : [dcpVerb];\r\n        var result = new Array(verbs.length);\r\n        for (var i = 0, len = verbs.length; i < len; i++) {\r\n            var verb = verbs[i];\r\n            if (!verb.Constraint.length) {\r\n                verb.Constraint = [verb.Constraint];\r\n                for (var j = 0, lenj = verb.Constraint.length; j < lenj; j++) {\r\n                    var allowedValues = verb.Constraint[j].AllowedValues;\r\n                    if (typeof allowedValues.Value === 'string') {\r\n                        allowedValues.Value = [allowedValues.Value];\r\n                    }\r\n                }\r\n            }\r\n            result[i] = {\r\n                Constraint: verb.Constraint,\r\n                href: verb['href']\r\n            };\r\n        }\r\n        return result;\r\n    };\r\n\r\n    var processOM = function (om) {\r\n        var operations = om.Operation.length ? om.Operation : [om.Operation];\r\n        for (var i = 0, len = operations.length; i < len; i++) {\r\n            var operation = operations[i];\r\n            for (var protocol in operation.DCP) {\r\n                var protocolProp = operation.DCP[protocol];\r\n                for (var verb in protocolProp) {\r\n                    protocolProp[verb] = processDCPVerb(protocolProp[verb]);\r\n                }\r\n            }\r\n            om[operation.name] = {\r\n                DCP: operation.DCP\r\n            }\r\n        }\r\n        delete om.Operation;\r\n    };\r\n\r\n    var postprocessWMS = function (xml) {\r\n        var capabilities = xml['WMS_Capabilities'] || (xml['?xml'] && (xml['?xml']['WMS_Capabilities'] || xml['?xml']['WMT_MS_Capabilities']));\r\n        if (capabilities) {\r\n            processWMSLayer(capabilities.Capability.Layer);\r\n            var request = capabilities.Capability.Request;\r\n            processDCPType(request.GetMap);\r\n            if (request.GetFeatureInfo) {\r\n                request.GetFeatureInfo.Format = typeof request.GetFeatureInfo.Format === 'string' ? [request.GetFeatureInfo.Format] : request.GetFeatureInfo.Format;\r\n            }\r\n        }\r\n        return capabilities;\r\n    };\r\n\r\n    var postprocessWMTS = function (xml) {\r\n        var capabilities = xml['?xml'] && xml['?xml']['Capabilities'];\r\n        if (capabilities) {\r\n            processWMTSLayers(capabilities.Contents);\r\n            processTMS(capabilities.Contents);\r\n            processOM(capabilities.OperationsMetadata);\r\n        }\r\n        return capabilities;\r\n    };\r\n\r\n    onmessage = function (e) {\r\n        var xml = simplify(tXml(e.data.text));\r\n        var capabilities = e.data.type === 'WMTS' ? postprocessWMTS(xml) : postprocessWMS(xml);\r\n        postMessage({\r\n            state: capabilities ? 'success' : 'error',\r\n            capabilities: capabilities\r\n        });\r\n    };\r\n\r\n})();\r\n"],"file":"../../workers/tc-caps-web-worker.min.js"}