{"version":3,"sources":["feature/Point.js"],"names":["TC","feature","Feature","syncLoadJS","apiLocation","Point","coords","options","apply","this","arguments","wrap","isNative","Util","extend","Cfg","styles","point","createPoint","inherit","prototype","STYLETYPE","Consts","geom","POINT","CLASSNAME","getCoords","call","pointArray"],"mappings":"AAAAA,GAAGC,QAAUD,GAAGC,SAAW,GAEtBD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAgDnCJ,GAAGC,QAAQI,MAAQ,SAAUC,EAAQC,GAGjCP,GAAGE,QAAQM,MAFAC,KAEYC,WAEvB,IAJWD,KAIDE,KAAKC,SAASN,GAAS,CAJtBG,KAKFE,KAAKV,QAAUK,EACpBC,EANOE,KAMQF,QAAUP,GAAGa,KAAKC,QAAO,EANjCL,KAM4CF,QAASP,GAAGe,IAAIC,OAAOC,MAAOV,GAN1EE,KAOFE,KAAKO,YAAYZ,EAAQC,KAItCP,GAAGmB,QAAQnB,GAAGC,QAAQI,MAAOL,GAAGE,SAEhCF,GAAGC,QAAQI,MAAMe,UAAUC,UAAYrB,GAAGsB,OAAOC,KAAKC,MAEtDxB,GAAGC,QAAQI,MAAMe,UAAUK,UAAY,mBAEvCzB,GAAGC,QAAQI,MAAMe,UAAUM,UAAY,SAAUnB,GAC7CA,EAAUA,GAAW,GACrB,MAAMD,EAASN,GAAGE,QAAQkB,UAAUM,UAAUC,KAAKlB,KAAMF,GACzD,OAAIA,EAAQqB,WACD,CAACtB,GAELA","sourcesContent":["TC.feature = TC.feature || {};\r\n\r\nif (!TC.Feature) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Feature');\r\n}\r\n\r\n/**\r\n * <p>Opciones de estilo de punto. Esta clase no tiene constructor.</p>\r\n * @class TC.cfg.PointStyleOptions\r\n * @static\r\n */\r\n/**\r\n * Radio en píxeles del símbolo del punto.\r\n * @property radius\r\n * @type number\r\n * @default 8\r\n */\r\n/**\r\n * Color de relleno del símbolo del punto. Cadena en formato <code>#rgb</code>, <code>#rrggbb</code>, <code>rgb(r,g,b)</code> o <code>rgba(r,g,b,a)</code>.\r\n * @property fillColor\r\n * @type string\r\n */\r\n/**\r\n * Opacidad de relleno del símbolo del punto. Número entre 0 (transparente) y 1 (opaco).\r\n * @property fillOpacity\r\n * @type number\r\n */\r\n/**\r\n * Color de línea del símbolo del punto. Cadena en formato <code>#rgb</code>, <code>#rrggbb</code>, <code>rgb(r,g,b)</code> o <code>rgba(r,g,b,a)</code>.\r\n * @property strokeColor\r\n * @type string\r\n */\r\n/**\r\n * Ancho de línea en píxeles del símbolo del punto.\r\n * @property strokeWidth\r\n * @type number\r\n * @default 2\r\n */\r\n/**\r\n * Nombre del grupo en el que incluir el punto. Los grupos de puntos son entidades para facilitar la organización de estos, \r\n * ya que un grupo se mostrará en la tabla de contenidos y en la leyenda.\r\n * @property group\r\n * @type string\r\n * @default 32\r\n */\r\n\r\n/*\r\n * Map marker, with icon\r\n * Parameters: coords, 2 element array of numbers or OpenLayers vector; options, object\r\n * available options: url, cssClass, group, width, height, anchor\r\n */\r\nTC.feature.Point = function (coords, options) {\r\n    var self = this;\r\n\r\n    TC.Feature.apply(self, arguments);\r\n\r\n    if (!self.wrap.isNative(coords)) {\r\n        self.wrap.feature = coords;\r\n        options = self.options = TC.Util.extend(true, self.options, TC.Cfg.styles.point, options);\r\n        self.wrap.createPoint(coords, options);\r\n    }\r\n};\r\n\r\nTC.inherit(TC.feature.Point, TC.Feature);\r\n\r\nTC.feature.Point.prototype.STYLETYPE = TC.Consts.geom.POINT;\r\n\r\nTC.feature.Point.prototype.CLASSNAME = 'TC.feature.Point';\r\n\r\nTC.feature.Point.prototype.getCoords = function (options) {\r\n    options = options || {};\r\n    const coords = TC.Feature.prototype.getCoords.call(this, options);\r\n    if (options.pointArray) {\r\n        return [coords];\r\n    }\r\n    return coords;\r\n};"]}