{"version":3,"sources":["feature/MultiPolyline.js"],"names":["TC","feature","Feature","syncLoadJS","apiLocation","MultiPolyline","coords","options","opts","apply","this","arguments","wrap","isNative","_wrap","$","extend","Cfg","styles","line","createMultiPolyline","inherit","prototype","STYLETYPE","CLASSNAME","getCoords","call","pointArray","concat","getLength"],"mappings":"AAACA,GAAGC,QAAUD,GAAGC,YAEZD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAOnCJ,GAAGC,QAAQI,cAAgB,SAAUC,EAAQC,GACzC,IAIIC,EAFJR,GAAGE,QAAQO,MAFAC,KAEYC,WAGvB,GALWD,KAKFE,KAAKC,SAASP,GAAS,CAC5BA,EAAOQ,MANAJ,KAMaE,KANbF,KAOFE,KAAKX,QAAUK,MAEnB,CACDE,EAVOE,KAUKH,QAAUQ,EAAEC,QAAO,EAVxBN,KAUmCH,QAASP,GAAGiB,IAAIC,OAAOC,KAAMZ,GAVhEG,KAWFE,KAAKQ,oBAAoBd,EAAQE,KAI9CR,GAAGqB,QAAQrB,GAAGC,QAAQI,cAAeL,GAAGE,SAExCF,GAAGC,QAAQI,cAAciB,UAAUC,UAAY,OAE/CvB,GAAGC,QAAQI,cAAciB,UAAUE,UAAY,2BAE/CxB,GAAGC,QAAQI,cAAciB,UAAUG,UAAY,SAAUlB,GACrDA,EAAUA,MACV,MAAMD,EAASN,GAAGE,QAAQoB,UAAUG,UAAUC,KAAKhB,KAAMH,GACzD,OAAIA,EAAQoB,cACEC,OAAOnB,SAAUH,GAExBA,GAGXN,GAAGC,QAAQI,cAAciB,UAAUO,UAAY,SAAUtB,GACrD,OAAOG,KAAKE,KAAKiB,UAAUtB","sourcesContent":["TC.feature = TC.feature || {};\r\n\r\nif (!TC.Feature) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Feature');\r\n}\r\n\r\n/*\r\n * Polyline\r\n * Parameters: coords, array of 2 element arrays of numbers; options, object\r\n */\r\nTC.feature.MultiPolyline = function (coords, options) {\r\n    var self = this;\r\n\r\n    TC.Feature.apply(self, arguments);\r\n\r\n    var opts;\r\n    if (self.wrap.isNative(coords)) {\r\n        coords._wrap = self.wrap;\r\n        self.wrap.feature = coords;\r\n    }\r\n    else {\r\n        opts = self.options = $.extend(true, self.options, TC.Cfg.styles.line, options);\r\n        self.wrap.createMultiPolyline(coords, opts);\r\n    }\r\n};\r\n\r\nTC.inherit(TC.feature.MultiPolyline, TC.Feature);\r\n\r\nTC.feature.MultiPolyline.prototype.STYLETYPE = \"line\";\r\n\r\nTC.feature.MultiPolyline.prototype.CLASSNAME = 'TC.feature.MultiPolyline';\r\n\r\nTC.feature.MultiPolyline.prototype.getCoords = function (options) {\r\n    options = options || {};\r\n    const coords = TC.Feature.prototype.getCoords.call(this, options);\r\n    if (options.pointArray) {\r\n        return [].concat.apply([], coords);\r\n    }\r\n    return coords;\r\n};\r\n\r\nTC.feature.MultiPolyline.prototype.getLength = function (options) {\r\n    return this.wrap.getLength(options);\r\n};"],"file":"../../feature/MultiPolyline.min.js"}