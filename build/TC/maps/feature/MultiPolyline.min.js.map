{"version":3,"sources":["feature/MultiPolyline.js"],"names":["TC","feature","Feature","syncLoadJS","apiLocation","MultiPolyline","coords","options","self","this","apply","arguments","wrap","isNative","Util","extend","Cfg","styles","line","createMultiPolyline","inherit","prototype","STYLETYPE","CLASSNAME","getCoords","call","pointArray","concat","setCoords","Array","isArray","getLength"],"mappings":"AAAAA,GAAGC,QAAUD,GAAGC,SAAW,GAEtBD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAOnCJ,GAAGC,QAAQI,cAAgB,SAAUC,EAAQC,GACzC,MAAMC,EAAOC,KAEbT,GAAGE,QAAQQ,MAAMF,EAAMG,WAEvB,IAAKH,EAAKI,KAAKC,SAASP,GAAS,CAC7BC,EAAUC,EAAKD,QAAUP,GAAGc,KAAKC,QAAO,EAAMP,EAAKD,QAASP,GAAGgB,IAAIC,OAAOC,KAAMX,GAChFC,EAAKI,KAAKO,oBAAoBb,EAAQC,KAI9CP,GAAGoB,QAAQpB,GAAGC,QAAQI,cAAeL,GAAGE,SAExCF,GAAGC,QAAQI,cAAcgB,UAAUC,UAAY,OAE/CtB,GAAGC,QAAQI,cAAcgB,UAAUE,UAAY,2BAE/CvB,GAAGC,QAAQI,cAAcgB,UAAUG,UAAY,SAAUjB,GACrDA,EAAUA,GAAW,GACrB,MAAMD,EAASN,GAAGE,QAAQmB,UAAUG,UAAUC,KAAKhB,KAAMF,GACzD,OAAIA,EAAQmB,WACD,GAAGC,OAAOjB,MAAM,GAAIJ,GAExBA,GAGXN,GAAGC,QAAQI,cAAcgB,UAAUO,UAAY,SAAUtB,GAEjDuB,MAAMC,QAAQxB,IAAWuB,MAAMC,QAAQxB,EAAO,MAAQuB,MAAMC,QAAQxB,EAAO,GAAG,MAC9EA,EAAS,CAACA,IAEd,OAAON,GAAGE,QAAQmB,UAAUO,UAAUH,KAJzBhB,KAIoCH,IAGrDN,GAAGC,QAAQI,cAAcgB,UAAUU,UAAY,SAAUxB,GACrD,OAAOE,KAAKG,KAAKmB,UAAUxB","sourcesContent":["TC.feature = TC.feature || {};\r\n\r\nif (!TC.Feature) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Feature');\r\n}\r\n\r\n/*\r\n * Polyline\r\n * Parameters: coords, array of 2 element arrays of numbers; options, object\r\n */\r\nTC.feature.MultiPolyline = function (coords, options) {\r\n    const self = this;\r\n\r\n    TC.Feature.apply(self, arguments);\r\n\r\n    if (!self.wrap.isNative(coords)) {\r\n        options = self.options = TC.Util.extend(true, self.options, TC.Cfg.styles.line, options);\r\n        self.wrap.createMultiPolyline(coords, options);\r\n    }\r\n};\r\n\r\nTC.inherit(TC.feature.MultiPolyline, TC.Feature);\r\n\r\nTC.feature.MultiPolyline.prototype.STYLETYPE = \"line\";\r\n\r\nTC.feature.MultiPolyline.prototype.CLASSNAME = 'TC.feature.MultiPolyline';\r\n\r\nTC.feature.MultiPolyline.prototype.getCoords = function (options) {\r\n    options = options || {};\r\n    const coords = TC.Feature.prototype.getCoords.call(this, options);\r\n    if (options.pointArray) {\r\n        return [].concat.apply([], coords);\r\n    }\r\n    return coords;\r\n};\r\n\r\nTC.feature.MultiPolyline.prototype.setCoords = function (coords) {\r\n    const self = this;\r\n    if (Array.isArray(coords) && Array.isArray(coords[0]) && !Array.isArray(coords[0][0])) {\r\n        coords = [coords];\r\n    }\r\n    return TC.Feature.prototype.setCoords.call(self, coords);\r\n};\r\n\r\nTC.feature.MultiPolyline.prototype.getLength = function (options) {\r\n    return this.wrap.getLength(options);\r\n};"]}