{"version":3,"sources":["feature/Polygon.js"],"names":["TC","feature","Feature","syncLoadJS","apiLocation","Polygon","coords","options","self","this","apply","arguments","wrap","isNative","Util","extend","Cfg","styles","polygon","createPolygon","inherit","prototype","STYLETYPE","Consts","geom","POLYGON","CLASSNAME","getCoords","call","pointArray","concat","setCoords","Array","isArray","Error","forEach","ring","startPoint","endPoint","length","getLength","getArea"],"mappings":"AAAAA,GAAGC,QAAUD,GAAGC,SAAW,GAEtBD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAOnCJ,GAAGC,QAAQI,QAAU,SAAUC,EAAQC,GACnC,MAAMC,EAAOC,KAEbT,GAAGE,QAAQQ,MAAMF,EAAMG,WAEvB,IAAKH,EAAKI,KAAKC,SAASP,GAAS,CAC7BC,EAAUC,EAAKD,QAAUP,GAAGc,KAAKC,QAAO,EAAMP,EAAKD,QAASP,GAAGgB,IAAIC,OAAOC,QAASX,GACnFC,EAAKI,KAAKO,cAAcb,EAAQC,KAIxCP,GAAGoB,QAAQpB,GAAGC,QAAQI,QAASL,GAAGE,SAElCF,GAAGC,QAAQI,QAAQgB,UAAUC,UAAYtB,GAAGuB,OAAOC,KAAKC,QAExDzB,GAAGC,QAAQI,QAAQgB,UAAUK,UAAY,qBAEzC1B,GAAGC,QAAQI,QAAQgB,UAAUM,UAAY,SAAUpB,GAC/CA,EAAUA,GAAW,GACrB,MAAMD,EAASN,GAAGE,QAAQmB,UAAUM,UAAUC,KAAKnB,KAAMF,GACzD,OAAIA,EAAQsB,WACD,GAAGC,OAAOpB,MAAM,GAAIJ,GAExBA,GAGXN,GAAGC,QAAQI,QAAQgB,UAAUU,UAAY,SAAUzB,GAE/C,IAAI0B,MAAMC,QAAQ3B,KAAW0B,MAAMC,QAAQ3B,EAAO,IAM9C,MAAM,IAAI4B,MAAM,qCALXF,MAAMC,QAAQ3B,EAAO,GAAG,MACzBA,EAAS,CAACA,IAMlBA,EAAO6B,QAAQ,SAAUC,GACrB,MAAMC,EAAaD,EAAK,GAClBE,EAAWF,EAAKA,EAAKG,OAAS,GAChCF,EAAW,KAAOC,EAAS,IAAMD,EAAW,KAAOC,EAAS,KAC5DF,EAAKA,EAAKG,QAAUF,KAG5B,OAAOrC,GAAGE,QAAQmB,UAAUU,UAAUH,KAhBzBnB,KAgBoCH,IAGrDN,GAAGC,QAAQI,QAAQgB,UAAUmB,UAAY,SAAUjC,GAC/C,OAAOE,KAAKG,KAAK4B,UAAUjC,IAG/BP,GAAGC,QAAQI,QAAQgB,UAAUoB,QAAU,SAAUlC,GAC7C,OAAOE,KAAKG,KAAK6B,QAAQlC","sourcesContent":["TC.feature = TC.feature || {};\r\n\r\nif (!TC.Feature) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Feature');\r\n}\r\n\r\n/*\r\n * Polygon\r\n * Parameters: coords, array of array of 2 element arrays of numbers; options, object\r\n */\r\nTC.feature.Polygon = function (coords, options) {\r\n    const self = this;\r\n\r\n    TC.Feature.apply(self, arguments);\r\n\r\n    if (!self.wrap.isNative(coords)) {\r\n        options = self.options = TC.Util.extend(true, self.options, TC.Cfg.styles.polygon, options);\r\n        self.wrap.createPolygon(coords, options);\r\n    }\r\n};\r\n\r\nTC.inherit(TC.feature.Polygon, TC.Feature);\r\n\r\nTC.feature.Polygon.prototype.STYLETYPE = TC.Consts.geom.POLYGON;\r\n\r\nTC.feature.Polygon.prototype.CLASSNAME = 'TC.feature.Polygon';\r\n\r\nTC.feature.Polygon.prototype.getCoords = function (options) {\r\n    options = options || {};\r\n    const coords = TC.Feature.prototype.getCoords.call(this, options);\r\n    if (options.pointArray) {\r\n        return [].concat.apply([], coords);\r\n    }\r\n    return coords;\r\n};\r\n\r\nTC.feature.Polygon.prototype.setCoords = function (coords) {\r\n    const self = this;\r\n    if (Array.isArray(coords) && Array.isArray(coords[0])) {\r\n        if (!Array.isArray(coords[0][0])) {\r\n            coords = [coords];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Coordinates not valid for polygon');\r\n    }\r\n    coords.forEach(function (ring) {\r\n        const startPoint = ring[0];\r\n        const endPoint = ring[ring.length - 1];\r\n        if (startPoint[0] !== endPoint[0] || startPoint[1] !== endPoint[1]) {\r\n            ring[ring.length] = startPoint;\r\n        }\r\n    });\r\n    return TC.Feature.prototype.setCoords.call(self, coords);\r\n};\r\n\r\nTC.feature.Polygon.prototype.getLength = function (options) {\r\n    return this.wrap.getLength(options);\r\n};\r\n\r\nTC.feature.Polygon.prototype.getArea = function (options) {\r\n    return this.wrap.getArea(options);\r\n};"]}