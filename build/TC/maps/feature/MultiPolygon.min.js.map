{"version":3,"sources":["feature/MultiPolygon.js"],"names":["TC","feature","Feature","syncLoadJS","apiLocation","MultiPolygon","coords","options","opts","apply","this","arguments","wrap","isNative","_wrap","$","extend","Cfg","styles","polygon","createMultiPolygon","inherit","prototype","STYLETYPE","Consts","geom","POLYGON","CLASSNAME","getCoords","call","pointArray","concat","getLength"],"mappings":"AAACA,GAAGC,QAAUD,GAAGC,YAEZD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAOnCJ,GAAGC,QAAQI,aAAe,SAAUC,EAAQC,GACxC,IAGIC,EAFJR,GAAGE,QAAQO,MADAC,KACYC,WAGvB,GAJWD,KAIFE,KAAKC,SAASP,GAAS,CAC5BA,EAAOQ,MALAJ,KAKaE,KALbF,KAMFE,KAAKX,QAAUK,MAEnB,CACDE,EATOE,KASKH,QAAUQ,EAAEC,QAAO,EATxBN,KASmCH,QAASP,GAAGiB,IAAIC,OAAOC,QAASZ,GATnEG,KAUFE,KAAKQ,mBAAmBd,EAAQE,KAI7CR,GAAGqB,QAAQrB,GAAGC,QAAQI,aAAcL,GAAGE,SAEvCF,GAAGC,QAAQI,aAAaiB,UAAUC,UAAYvB,GAAGwB,OAAOC,KAAKC,QAE7D1B,GAAGC,QAAQI,aAAaiB,UAAUK,UAAY,0BAE9C3B,GAAGC,QAAQI,aAAaiB,UAAUM,UAAY,SAAUrB,GACpDA,EAAUA,MACV,MAAMD,EAASN,GAAGE,QAAQoB,UAAUM,UAAUC,KAAKnB,KAAMH,GACzD,OAAIA,EAAQuB,cACEC,OAAOtB,YAAasB,OAAOtB,SAAUH,IAE5CA,GAGXN,GAAGC,QAAQI,aAAaiB,UAAUU,UAAY,SAAUzB,GACpD,OAAOG,KAAKE,KAAKoB,UAAUzB","sourcesContent":["TC.feature = TC.feature || {};\r\n\r\nif (!TC.Feature) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Feature');\r\n}\r\n\r\n/*\r\n * MultiPolygon\r\n * Parameters: coords, array of array of array of 2 element arrays of numbers; options, object\r\n */\r\nTC.feature.MultiPolygon = function (coords, options) {\r\n    var self = this;\r\n    TC.Feature.apply(self, arguments);\r\n\r\n    var opts;\r\n    if (self.wrap.isNative(coords)) {\r\n        coords._wrap = self.wrap;\r\n        self.wrap.feature = coords;\r\n    }\r\n    else {\r\n        opts = self.options = $.extend(true, self.options, TC.Cfg.styles.polygon, options);\r\n        self.wrap.createMultiPolygon(coords, opts);\r\n    }\r\n};\r\n\r\nTC.inherit(TC.feature.MultiPolygon, TC.Feature);\r\n\r\nTC.feature.MultiPolygon.prototype.STYLETYPE = TC.Consts.geom.POLYGON;\r\n\r\nTC.feature.MultiPolygon.prototype.CLASSNAME = 'TC.feature.MultiPolygon';\r\n\r\nTC.feature.MultiPolygon.prototype.getCoords = function (options) {\r\n    options = options || {};\r\n    const coords = TC.Feature.prototype.getCoords.call(this, options);\r\n    if (options.pointArray) {\r\n        return [].concat.apply([], [].concat.apply([], coords));\r\n    }\r\n    return coords;\r\n};\r\n\r\nTC.feature.MultiPolygon.prototype.getLength = function (options) {\r\n    return this.wrap.getLength(options);\r\n};"],"file":"../../feature/MultiPolygon.min.js"}