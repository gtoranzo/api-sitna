{"version":3,"sources":["feature/MultiPolygon.js"],"names":["TC","feature","Feature","syncLoadJS","apiLocation","MultiPolygon","coords","options","self","this","apply","arguments","wrap","isNative","createMultiPolygon","inherit","prototype","STYLETYPE","Consts","geom","POLYGON","CLASSNAME","getCoords","call","pointArray","concat","setCoords","Array","isArray","Error","forEach","polygon","ring","startPoint","endPoint","length","getLength"],"mappings":"AAAAA,GAAGC,QAAUD,GAAGC,SAAW,GAEtBD,GAAGE,SACJF,GAAGG,WAAWH,GAAGI,YAAc,cAOnCJ,GAAGC,QAAQI,aAAe,SAAUC,EAAQC,GACxC,MAAMC,EAAOC,KAEbT,GAAGE,QAAQQ,MAAMF,EAAMG,WAElBH,EAAKI,KAAKC,SAASP,IACpBE,EAAKI,KAAKE,mBAAmBR,EAAQC,IAI7CP,GAAGe,QAAQf,GAAGC,QAAQI,aAAcL,GAAGE,SAEvCF,GAAGC,QAAQI,aAAaW,UAAUC,UAAYjB,GAAGkB,OAAOC,KAAKC,QAE7DpB,GAAGC,QAAQI,aAAaW,UAAUK,UAAY,0BAE9CrB,GAAGC,QAAQI,aAAaW,UAAUM,UAAY,SAAUf,GACpDA,EAAUA,GAAW,GACrB,MAAMD,EAASN,GAAGE,QAAQc,UAAUM,UAAUC,KAAKd,KAAMF,GACzD,OAAIA,EAAQiB,WACD,GAAGC,OAAOf,MAAM,GAAI,GAAGe,OAAOf,MAAM,GAAIJ,IAE5CA,GAGXN,GAAGC,QAAQI,aAAaW,UAAUU,UAAY,SAAUpB,GAEpD,IAAIqB,MAAMC,QAAQtB,KAAWqB,MAAMC,QAAQtB,EAAO,IAS9C,MAAM,IAAIuB,MAAM,0CARXF,MAAMC,QAAQtB,EAAO,GAAG,IAGnBqB,MAAMC,QAAQtB,EAAO,GAAG,GAAG,MACjCA,EAAS,CAACA,IAHVA,EAAS,CAAC,CAACA,IASnBA,EAAOwB,QAAQ,SAAUC,GACrBA,EAAQD,QAAQ,SAAUE,GACtB,MAAMC,EAAaD,EAAK,GAClBE,EAAWF,EAAKA,EAAKG,OAAS,GAChCF,EAAW,KAAOC,EAAS,IAAMD,EAAW,KAAOC,EAAS,KAC5DF,EAAKA,EAAKG,QAAUF,OAIhC,OAAOjC,GAAGE,QAAQc,UAAUU,UAAUH,KArBzBd,KAqBoCH,IAGrDN,GAAGC,QAAQI,aAAaW,UAAUoB,UAAY,SAAU7B,GACpD,OAAOE,KAAKG,KAAKwB,UAAU7B","sourcesContent":["TC.feature = TC.feature || {};\r\n\r\nif (!TC.Feature) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Feature');\r\n}\r\n\r\n/*\r\n * MultiPolygon\r\n * Parameters: coords, array of array of array of 2 element arrays of numbers; options, object\r\n */\r\nTC.feature.MultiPolygon = function (coords, options) {\r\n    const self = this;\r\n\r\n    TC.Feature.apply(self, arguments);\r\n\r\n    if (!self.wrap.isNative(coords)) {\r\n        self.wrap.createMultiPolygon(coords, options);\r\n    }\r\n};\r\n\r\nTC.inherit(TC.feature.MultiPolygon, TC.Feature);\r\n\r\nTC.feature.MultiPolygon.prototype.STYLETYPE = TC.Consts.geom.POLYGON;\r\n\r\nTC.feature.MultiPolygon.prototype.CLASSNAME = 'TC.feature.MultiPolygon';\r\n\r\nTC.feature.MultiPolygon.prototype.getCoords = function (options) {\r\n    options = options || {};\r\n    const coords = TC.Feature.prototype.getCoords.call(this, options);\r\n    if (options.pointArray) {\r\n        return [].concat.apply([], [].concat.apply([], coords));\r\n    }\r\n    return coords;\r\n};\r\n\r\nTC.feature.MultiPolygon.prototype.setCoords = function (coords) {\r\n    const self = this;\r\n    if (Array.isArray(coords) && Array.isArray(coords[0])) {\r\n        if (!Array.isArray(coords[0][0])) {\r\n            coords = [[coords]];\r\n        }\r\n        else if (!Array.isArray(coords[0][0][0])) {\r\n            coords = [coords];\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Coordinates not valid for multipolygon');\r\n    }\r\n    coords.forEach(function (polygon) {\r\n        polygon.forEach(function (ring) {\r\n            const startPoint = ring[0];\r\n            const endPoint = ring[ring.length - 1];\r\n            if (startPoint[0] !== endPoint[0] || startPoint[1] !== endPoint[1]) {\r\n                ring[ring.length] = startPoint;\r\n            }\r\n        });\r\n    });\r\n    return TC.Feature.prototype.setCoords.call(self, coords);\r\n};\r\n\r\nTC.feature.MultiPolygon.prototype.getLength = function (options) {\r\n    return this.wrap.getLength(options);\r\n};"]}