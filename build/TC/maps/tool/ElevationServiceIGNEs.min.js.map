{"version":3,"sources":["tool/ElevationServiceIGNEs.js"],"names":["TC","tool","ElevationService","syncLoadJS","apiLocation","ElevationServiceIGNEs","options","apply","this","arguments","url","process","minimumElevation","serviceVersion","nativeCRS","inherit","toolProto","prototype","request","self","coordinateListArray","isPolygon","Geometry","isPoint","coordinates","isRing","isRingCollection","crs","Util","reproject","flatCoordinateListArray","concat","dataInputs","Profile","map","coord","join","CRS","sampleNumber","getDistance","p1","p2","dx","dy","Math","sqrt","totalDistance","forEach","coordList","i","arr","prev","reduce","curr","length","Resolution","resolution","bbox","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","min","max","coverageName","coverageResolution","URLCoverageServer","Promise","resolve","reject","call","contentType","output","uom","then","response","xml","DOMParser","parseFromString","Consts","mimeType","XML","error","Error","urlElement","getElementsByTagName","ajax","proxify","innerHTML","method","data","catch","parseResponse","elevations","split","filter","elm","idx","line","values","elevation","parseFloat","isNaN"],"mappings":"AAAAA,GAAGC,KAAOD,GAAGC,MAAQ,GAEhBD,GAAGC,KAAKC,kBACTF,GAAGG,WAAWH,GAAGI,YAAc,4BAGnCJ,GAAGC,KAAKI,sBAAwB,SAAUC,GAEtCN,GAAGC,KAAKC,iBAAiBK,MADZC,KACwBC,WADxBD,KAERE,IAFQF,KAEGF,QAAQI,KAAO,sCAFlBF,KAGRG,QAHQH,KAGOF,QAAQK,SAAW,gBAH1BH,KAIRI,iBAJQJ,KAIgBF,QAAQM,mBAAqB,MAJ7CJ,KAKRK,eALQL,KAKcF,QAAQO,gBAAkB,QALxCL,KAMRM,UAAY,cAGrBd,GAAGe,QAAQf,GAAGC,KAAKI,sBAAuBL,GAAGC,KAAKC,mBAElD,WACI,MAAMc,EAAYhB,GAAGC,KAAKI,sBAAsBY,UAEhDD,EAAUE,QAAU,SAAUZ,GAC1B,MAAMa,EAAOX,KACbF,EAAUA,GAAW,GACrB,IAAIc,EACAC,GAAY,EAChB,QAAQ,GACJ,KAAKrB,GAAGsB,SAASC,QAAQjB,EAAQkB,aAC7BJ,EAAsB,CAAC,CAACd,EAAQkB,cAChC,MACJ,KAAKxB,GAAGsB,SAASG,OAAOnB,EAAQkB,aAC5BJ,EAAsB,CAACd,EAAQkB,aAC/B,MACJ,KAAKxB,GAAGsB,SAASI,iBAAiBpB,EAAQkB,aACtCJ,EAAsBd,EAAQkB,YAC9BH,GAAY,EAKhBf,EAAQqB,KAAOrB,EAAQqB,MAAQR,EAAKL,YACpCM,EAAsBpB,GAAG4B,KAAKC,UAAUT,EAAqBd,EAAQqB,IAAKR,EAAKL,YAEnF,MAAMgB,EAA0B,GAAGC,OAAOxB,MAAM,GAAIa,GAC9CY,EAAa,CACfC,QAASH,EAAwBI,IAAI,SAAUC,GAC3C,OAAOA,EAAMC,SACdA,OACHC,IAAKlB,EAAKL,WAEd,GAAIR,EAAQgC,aAAc,CACtB,MAAMC,EAAc,SAAUC,EAAIC,GAC9B,MAAMC,EAAKD,EAAG,GAAKD,EAAG,GAChBG,EAAKF,EAAG,GAAKD,EAAG,GACtB,OAAOI,KAAKC,KAAKH,EAAKA,EAAKC,EAAKA,IAEpC,IAAIG,EAAgB,EACpB1B,EAAoB2B,QAAQ,SAAUC,GAClCF,GAAiBE,EACZd,IAAI,SAAUC,EAAOc,EAAGC,GACrB,MAAMC,EAAOD,EAAID,EAAI,GACrB,OAAIE,EACOZ,EAAYY,EAAMhB,GAEtB,IAEViB,OAAO,SAAUD,EAAME,GACpB,OAAOF,EAAOE,GACf,GACHhC,IACAyB,GAAiBP,EAAYS,EAAUA,EAAUM,OAAS,GAAIN,EAAU,OAIhFhB,EAAWuB,WAAaT,EAAgBxC,EAAQgC,kBAE3ChC,EAAQkD,aACbxB,EAAWuB,WAAajD,EAAQkD,YAGpC,MAAMC,EAAO,CAACC,OAAOC,kBAAmBD,OAAOC,kBAAmBD,OAAOE,kBAAmBF,OAAOE,mBACnG9B,EAAwBiB,QAAQ,SAAUZ,GACtCsB,EAAK,GAAKb,KAAKiB,IAAI1B,EAAM,GAAIsB,EAAK,IAClCA,EAAK,GAAKb,KAAKiB,IAAI1B,EAAM,GAAIsB,EAAK,IAClCA,EAAK,GAAKb,KAAKkB,IAAI3B,EAAM,GAAIsB,EAAK,IAClCA,EAAK,GAAKb,KAAKkB,IAAI3B,EAAM,GAAIsB,EAAK,MAEtC,IAAIM,EACAC,EACJ,QAAQ,GACJ,KAAKhC,EAAWuB,YAAc,KAAOvB,EAAWuB,WAAa,IACzDQ,EAAe,yBACfC,EAAqB,IACrB,MACJ,KAAKhC,EAAWuB,YAAc,KAAOvB,EAAWuB,WAAa,IACzDQ,EAAe,yBACfC,EAAqB,IACrB,MACJ,KAAKhC,EAAWuB,YAAc,IAC1BQ,EAAe,0BACfC,EAAqB,IACrB,MACJ,QACID,EAAe,wBACfC,EAAqB,GAG7BhC,EAAWiC,kBAAoB,+GAC3BR,EAAKrB,OACL,iBAAmB2B,EAAe,aAClCC,EACA,aAAeA,EACf,yCAEJ,OAAO,IAAIE,QAAQ,SAAUC,EAASC,GAClCpE,GAAGC,KAAKC,iBAAiBe,UAAUC,QAAQmD,KAAKlD,EAAM,CAClDa,WAAYA,EACZrB,QAASQ,EAAKR,QACd2D,aAAa,EACbC,OAAQ,CACJC,IAAK,0CAGRC,KAAK,SAAUC,GACZ,IAAIC,EACJ,IACIA,GAAM,IAAIC,WAAYC,gBAAgBH,EAAU1E,GAAG8E,OAAOC,SAASC,KAEvE,MAAOC,GACHb,EAAOc,MAAMD,IAEjB,MAAME,EAAaR,EAAIS,qBAAqB,OAAO,GAC/CD,EACAnF,GAAGqF,KAAK,CACJ3E,IAAKV,GAAGsF,QAAQH,EAAWI,WAC3BC,OAAQ,MACRlB,aAAa,IACdG,KAAK,SAAUC,GACdP,EAAQO,EAASe,OAClB,SAAUR,GACTb,EAAOc,MAAMD,MAIjBb,EAAOc,MAAM,kEAGpBQ,MAAM,SAAUT,GACbb,EAAOc,MAAMD,SAK7BjE,EAAU2E,cAAgB,SAAUjB,EAAUpE,GAC1C,IACIsF,EAAalB,EAASmB,MAAM,MAC3BC,OAAO,SAAUC,EAAKC,GACnB,OAAOA,EAAM,IAEhBF,OAAO,SAAUC,EAAKC,GACnB,OAAOD,EAAIzC,SAEdpB,IAAI,SAAU+D,GACX,MAAMC,EAASD,EAAKJ,MAAM,KAC1B,IAAIM,EAAYC,WAAWF,EAAO,IAC9BG,MAAMF,KACNA,EAAY,MAEhB,MAAO,CAACC,WAAWF,EAAO,IAAKE,WAAWF,EAAO,IAAKC,KAE1D7F,EAAQqB,KAAOrB,EAAQqB,MAhBhBnB,KAgB6BM,YACpC8E,EAAa5F,GAAG4B,KAAKC,UAAU+D,EAjBxBpF,KAiByCM,UAAWR,EAAQqB,MAEvE,OAAO3B,GAAGC,KAAKC,iBAAiBe,UAAU0E,cAActB,KAnB7C7D,KAmBwD,CAAEgB,YAAaoE,GAActF,IA3JxG","sourcesContent":["TC.tool = TC.tool || {};\r\n\r\nif (!TC.tool.ElevationService) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/tool/ElevationService');\r\n}\r\n\r\nTC.tool.ElevationServiceIGNEs = function (options) {\r\n    const self = this;\r\n    TC.tool.ElevationService.apply(self, arguments);\r\n    self.url = self.options.url || '//www.ign.es/wps-analisis/servicios';\r\n    self.process = self.options.process || 'GetProfileTxt';\r\n    self.minimumElevation = self.options.minimumElevation || -99998;\r\n    self.serviceVersion = self.options.serviceVersion || '0.4.0';\r\n    self.nativeCRS = 'EPSG:25830';\r\n};\r\n\r\nTC.inherit(TC.tool.ElevationServiceIGNEs, TC.tool.ElevationService);\r\n\r\n(function () {\r\n    const toolProto = TC.tool.ElevationServiceIGNEs.prototype;\r\n\r\n    toolProto.request = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        var coordinateListArray;\r\n        var isPolygon = false;\r\n        switch (true) {\r\n            case TC.Geometry.isPoint(options.coordinates):\r\n                coordinateListArray = [[options.coordinates]];\r\n                break;\r\n            case TC.Geometry.isRing(options.coordinates):\r\n                coordinateListArray = [options.coordinates];\r\n                break;\r\n            case TC.Geometry.isRingCollection(options.coordinates):\r\n                coordinateListArray = options.coordinates;\r\n                isPolygon = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (options.crs && options.crs !== self.nativeCRS) {\r\n            coordinateListArray = TC.Util.reproject(coordinateListArray, options.crs, self.nativeCRS);\r\n        }\r\n        const flatCoordinateListArray = [].concat.apply([], coordinateListArray);\r\n        const dataInputs = {\r\n            Profile: flatCoordinateListArray.map(function (coord) {\r\n                return coord.join();\r\n            }).join(),\r\n            CRS: self.nativeCRS\r\n        };\r\n        if (options.sampleNumber) {\r\n            const getDistance = function (p1, p2) {\r\n                const dx = p2[0] - p1[0];\r\n                const dy = p2[1] - p1[1];\r\n                return Math.sqrt(dx * dx + dy * dy);\r\n            };\r\n            var totalDistance = 0;\r\n            coordinateListArray.forEach(function (coordList) {\r\n                totalDistance += coordList\r\n                    .map(function (coord, i, arr) {\r\n                        const prev = arr[i - 1];\r\n                        if (prev) {\r\n                            return getDistance(prev, coord);\r\n                        }\r\n                        return 0;\r\n                    })\r\n                    .reduce(function (prev, curr) {\r\n                        return prev + curr;\r\n                    }, 0);\r\n                if (isPolygon) {\r\n                    totalDistance += getDistance(coordList[coordList.length - 1], coordList[0]);\r\n                }\r\n            });\r\n\r\n            dataInputs.Resolution = totalDistance / options.sampleNumber;\r\n        }\r\n        else if (options.resolution) {\r\n            dataInputs.Resolution = options.resolution;\r\n        }\r\n\r\n        const bbox = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY];\r\n        flatCoordinateListArray.forEach(function (coord) {\r\n            bbox[0] = Math.min(coord[0], bbox[0]);\r\n            bbox[1] = Math.min(coord[1], bbox[1]);\r\n            bbox[2] = Math.max(coord[0], bbox[2]);\r\n            bbox[3] = Math.max(coord[1], bbox[3]);\r\n        });\r\n        var coverageName;\r\n        var coverageResolution;\r\n        switch (true) {\r\n            case dataInputs.Resolution >= 200 && dataInputs.Resolution < 500:\r\n                coverageName = 'mdt:Elevacion25830_200';\r\n                coverageResolution = 200;\r\n                break;\r\n            case dataInputs.Resolution >= 500 && dataInputs.Resolution < 1000:\r\n                coverageName = 'mdt:Elevacion25830_500';\r\n                coverageResolution = 500;\r\n                break;\r\n            case dataInputs.Resolution >= 1000:\r\n                coverageName = 'mdt:Elevacion25830_1000';\r\n                coverageResolution = 1000;\r\n                break;\r\n            default:\r\n                coverageName = 'mdt:Elevacion25830_25';\r\n                coverageResolution = 25;\r\n                break;\r\n        }\r\n        dataInputs.URLCoverageServer = 'http://www.ign.es/wcs/mdt?SERVICE=WCS&amp;REQUEST=GetCoverage&amp;VERSION=1.0.0&amp;CRS=EPSG:25830&amp;BBOX=' +\r\n            bbox.join() +\r\n            '&amp;COVERAGE=' + coverageName + '&amp;RESX=' +\r\n            coverageResolution +\r\n            '&amp;RESY=' + coverageResolution +\r\n            '&amp;FORMAT=ArcGrid&amp;EXCEPTIONS=XML';\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            TC.tool.ElevationService.prototype.request.call(self, {\r\n                dataInputs: dataInputs,\r\n                process: self.process,\r\n                contentType: false,\r\n                output: {\r\n                    uom: 'urn:ogc:def:dataType:OGC:0.0:Integer'\r\n                }\r\n            })\r\n                .then(function (response) {\r\n                    var xml;\r\n                    try {\r\n                        xml = new DOMParser().parseFromString(response, TC.Consts.mimeType.XML);\r\n                    }\r\n                    catch (error) {\r\n                        reject(Error(error));\r\n                    }\r\n                    const urlElement = xml.getElementsByTagName(\"URL\")[0];\r\n                    if (urlElement) {\r\n                        TC.ajax({\r\n                            url: TC.proxify(urlElement.innerHTML),\r\n                            method: 'GET',\r\n                            contentType: false\r\n                        }).then(function (response) {\r\n                            resolve(response.data);\r\n                        }, function (error) {\r\n                            reject(Error(error));\r\n                        });\r\n                    }\r\n                    else {\r\n                        reject(Error('Servicio WPS del IGN no ha devuelto una respuesta rápida'));\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    reject(Error(error));\r\n                });\r\n        });\r\n    };\r\n\r\n    toolProto.parseResponse = function (response, options) {\r\n        var self = this;\r\n        var elevations = response.split('\\n')\r\n            .filter(function (elm, idx) {\r\n                return idx > 0;\r\n            })\r\n            .filter(function (elm, idx) {\r\n                return elm.length;\r\n            })\r\n            .map(function (line) {\r\n                const values = line.split(';');\r\n                var elevation = parseFloat(values[3]);\r\n                if (isNaN(elevation)) {\r\n                    elevation = null;\r\n                }\r\n                return [parseFloat(values[0]), parseFloat(values[1]), elevation];\r\n            });\r\n        if (options.crs && options.crs !== self.nativeCRS) {\r\n            elevations = TC.Util.reproject(elevations, self.nativeCRS, options.crs);\r\n        }\r\n        return TC.tool.ElevationService.prototype.parseResponse.call(self, { coordinates: elevations }, options);\r\n    };\r\n})();"]}