{"version":3,"sources":["tool/ElevationServiceIDENA.js"],"names":["TC","tool","ElevationService","syncLoadJS","apiLocation","ElevationServiceIDENA","options","apply","this","arguments","url","process","minimumElevation","inherit","prototype","request","geometryOptions","coordinates","coordinateListArray","Geometry","isPoint","type","Consts","geom","POINT","isRing","POLYLINE","isRingCollection","POLYGON","dataInputs","coverageClass","geometry","mimeType","JSON","value","wrap","toGeoJSON","crs","idx","lastIndexOf","srid","substr","sampleNumber","getDistance","p1","p2","dx","dy","Math","sqrt","totalDistance","forEach","coordList","map","coord","i","arr","prev","reduce","curr","length","splitDistance","resolution","call"],"mappings":"AAACA,GAAGC,KAAOD,GAAGC,SAETD,GAAGC,KAAKC,kBACTF,GAAGG,WAAWH,GAAGI,YAAc,4BAGnCJ,GAAGC,KAAKI,sBAAwB,SAAUC,GAEtCN,GAAGC,KAAKC,iBAAiBK,MADZC,KACwBC,WADxBD,KAERE,IAFQF,KAEGF,QAAQI,KAAO,6BAFlBF,KAGRG,QAHQH,KAGOF,QAAQK,SAAW,yBAH1BH,KAIRI,iBAJQJ,KAIgBF,QAAQM,mBAAqB,MAG9DZ,GAAGa,QAAQb,GAAGC,KAAKI,sBAAuBL,GAAGC,KAAKC,kBAG5BF,GAAGC,KAAKI,sBAAsBS,UAEtCC,QAAU,SAAUT,GAC1B,MAEMU,GACFC,aAFJX,EAAUA,OAEeW,aAEzB,IAAIC,EACJ,QAAQ,GACJ,KAAKlB,GAAGmB,SAASC,QAAQd,EAAQW,aAC7BD,EAAgBK,KAAOrB,GAAGsB,OAAOC,KAAKC,MACtCN,IAAwBZ,EAAQW,cAChC,MACJ,KAAKjB,GAAGmB,SAASM,OAAOnB,EAAQW,aAC5BD,EAAgBK,KAAOrB,GAAGsB,OAAOC,KAAKG,SACtCR,GAAuBZ,EAAQW,aAC/B,MACJ,KAAKjB,GAAGmB,SAASQ,iBAAiBrB,EAAQW,aACtCD,EAAgBK,KAAOrB,GAAGsB,OAAOC,KAAKK,QACtCV,EAAsBZ,EAAQW,YAKtC,MAAMY,GACFC,cAAexB,EAAQwB,cACvBC,UACIC,SAAUhC,GAAGsB,OAAOU,SAASC,KAC7BC,MAAOlC,GAAGmC,KAAKhB,SAASiB,UAAUpB,KAG1C,GAAIV,EAAQ+B,IAAK,CACb,IAAIC,EAAMhC,EAAQ+B,IAAIE,YAAY,KAC9BD,EAAM,IACNA,EAAMhC,EAAQ+B,IAAIE,YAAY,MAElCV,EAAWW,KAAOlC,EAAQ+B,IAAII,OAAOH,EAAM,GAE/C,GAAIhC,EAAQoC,aAAc,CACtB,MAAMC,EAAc,SAAUC,EAAIC,GAC9B,MAAMC,EAAKD,EAAG,GAAKD,EAAG,GAChBG,EAAKF,EAAG,GAAKD,EAAG,GACtB,OAAOI,KAAKC,KAAKH,EAAKA,EAAKC,EAAKA,IAEpC,IAAIG,EAAgB,EACpBhC,EAAoBiC,QAAQ,SAAUC,GAClCF,GAAiBE,EACZC,IAAI,SAAUC,EAAOC,EAAGC,GACrB,MAAMC,EAAOD,EAAID,EAAI,GACrB,OAAIE,EACOd,EAAYc,EAAMH,GAEtB,IAEVI,OAAO,SAAUD,EAAME,GACpB,OAAOF,EAAOE,GACf,GACH3C,EAAgBK,OAASrB,GAAGsB,OAAOC,KAAKK,UACxCsB,GAAiBP,EAAYS,EAAUA,EAAUQ,OAAS,GAAIR,EAAU,OAMhFvB,EAAWgC,cAAgBX,GAAiB5C,EAAQoC,aAAe,QAE9DpC,EAAQwD,aACbjC,EAAWgC,cAAgBvD,EAAQwD,YAEvC,OAAO9D,GAAGC,KAAKC,iBAAiBY,UAAUC,QAAQgD,KAnErCvD,MAmEkDqB,WAAYA,GAAcvB","sourcesContent":["TC.tool = TC.tool || {};\r\n\r\nif (!TC.tool.ElevationService) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/tool/ElevationService');\r\n}\r\n\r\nTC.tool.ElevationServiceIDENA = function (options) {\r\n    const self = this;\r\n    TC.tool.ElevationService.apply(self, arguments);\r\n    self.url = self.options.url || '//idena.navarra.es/ogc/wps';\r\n    self.process = self.options.process || 'gs:ExtractRasterPoints';\r\n    self.minimumElevation = self.options.minimumElevation || -9998;\r\n};\r\n\r\nTC.inherit(TC.tool.ElevationServiceIDENA, TC.tool.ElevationService);\r\n\r\n(function () {\r\n    const toolProto = TC.tool.ElevationServiceIDENA.prototype;\r\n\r\n    toolProto.request = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        const geometryOptions = {\r\n            coordinates: options.coordinates\r\n        };\r\n        var coordinateListArray;\r\n        switch (true) {\r\n            case TC.Geometry.isPoint(options.coordinates):\r\n                geometryOptions.type = TC.Consts.geom.POINT;\r\n                coordinateListArray = [[options.coordinates]];\r\n                break;\r\n            case TC.Geometry.isRing(options.coordinates):\r\n                geometryOptions.type = TC.Consts.geom.POLYLINE;\r\n                coordinateListArray = [options.coordinates];\r\n                break;\r\n            case TC.Geometry.isRingCollection(options.coordinates):\r\n                geometryOptions.type = TC.Consts.geom.POLYGON;\r\n                coordinateListArray = options.coordinates;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        const dataInputs = {\r\n            coverageClass: options.coverageClass,\r\n            geometry: {\r\n                mimeType: TC.Consts.mimeType.JSON,\r\n                value: TC.wrap.Geometry.toGeoJSON(geometryOptions)\r\n            }\r\n        };\r\n        if (options.crs) {\r\n            var idx = options.crs.lastIndexOf(':');\r\n            if (idx < 0) {\r\n                idx = options.crs.lastIndexOf('#');\r\n            }\r\n            dataInputs.srid = options.crs.substr(idx + 1);\r\n        }\r\n        if (options.sampleNumber) {\r\n            const getDistance = function (p1, p2) {\r\n                const dx = p2[0] - p1[0];\r\n                const dy = p2[1] - p1[1];\r\n                return Math.sqrt(dx * dx + dy * dy);\r\n            };\r\n            var totalDistance = 0;\r\n            coordinateListArray.forEach(function (coordList) {\r\n                totalDistance += coordList\r\n                    .map(function (coord, i, arr) {\r\n                        const prev = arr[i - 1];\r\n                        if (prev) {\r\n                            return getDistance(prev, coord);\r\n                        }\r\n                        return 0;\r\n                    })\r\n                    .reduce(function (prev, curr) {\r\n                        return prev + curr;\r\n                    }, 0);\r\n                if (geometryOptions.type === TC.Consts.geom.POLYGON) {\r\n                    totalDistance += getDistance(coordList[coordList.length - 1], coordList[0]);\r\n                }\r\n            });\r\n\r\n            // Calculamos la distancia entre muestras dividiendo entre el número de muestras menos uno,\r\n            // porque las muestras están entre segmentos y por tanto hay una más que segmentos.\r\n            dataInputs.splitDistance = totalDistance / (options.sampleNumber - 1);\r\n        }\r\n        else if (options.resolution) {\r\n            dataInputs.splitDistance = options.resolution;\r\n        }\r\n        return TC.tool.ElevationService.prototype.request.call(self, { dataInputs: dataInputs }, options);\r\n    };\r\n})();"],"file":"../../tool/ElevationServiceIDENA.min.js"}