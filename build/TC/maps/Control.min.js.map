{"version":3,"sources":["Control.js"],"names":["TC","control","Control","self","this","EventTarget","call","map","isActive","isDisabled","len","arguments","length","options","Util","extend","id","getUID","CLASS","substr","prototype","div","getDiv","_jQueryIsLoaded","_$div","$","classList","add","template","exportsState","inherit","ctlProto","show","style","display","hide","render","callback","_set1stRenderPromise","renderData","addUIEventListeners","promise","_firstRender","processTemplates","ctl","data","templates","Promise","resolve","reject","htmlPromises","templateKeys","key","dust","cache","err","out","innerHTML","error","prom","ajax","url","method","responseType","push","isFunction","all","then","responseArray","response","forEach","idx","tpl","compile","loadSource","catch","console","Error","trigger","Consts","event","BEFORECONTROLRENDER","dataObject","toggle","classes","DISABLED","loadJSInOrder","window","templating","tplProm","CONTROLRENDER","getRenderedHtml","templateId","html","log","register","active","activate","activeControl","previousActiveControl","deactivate","CONTROLACTIVATE","stopChain","nextControl","getDefaultControl","CONTROLDEACTIVATE","enable","remove","disable","renderPromise","one","addUIEventListener","selector","listener","querySelectorAll","elm","addEventListener","isExclusive","getLocaleString","texts","locale","Cfg","exportState","importState","state"],"mappings":"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","sourcesContent":["TC.control = TC.control || {};\r\nTC.Control = function () {\r\n    const self = this;\r\n    TC.EventTarget.call(self);\r\n\r\n    self.map = null;\r\n    self.isActive = false;\r\n    self.isDisabled = false;\r\n\r\n    var len = arguments.length;\r\n\r\n    self.options = TC.Util.extend({}, len > 1 ? arguments[1] : arguments[0]);\r\n    self.id = self.options.id || TC.getUID(self.CLASS.substr(TC.Control.prototype.CLASS.length + 1) + '-');\r\n    self.div = TC.Util.getDiv(self.options.div ? self.options.div : arguments[0]);\r\n    if (TC._jQueryIsLoaded) {\r\n        self._$div = $(self.div);\r\n    }\r\n\r\n    self.div.classList.add(TC.Control.prototype.CLASS, self.CLASS);\r\n    \r\n    self.template = self.options.template || self.template;\r\n    self.exportsState = false;\r\n};\r\n\r\nTC.inherit(TC.Control, TC.EventTarget);\r\n\r\n(function () {\r\n    const ctlProto = TC.Control.prototype;\r\n\r\n    ctlProto.CLASS = 'tc-ctl';\r\n\r\n    ctlProto.template = '';\r\n\r\n    ctlProto.show = function () {\r\n        this.div.style.display = '';\r\n    };\r\n\r\n    ctlProto.hide = function () {\r\n        this.div.style.display = 'none';\r\n    };\r\n\r\n    ctlProto.render = function (callback) {\r\n        const self = this;\r\n        return self._set1stRenderPromise(self.renderData(null, function () {\r\n            self.addUIEventListeners();\r\n            if (typeof callback === 'function') {\r\n                callback();\r\n            }\r\n        }));\r\n    };\r\n\r\n    ctlProto._set1stRenderPromise = function (promise) {\r\n        const self = this;\r\n        if (!self._firstRender) {\r\n            self._firstRender = promise;\r\n        }\r\n        return promise;\r\n    };\r\n\r\n    const processTemplates = function (ctl, data, templates) {\r\n        return new Promise(function (resolve, reject) {\r\n            const htmlPromises = [];\r\n            const templateKeys = [];\r\n            for (var key in templates) {\r\n                var template = templates[key];\r\n                if (typeof template === 'string') {\r\n                    if (dust.cache[ctl.CLASS]) {\r\n                        dust.render(ctl.CLASS, data, function (err, out) {\r\n                            ctl.div.innerHTML = out;\r\n                            if (err) {\r\n                                TC.error(err);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        var prom = TC.ajax({\r\n                            url: template,\r\n                            method: \"GET\",\r\n                            responseType: 'text'\r\n                        });\r\n                        htmlPromises.push(prom);\r\n                        templateKeys.push(key);\r\n                    }\r\n                }\r\n                else if (TC.Util.isFunction(template)) {\r\n                    template();\r\n                }\r\n            }\r\n\r\n            if (htmlPromises.length === 0) {\r\n                resolve();\r\n            }\r\n            else {\r\n                Promise.all(htmlPromises)\r\n                    .then(function (responseArray) {\r\n                        responseArray\r\n                            .map(response => response.data)\r\n                            .forEach(function (template, idx) {\r\n                            const tpl = dust.compile(template, templateKeys[idx]);\r\n                            dust.loadSource(tpl);\r\n                        });\r\n                        resolve();\r\n                    })\r\n                    .catch(function (err) {\r\n                        console.error(\"Error fetching templates: \" + err);\r\n                        reject(err instanceof Error ? err : Error(err));\r\n                    });\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    ctlProto.renderData = function (data, callback) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (self.map) {\r\n                self.trigger(TC.Consts.event.BEFORECONTROLRENDER, { dataObject: data });\r\n            }\r\n            self.div.classList.toggle(TC.Consts.classes.DISABLED, self.isDisabled);\r\n\r\n            TC.loadJSInOrder(\r\n                !window.dust,\r\n                TC.url.templating,\r\n                function () {\r\n                    var tplProm;\r\n\r\n                    if (typeof self.template === 'object') {\r\n                        tplProm = processTemplates(self, data, self.template);\r\n                    }\r\n                    else {\r\n                        var templates = {};\r\n\r\n                        if (self.template) templates[self.CLASS] = self.template;\r\n\r\n\r\n                        tplProm = processTemplates(self, data, templates);\r\n                    }\r\n\r\n                    tplProm\r\n                        .then(function () {\r\n                            if (dust.cache[self.CLASS]) {\r\n                                dust.render(self.CLASS, data, function (err, out) {\r\n                                    self.div.innerHTML = out;\r\n                                    if (err) {\r\n                                        reject(Error(err));\r\n                                        TC.error(err);\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                            self.trigger(TC.Consts.event.CONTROLRENDER);\r\n                            if (TC.Util.isFunction(callback)) {\r\n                                callback();\r\n                            }\r\n                            resolve();\r\n                        })\r\n                        .catch(function (err) {\r\n                            reject(err instanceof Error ? err : Error(err));\r\n                        });\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    ctlProto.getRenderedHtml = function (templateId, data, callback) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var render = function () {\r\n                if (dust.cache[templateId]) {\r\n                    dust.render(templateId, data, function (err, out) {\r\n                        if (err) {\r\n                            TC.error(err);\r\n                            reject(Error(err));\r\n                        }\r\n                        else {\r\n                            if (TC.Util.isFunction(callback)) {\r\n                                callback(out);\r\n                            }\r\n                            resolve(out);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            TC.loadJSInOrder(\r\n                !window.dust,\r\n                TC.url.templating,\r\n                function () {\r\n                    if (!dust.cache[templateId]) {\r\n                        var template = self.template[templateId];\r\n                        if (typeof template === 'string') {\r\n                            TC.ajax({\r\n                                url: template,\r\n                                method: \"GET\",\r\n                                responseType: 'text'\r\n                            })\r\n                                .then(function (response) {\r\n                                    const html = response.data;\r\n                                    var tpl = dust.compile(html, templateId);\r\n                                    dust.loadSource(tpl);\r\n                                    render();\r\n                                })\r\n                                .catch(function (err) {\r\n                                    console.log(\"Error fetching template: \" + err)\r\n                                });\r\n                        }\r\n                        else if (TC.Util.isFunction(template)) {\r\n                            template();\r\n                            render();\r\n                        }\r\n                    }\r\n                    else {\r\n                        render();\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n    ctlProto.register = function (map) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            self.map = map;\r\n            Promise.resolve(self.render()).then(function () {\r\n                if (self.options.active) {\r\n                    self.activate();\r\n                }\r\n                resolve(self);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.activate = function () {\r\n        var self = this;\r\n        if (self.map && self.map.activeControl && self.map.activeControl != self) {\r\n            self.map.previousActiveControl = self.map.activeControl;\r\n            self.map.activeControl.deactivate();\r\n        }\r\n        self.isActive = true;\r\n        if (self.map) {\r\n            self.map.activeControl = self;\r\n            self.map.trigger(TC.Consts.event.CONTROLACTIVATE, { control: self });\r\n            self.trigger(TC.Consts.event.CONTROLACTIVATE, { control: self });\r\n        }\r\n    };\r\n\r\n    ctlProto.deactivate = function (stopChain) {\r\n        if (arguments.length == 0) stopChain = false;\r\n\r\n        var self = this;\r\n        self.isActive = false;\r\n        if (self.map) {\r\n            self.map.activeControl = null;\r\n\r\n            if (!stopChain) {\r\n                //determinar cuál es el control predeterminado para reactivarlo\r\n                //salvo que sea yo mismo, claro\r\n                var nextControl = self.map.getDefaultControl();\r\n                if (nextControl == self) nextControl = null;\r\n                else if (self.map.previousActiveControl == self) // GLS: Validamos antes de activar que el control activo anterior sea distinto al control actual\r\n                    nextControl = null;\r\n                else if (!nextControl) {\r\n                    nextControl = self.map.previousActiveControl;\r\n                }\r\n\r\n                if (nextControl)\r\n                    nextControl.activate();\r\n            }\r\n            self.map.trigger(TC.Consts.event.CONTROLDEACTIVATE, { control: self });\r\n            self.trigger(TC.Consts.event.CONTROLDEACTIVATE, { control: self });\r\n        }\r\n    };\r\n\r\n    ctlProto.enable = function () {\r\n        var self = this;\r\n        self.isDisabled = false;\r\n        if (self.div) {\r\n            self.div.classList.remove(TC.Consts.classes.DISABLED);\r\n        }\r\n    };\r\n\r\n    ctlProto.disable = function () {\r\n        var self = this;\r\n        self.isDisabled = true;\r\n        if (self.div) {\r\n            self.div.classList.add(TC.Consts.classes.DISABLED);\r\n        }\r\n    };\r\n\r\n    ctlProto.renderPromise = function () {\r\n        const self = this;\r\n        return self._firstRender || new Promise(function (resolve, reject) {\r\n            self.one(TC.Consts.event.CONTROLRENDER, function () {\r\n                resolve(self);\r\n            });\r\n        });\r\n    };\r\n\r\n    ctlProto.addUIEventListener = function (selector, event, listener) {\r\n        const self = this;\r\n        const elements = selector ? self.div.querySelectorAll(selector) : [self.div];\r\n        elements.forEach(function (elm) {\r\n            elm.addEventListener(event, listener);\r\n        });\r\n    };\r\n\r\n    ctlProto.addUIEventListeners = function () {\r\n    };\r\n\r\n    ctlProto.isExclusive = function () {\r\n        return false;\r\n    };\r\n\r\n    ctlProto.getLocaleString = function (key, texts) {\r\n        var self = this;\r\n        var locale = self.map ? self.map.options.locale : TC.Cfg.locale;\r\n        return TC.Util.getLocaleString(locale, key, texts);\r\n    };\r\n\r\n    ctlProto.getUID = function () {\r\n        const self = this;\r\n        return TC.getUID(self.id + '-');\r\n    };\r\n\r\n    ctlProto.exportState = function () {\r\n        const self = this;\r\n        if (self.exportsState) {\r\n            return {};\r\n        }\r\n        return null;\r\n    };\r\n\r\n    ctlProto.importState = function (state) {\r\n    };\r\n})();"]}