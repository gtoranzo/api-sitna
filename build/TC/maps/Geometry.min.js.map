{"version":3,"sources":["Geometry.js"],"names":["TC","root","factory","exports","module","define","amd","Geometry","isPoint","geometry","Array","isArray","length","isRing","isRingCollection","isMultiRingCollection","getNearest","point","candidates","wrap","isInside","ring","result","i","j","xi","yi","xj","yj","insideHole","len","getFlatCoordinates","geom","reductionFn","prev","cur","concat","reduce","intersects","geom1","geom2","flatIntersects","coords","ii"],"mappings":"AAAE,IAAIA,GAAKA,IAAM,IACjB,SAAWC,EAAMC,GACU,iBAAZC,QACPC,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GAEXD,EAAKM,SAAWL,IANxB,CAQGF,GAAI,WACC,MAAMO,EAAW,CACbC,QAAS,SAAUC,GACf,OAAOC,MAAMC,QAAQF,IAAaA,EAASG,QAAU,GAA4B,iBAAhBH,EAAS,IAA0C,iBAAhBA,EAAS,IAEjHI,OAAQ,SAAUJ,GACd,OAAOC,MAAMC,QAAQF,KAAkC,IAApBA,EAASG,QAAgBL,EAASC,QAAQC,EAAS,MAE1FK,iBAAkB,SAAUL,GACxB,OAAOC,MAAMC,QAAQF,KAAkC,IAApBA,EAASG,QAAgBL,EAASM,OAAOJ,EAAS,MAEzFM,sBAAuB,SAAUN,GAC7B,OAAOC,MAAMC,QAAQF,KAAkC,IAApBA,EAASG,QAAgBL,EAASO,iBAAiBL,EAAS,MAEnGO,WAAY,SAAoBC,EAAOC,GACnC,OAAOlB,GAAGmB,KAAKZ,SAASS,WAAWC,EAAOC,IAE9CE,SAAU,SAASA,EAASH,EAAOI,GAC/B,IAAIC,GAAS,EACb,GAAIf,EAASC,QAAQS,GACjB,GAAIV,EAASC,QAAQa,GACjBC,EAASL,EAAM,KAAOI,EAAK,IAAMJ,EAAM,KAAOI,EAAK,QAElD,GAAId,EAASM,OAAOQ,GACrB,IAAK,IAAIE,EAAI,EAAGC,EAAIH,EAAKT,OAAS,EAAGW,EAAIF,EAAKT,OAAQY,EAAID,IAAK,CAC3D,IAAIE,EAAKJ,EAAKE,GAAG,GAAIG,EAAKL,EAAKE,GAAG,GAC9BI,EAAKN,EAAKG,GAAG,GAAII,EAAKP,EAAKG,GAAG,GAEhBE,EAAKT,EAAM,IAAQW,EAAKX,EAAM,IACxCA,EAAM,IAAMU,EAAKF,IAAOR,EAAM,GAAKS,IAAOE,EAAKF,GAAMD,IAC9CH,GAAUA,QAG5B,GAAIf,EAASO,iBAAiBO,IAASA,EAAKT,OAAS,GAGtD,GAAIQ,EAASH,EAAOI,EAAK,IAAK,CAC1B,IAAIQ,GAAa,EAEjB,IAASN,EAAI,EAAGA,EAAIF,EAAKT,OAAQW,IAC7B,GAAIH,EAASH,EAAOI,EAAKE,IAAK,CAC1BM,GAAa,EACb,MAGHA,IACDP,GAAS,SAIhB,GAAIf,EAASQ,sBAAsBM,IAASA,EAAKT,OAAS,EAGtD,CAAIW,EAAI,EAAb,IAAK,IAAWO,EAAMT,EAAKT,OAAQW,EAAIO,EAAKP,IACxC,GAAIH,EAASH,EAAOI,EAAKE,IAAK,CAC1BD,GAAS,EACT,OAKhB,OAAOA,GAEXS,mBAAoB,SAAUC,GAC1B,MAAMC,EAAc,SAAUC,EAAMC,GAChC,OAAOD,EAAKE,OAAOD,IAEvB,QAAQ,GACJ,KAAK5B,EAASC,QAAQwB,GAClB,MAAO,CAACA,GACZ,KAAKzB,EAASM,OAAOmB,GACjB,OAAOA,EACX,KAAKzB,EAASO,iBAAiBkB,GAC3B,OAAOA,EAAKK,OAAOJ,GACvB,KAAK1B,EAASQ,sBAAsBiB,GAChC,OAAOA,EAAKK,OAAOJ,GAAaI,OAAOJ,GAC3C,QACI,MAAO,KAGnBK,WAAY,SAAUC,EAAOC,GACzB,MAAMC,EAAiB,SAAUC,EAAQV,GACrC,IAAK,IAAIT,EAAI,EAAGoB,EAAKD,EAAO9B,OAAQW,EAAIoB,EAAIpB,IACxC,GAAIhB,EAASa,SAASsB,EAAOnB,GAAIS,GAC7B,OAAO,EAGf,OAAO,GAEX,SAAIS,EAAelC,EAASwB,mBAAmBQ,GAAQC,KAAUC,EAAelC,EAASwB,mBAAmBS,GAAQD,MAM5H,OAAOhC","sourcesContent":["; var TC = TC || {};\r\n(function (root, factory) {\r\n    if (typeof exports === \"object\") { // CommonJS\r\n        module.exports = factory();\r\n    } else if (typeof define === \"function\" && define.amd) { // AMD\r\n        define([], factory);\r\n    } else {\r\n        root.Geometry = factory();\r\n    }\r\n})(TC, function () {\r\n        const Geometry = {\r\n            isPoint: function (geometry) {\r\n                return Array.isArray(geometry) && geometry.length >= 2 && typeof geometry[0] === 'number' && typeof geometry[1] === 'number';\r\n            },\r\n            isRing: function (geometry) {\r\n                return Array.isArray(geometry) && (geometry.length === 0 || Geometry.isPoint(geometry[0]));\r\n            },\r\n            isRingCollection: function (geometry) {\r\n                return Array.isArray(geometry) && (geometry.length === 0 || Geometry.isRing(geometry[0]));\r\n            },\r\n            isMultiRingCollection: function (geometry) {\r\n                return Array.isArray(geometry) && (geometry.length === 0 || Geometry.isRingCollection(geometry[0]));\r\n            },\r\n            getNearest: function getNearest(point, candidates) {\r\n                return TC.wrap.Geometry.getNearest(point, candidates);\r\n            },\r\n            isInside: function isInside(point, ring) {\r\n                var result = false;\r\n                if (Geometry.isPoint(point)) {\r\n                    if (Geometry.isPoint(ring)) {\r\n                        result = point[0] === ring[0] && point[1] === ring[1];\r\n                    }\r\n                    else if (Geometry.isRing(ring)) {\r\n                        for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\r\n                            var xi = ring[i][0], yi = ring[i][1];\r\n                            var xj = ring[j][0], yj = ring[j][1];\r\n\r\n                            var intersect = ((yi > point[1]) != (yj > point[1]))\r\n                                && (point[0] < (xj - xi) * (point[1] - yi) / (yj - yi) + xi);\r\n                            if (intersect) result = !result;\r\n                        }\r\n                    }\r\n                    else if (Geometry.isRingCollection(ring) && ring.length > 0) {\r\n                        // polígono con agujeros\r\n                        // miramos si está en el polígono exterior\r\n                        if (isInside(point, ring[0])) {\r\n                            var insideHole = false;\r\n                            // miramos si está en un agujero\r\n                            for (var i = 1; i < ring.length; i++) {\r\n                                if (isInside(point, ring[i])) {\r\n                                    insideHole = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if (!insideHole) {\r\n                                result = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (Geometry.isMultiRingCollection(ring) && ring.length > 0) {\r\n                        // multipolígono\r\n                        // miramos si está en alguno de los polígonos\r\n                        for (var i = 0, len = ring.length; i < len; i++) {\r\n                            if (isInside(point, ring[i])) {\r\n                                result = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return result;\r\n            },\r\n            getFlatCoordinates: function (geom) {\r\n                const reductionFn = function (prev, cur) {\r\n                    return prev.concat(cur);\r\n                };\r\n                switch (true) {\r\n                    case Geometry.isPoint(geom):\r\n                        return [geom];\r\n                    case Geometry.isRing(geom):\r\n                        return geom;\r\n                    case Geometry.isRingCollection(geom):\r\n                        return geom.reduce(reductionFn);\r\n                    case Geometry.isMultiRingCollection(geom):\r\n                        return geom.reduce(reductionFn).reduce(reductionFn);\r\n                    default:\r\n                        return [];\r\n                }\r\n            },\r\n            intersects: function (geom1, geom2) {\r\n                const flatIntersects = function (coords, geom) {\r\n                    for (var i = 0, ii = coords.length; i < ii; i++) {\r\n                        if (Geometry.isInside(coords[i], geom)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                if (flatIntersects(Geometry.getFlatCoordinates(geom1), geom2) || flatIntersects(Geometry.getFlatCoordinates(geom2), geom1)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n        return Geometry;\r\n    });"]}