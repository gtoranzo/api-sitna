{"version":3,"sources":["format/WPS.js"],"names":["TC","format","root","factory","exports","module","define","amd","WPS","buildExecuteQuery","options","version","buildExecuteQuery040","buildExecuteQuery100","xml","length","process","dataInputs","key","hasOwnProperty","data","mimeType","value","responseType","join","dataType","typeofData","output","uom"],"mappings":"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","sourcesContent":["var TC = TC || {};\r\nTC.format = TC.format || {};\r\n(function (root, factory) {\r\n    if (typeof exports === \"object\") { // CommonJS\r\n        module.exports = factory();\r\n    } else if (typeof define === \"function\" && define.amd) { // AMD\r\n        define([], factory);\r\n    } else {\r\n        root.WPS = factory();\r\n    }\r\n})(TC.format, function () {\r\n        var WPS = {\r\n            buildExecuteQuery: function (options) {\r\n                options = options || {};\r\n                const version = options.version || '1.0.0';\r\n                switch (version) {\r\n                    case '0.4.0':\r\n                        return WPS.buildExecuteQuery040(options);\r\n                    default:\r\n                        return WPS.buildExecuteQuery100(options);\r\n                }\r\n            },\r\n            buildExecuteQuery100: function (options) {\r\n                options = options || {};\r\n                var xml = [];\r\n                xml[xml.length] = '<?xml version= \"1.0\" encoding= \"UTF-8\" ?>';\r\n                xml[xml.length] = '<wps:Execute version=\"1.0.0\" service=\"WPS\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.opengis.net/wps/1.0.0\" xmlns:wfs=\"http://www.opengis.net/wfs\" xmlns:wps=\"http://www.opengis.net/wps/1.0.0\" xmlns:ows=\"http://www.opengis.net/ows/1.1\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:ogc=\"http://www.opengis.net/ogc\" xmlns:wcs=\"http://www.opengis.net/wcs/1.1.1\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\">'\r\n                xml[xml.length] = '<ows:Identifier>' + options.process + '</ows:Identifier>';\r\n                xml[xml.length] = '<wps:DataInputs>';\r\n                var dataInputs = options.dataInputs;\r\n                if (dataInputs) {\r\n                    for (var key in dataInputs) {\r\n                        if (dataInputs.hasOwnProperty(key)) {\r\n                            var data = dataInputs[key];\r\n                            if (data !== void (0)) {\r\n                                xml[xml.length] = '<wps:Input>';\r\n                                xml[xml.length] = '<ows:Identifier>' + key + '</ows:Identifier>';\r\n                                xml[xml.length] = '<wps:Data>';\r\n                                if (typeof data === 'string' || typeof data === 'number' || typeof data === 'boolean') {\r\n                                    xml[xml.length] = '<wps:LiteralData>' + data + '</wps:LiteralData>';\r\n                                }\r\n                                else {\r\n                                    if (data.mimeType && data.value) {\r\n                                        xml[xml.length] = '<wps:ComplexData mimeType=\"' + data.mimeType + '\"><![CDATA[' + data.value + ']]></wps:ComplexData>';\r\n                                    }\r\n                                }\r\n                                xml[xml.length] = '</wps:Data>';\r\n                                xml[xml.length] = '</wps:Input>';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                xml[xml.length] = '</wps:DataInputs>';\r\n                xml[xml.length] = '<wps:ResponseForm>';\r\n                xml[xml.length] = '<wps:RawDataOutput mimeType=\"' + options.responseType + '\">';\r\n                xml[xml.length] = '<ows:Identifier>result</ows:Identifier>';\r\n                xml[xml.length] = '</wps:RawDataOutput>';\r\n                xml[xml.length] = '</wps:ResponseForm>'\r\n                xml[xml.length] = '</wps:Execute>';\r\n                return xml.join('');\r\n            },\r\n            buildExecuteQuery040: function (options) {\r\n                options = options || {};\r\n                var xml = [];\r\n                xml[xml.length] = '<?xml version= \"1.0\" encoding= \"UTF-8\" ?>';\r\n                xml[xml.length] = '<wps:Execute service=\"WPS\" version=\"0.4.0\" store=\"false\" status=\"false\" xmlns:wps=\"http://www.opengeospatial.net/wps\" xmlns:ows=\"http://www.opengis.net/ows\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.opengeospatial.net/wps..wpsExecute.xsd\">'\r\n                xml[xml.length] = '<ows:Identifier>' + options.process + '</ows:Identifier>';\r\n                xml[xml.length] = '<wps:DataInputs>';\r\n                var dataInputs = options.dataInputs;\r\n                if (dataInputs) {\r\n                    for (var key in dataInputs) {\r\n                        if (dataInputs.hasOwnProperty(key)) {\r\n                            var data = dataInputs[key];\r\n                            if (data !== void (0)) {\r\n                                xml[xml.length] = '<wps:Input>';\r\n                                xml[xml.length] = '<ows:Identifier>' + key + '</ows:Identifier>';\r\n                                xml[xml.length] = '<ows:Title>' + key + '</ows:Title>';\r\n                                var dataType;\r\n                                const typeofData = typeof data;\r\n                                if (typeofData === 'string' || typeofData === 'number' || typeofData === 'boolean') {\r\n                                    switch (typeof data) {\r\n                                        case 'number':\r\n                                            dataType = 'urn:ogc:def:dataType:OGC:0.0:Double';\r\n                                            break;\r\n                                        case 'boolean':\r\n                                            dataType = 'urn:ogc:def:dataType:OGC:0.0:Boolean';\r\n                                            break;\r\n                                        default:\r\n                                            dataType = 'urn:ogc:def:dataType:OGC:0.0:String';\r\n                                            break;\r\n                                    }\r\n                                    xml[xml.length] = '<wps:LiteralValue dataType=\"' + dataType + '\" uom=\"' + dataType + '\">';\r\n                                    xml[xml.length] = data;\r\n                                    xml[xml.length] = '</wps:LiteralValue>';\r\n                                }\r\n                                else {\r\n                                    if (data.mimeType && data.value) {\r\n                                        xml[xml.length] = '<wps:ComplexValue format=\"' + data.mimeType + '\"><![CDATA[' + data.value + ']]></wps:ComplexValue>';\r\n                                    }\r\n                                }\r\n                                xml[xml.length] = '</wps:Input>';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                xml[xml.length] = '</wps:DataInputs>';\r\n                xml[xml.length] = '<wps:OutputDefinitions>';\r\n                xml[xml.length] = '<wps:Output format=\"' + options.responseType + '\"';\r\n                if (options.output && options.output.uom) {\r\n                    xml[xml.length] = ' uom=\"' + options.output.uom + '\"';\r\n                }\r\n                xml[xml.length] = ' encoding=\"UTF-8\" schema=\"http://schemas.opengis.net/gml/3.0.0/base/gml.xsd\">';\r\n                xml[xml.length] = '<ows:Identifier>result</ows:Identifier>';\r\n                xml[xml.length] = '<ows:Title>result</ows:Title>';\r\n                xml[xml.length] = '</wps:Output>';\r\n                xml[xml.length] = '</wps:OutputDefinitions>';\r\n                xml[xml.length] = '</wps:Execute>';\r\n                return xml.join('');\r\n            }\r\n        };\r\n        return WPS;\r\n});"],"file":"../../format/WPS.min.js"}