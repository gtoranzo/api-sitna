{"version":3,"sources":["layer/Vector.js"],"names":["TC","layer","Layer","syncLoadJS","apiLocation","Vector","apply","this","arguments","type","options","Consts","layerType","VECTOR","features","selectedFeatures","extension","url","idx","indexOf","substr","lastIndexOf","toLowerCase","getFileExtension","format","mimeType","KML","GPX","JSON","GEOJSON","GML","getFormatFromMimeType","WKT","TOPOJSON","getFormatFromExtension","title","result","regexp","RegExp","i","decodeURIComponent","match","exec","length","getFileName","wrap","ollyr","createVectorLayer","setLayer","_promise","Promise","resolve","inherit","layerProto","prototype","getTree","stealth","children","path","getPath","node","Util","addArrayToTree","legend","getLegend","name","customLegend","uid","id","addFeatureInternal","multipleFeatureFunction","coord","reject","call","then","map","trigger","event","FEATUREADD","feature","addFeaturesInternal","coordsArray","constructorName","styleType","style","styles","Cfg","opts","extend","FeatureConstructor","endFn","Array","nativeFeatures","len","coords","isNative","Feature","CLASSNAME","_wrap","parent","showPopup","addFeatures","loadJS","addPoint","addPoints","geom","POINT","addMarker","addMarkers","addPolyline","addPolylines","POLYLINE","addMultiPolyline","addMultiPolylines","addPolygon","addPolygons","POLYGON","addMultiPolygon","addMultiPolygons","addCircle","addCircles","addFeature","self","Point","Polyline","Polygon","MultiPolygon","MultiPolyline","Circle","removeFeature","getControlsByClass","forEach","pu","isVisible","currentFeature","hide","p","close","getFeatureById","olFeat","clearFeatures","describeFeatureType","callback","error","ajax","getDescribeFeatureTypeUrl","method","responseType","XML","response","data","ns","complexType","getElementsByTagNameNS","elements","element","getAttribute","nillable","minOccurs","parseInt","maxOccurs","exception","getElementsByTagName","innerHTML","catch","jqXHR","textStatus","errorThrown","Error","isFunction","errorText","import","setNodeVisibility","visible","state","LOADING","BEFOREUPDATE","BEFORELAYERUPDATE","tree","findNode","setVisibility","_cache","visibilityStates","visibility","VISIBLE","NOT_VISIBLE","f","found","undefined","_path","join","IDLE","LAYERUPDATE","UPDATE","getNodeVisibility","getVisibility","r","setModifiable","modifiable","applyEdits","inserts","updates","deletes","sendTransaction","refresh","reloadSource","getFeaturesInCurrentExtent","tolerance","extent","getExtent","getFeaturesInExtent","setProjection","crs","oldCrs","feat","setGeometry","reproject","geometry","getGeometry","exportState","lObj","precision","Math","pow","isGeo","DEGREE_PRECISION","METER_PRECISION","fObj","layerStyle","Marker","marker","point","line","MULTIPOLYLINE","polygon","MULTIPOLYGON","CIRCLE","compactGeometry","getData","showsPopup","exportStyles","key","val","getStyle","importState","obj","promises","featureOptions","addFn","className","explodeGeometry","res","rej","one","PROJECTIONCHANGE","e","all","err"],"mappings":"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","sourcesContent":["TC.layer = TC.layer || {};\r\n\r\nif (!TC.Layer) {\r\n    TC.syncLoadJS(TC.apiLocation + 'TC/Layer');\r\n}\r\n\r\n/**\r\n * Opciones de capa vectorial.\r\n * Esta clase no tiene constructor.\r\n * @class TC.cfg.VectorOptions\r\n * @extend TC.cfg.LayerOptions\r\n * @static\r\n */\r\n/**\r\n * Tipo de capa.\r\n * @property type\r\n * @type TC.consts.LayerType\r\n * @default TC.Consts.layerType.VECTOR\r\n */\r\n/**\r\n * URL del servicio WFS o del documento que define la capa.\r\n * @property url\r\n * @type string|undefined\r\n */\r\n\r\n/**\r\n * Capa de tipo vectorial, como la de un WFS o un KML.\r\n * @class TC.layer.Vector\r\n * @extends TC.Layer\r\n * @constructor\r\n * @async\r\n * @param {TC.Cfg.layer} [options] Objeto de opciones de configuración de la capa.\r\n */\r\nTC.layer.Vector = function () {\r\n    var self = this;\r\n    TC.Layer.apply(self, arguments);\r\n\r\n    self.type = self.options.type || TC.Consts.layerType.VECTOR;\r\n    /**\r\n     * Lista de entidades geográficas que hay en la capa.\r\n     * @property features\r\n     * @type array\r\n     * @default []\r\n     */\r\n    self.features = [];\r\n    /**\r\n     * Lista de entidades geográficas seleccionadas en la capa.\r\n     * @property selectedFeatures\r\n     * @type array\r\n     * @default []\r\n     */\r\n    self.selectedFeatures = [];\r\n\r\n    const getFileExtension = function (url) {\r\n        url = url || '';\r\n        var idx = url.indexOf('?');\r\n        if (idx >= 0) {\r\n            url = url.substr(0, idx);\r\n        }\r\n        else {\r\n            idx = url.indexOf('#');\r\n            if (idx >= 0) {\r\n                url = url.substr(0, idx);\r\n            }\r\n        }\r\n        return url.substr(url.lastIndexOf('.')).toLowerCase();\r\n    };\r\n\r\n    const getFormatFromExtension = function (extension) {\r\n        switch (extension) {\r\n            case '.kml':\r\n                return TC.Consts.format.KML;\r\n            case '.gpx':\r\n                return TC.Consts.format.GPX;\r\n            case '.json':\r\n            case '.geojson':\r\n                return TC.Consts.format.GEOJSON;\r\n            case '.gml':\r\n                return TC.Consts.format.GML;\r\n            case '.wkt':\r\n                return TC.Consts.format.WKT;\r\n            case '.topojson':\r\n                return TC.Consts.format.TOPOJSON;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    const getFormatFromMimeType = function (mimeType) {\r\n        switch (mimeType) {\r\n            case TC.Consts.mimeType.KML:\r\n                return TC.Consts.format.KML;\r\n            case TC.Consts.mimeType.GPX:\r\n                return TC.Consts.format.GPX;\r\n            case TC.Consts.mimeType.JSON:\r\n            case TC.Consts.mimeType.GEOJSON:\r\n                return TC.Consts.format.GEOJSON;\r\n            case TC.Consts.mimeType.GML:\r\n                return TC.Consts.format.GML;\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n    /**\r\n     * URL del servicio o documento al que pertenenece la capa.\r\n     * @property url\r\n     * @type string\r\n     */\r\n    const extension = getFileExtension(self.url);\r\n    const format = getFormatFromMimeType(self.options.format) || getFormatFromExtension(extension);\r\n    if (format || self.type === TC.Consts.layerType.KML) {\r\n        if (format === TC.Consts.format.KML) {\r\n            self.type = TC.Consts.layerType.KML;\r\n        }\r\n\r\n        var getFileName = function (url) {\r\n            url = url || '';\r\n            var result = url;\r\n            var regexp = new RegExp('([^/]+' + extension + ')', 'i');\r\n            for (var i = 0; i < 3; i++) {\r\n                url = decodeURIComponent(url);\r\n                var match = regexp.exec(url);\r\n                if (match.length > 1) {\r\n                    result = match[1];\r\n                    break;\r\n                }\r\n\r\n            }\r\n            return result;\r\n        };\r\n        self.title = self.options.title || getFileName(self.url);\r\n    }\r\n\r\n    self.wrap = new TC.wrap.layer.Vector(self);\r\n\r\n    var ollyr = self.wrap.createVectorLayer();\r\n    self.wrap.setLayer(ollyr);\r\n    self.wrap._promise = Promise.resolve(ollyr);\r\n};\r\n\r\nTC.inherit(TC.layer.Vector, TC.Layer);\r\n\r\n(function () {\r\n    var layerProto = TC.layer.Vector.prototype;\r\n\r\n    /*\r\n     *  getTree: returns service layer tree { name, title, children }\r\n     */\r\n    layerProto.getTree = function () {\r\n        var self = this;\r\n        var result = null;\r\n        if (!self.options.stealth) {\r\n            result = {};\r\n            result.children = [];\r\n            for (var i = 0; i < self.features.length; i++) {\r\n                var path = self.features[i].getPath();\r\n                if (path.length) {\r\n                    var node = TC.Util.addArrayToTree(path, result);\r\n                    if (node) {\r\n                        node.legend = self.features[i].getLegend();\r\n                    }\r\n                }\r\n            }\r\n            result.name = self.name || result.name;\r\n            result.customLegend = self.options.customLegend; //Atributo para pasar una plantilla HTML diferente a la por defecto (LegendNode.html)\r\n            result.title = self.title || result.title;\r\n            result.uid = self.id;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    var addFeatureInternal = function (layer, multipleFeatureFunction, coord, options) {\r\n        return new Promise(function (resolve, reject) {\r\n            multipleFeatureFunction.call(layer, [coord], options).then(function (features) {\r\n                resolve(features[0]);\r\n                if (layer.map) {\r\n                    layer.map.trigger(TC.Consts.event.FEATUREADD, { layer: layer, feature: features[0] });\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    var addFeaturesInternal = function (layer, coordsArray, constructorName, styleType, options) {\r\n        var style = (layer.options.styles && layer.options.styles[styleType]) || TC.Cfg.styles[styleType];\r\n        var opts = TC.Util.extend(true, {}, style, options);\r\n        return new Promise(function (resolve, reject) {\r\n            var FeatureConstructor;\r\n            const endFn = function () {\r\n                FeatureConstructor = FeatureConstructor || TC.feature[constructorName];\r\n                var features = new Array(coordsArray.length);\r\n                var nativeFeatures = [];\r\n                for (var i = 0, len = coordsArray.length; i < len; i++) {\r\n                    var coords = coordsArray[i];\r\n                    var feature;\r\n                    const isNative = TC.wrap.Feature.prototype.isNative(coords);\r\n                    if (coords instanceof FeatureConstructor || \"TC.feature.\" + constructorName === coords.CLASSNAME) {\r\n                        feature = coords;\r\n                    }\r\n                    else {\r\n                        opts.layer = layer;\r\n                        if (isNative) {\r\n                            feature = coords._wrap && coords._wrap.parent;\r\n                        }\r\n                        if (!feature) {\r\n                            feature = new FeatureConstructor(coords, opts);\r\n                        }\r\n                    }\r\n                    feature.layer = layer;\r\n                    features[i] = feature;\r\n                    layer.features[layer.features.length] = feature;\r\n                    if (!isNative) {\r\n                        nativeFeatures[nativeFeatures.length] = feature.wrap.feature;\r\n                    }\r\n                    if (feature.options.showPopup) {\r\n                        feature.showPopup();\r\n                    }\r\n                    // Este evento mata el rendimiento\r\n                    //self.map.trigger(TC.Consts.event.FEATUREADD, { layer: self, feature: marker });\r\n                }\r\n                if (nativeFeatures.length) {\r\n                    layer.wrap.addFeatures(nativeFeatures);\r\n                }\r\n                resolve(features);\r\n            };\r\n            if (constructorName) {\r\n                TC.loadJS(\r\n                    !TC.feature || (TC.feature && !TC.feature[constructorName]),\r\n                    [TC.apiLocation + 'TC/feature/' + constructorName],\r\n                    endFn\r\n                );\r\n            }\r\n            else {\r\n                FeatureConstructor = TC.Feature;\r\n                endFn();\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Añade un punto a la capa.\r\n     * @method addPoint\r\n     * @async\r\n     * @param {array|TC.feature.Point|ol.geom.Point|OpenLayers.Geometry.Point} coord Si es un array, contiene dos números (la coordenada del punto).\r\n     * @param {TC.cfg.PointStyleOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Point\r\n     */\r\n    layerProto.addPoint = function (coord, options) {\r\n        return addFeatureInternal(this, this.addPoints, coord, options);\r\n    };\r\n\r\n    /**\r\n     * Añade una lista de puntos a la capa.\r\n     * @method addPoints\r\n     * @async\r\n     * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addPoint:method\"}}{{/crossLink}}.\r\n     * @param {TC.cfg.PointStyleOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Point\r\n     */\r\n    layerProto.addPoints = function (coordsArray, options) {\r\n        return addFeaturesInternal(this, coordsArray, 'Point', TC.Consts.geom.POINT, options);\r\n    };\r\n\r\n    /**\r\n     * Añade un marcador a la capa.\r\n     * @method addMarker\r\n     * @async\r\n     * @param {array|TC.feature.Marker|ol.geom.Point|OpenLayers.Geometry.Point} coord Si es un array, contiene dos números (la coordenada del punto).\r\n     * @param {TC.cfg.MarkerStyleOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Marker\r\n     */\r\n    layerProto.addMarker = function (coord, options) {\r\n        return addFeatureInternal(this, this.addMarkers, coord, options);\r\n    };\r\n\r\n    /**\r\n     * Añade una lista de marcadores a la capa.\r\n     * @method addMarkers\r\n     * @async\r\n     * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addMarker:method\"}}{{/crossLink}}.\r\n     * @param {TC.cfg.MarkerStyleOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Marker\r\n     */\r\n    layerProto.addMarkers = function (coordsArray, options) {\r\n        return addFeaturesInternal(this, coordsArray, 'Marker', 'marker', options);\r\n    };\r\n\r\n    /**\r\n     * Añade una polilínea a la capa.\r\n     * @method addPolyline\r\n     * @async\r\n     * @param {array|TC.feature.Polyline|ol.geom.MultiLineString|OpenLayers.Geometry.LineString} coords Si es un array, contiene arrays de dos números (coordenadas de puntos).\r\n     * @param {TC.cfg.PolylineOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Polyline\r\n     */\r\n    layerProto.addPolyline = function (coords, options) {\r\n        return addFeatureInternal(this, this.addPolylines, coords, options);\r\n    };\r\n\r\n\r\n    /**\r\n     * Añade una lista de polilíneas a la capa.\r\n     * @method addPolylines\r\n     * @async\r\n     * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addPolyline:method\"}}{{/crossLink}}.\r\n     * @param {TC.cfg.PolylineOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Polyline\r\n     */\r\n    layerProto.addPolylines = function (coordsArray, options) {\r\n        return addFeaturesInternal(this, coordsArray, 'Polyline', TC.Consts.geom.POLYLINE, options);\r\n    };\r\n\r\n    layerProto.addMultiPolyline = function (coords, options) {\r\n        return addFeatureInternal(this, this.addMultiPolylines, coords, options);\r\n    };\r\n\r\n\r\n    layerProto.addMultiPolylines = function (coordsArray, options) {\r\n        return addFeaturesInternal(this, coordsArray, 'MultiPolyline', TC.Consts.geom.POLYLINE, options);\r\n    };\r\n\r\n    /**\r\n     * Añade un polígono a la capa.\r\n     * @method addPolygon\r\n     * @async\r\n     * @param {array|TC.feature.Polygon|ol.geom.Polygon|OpenLayers.Geometry.Polygon} coords Si es un array, contiene arrays de coordenadas, que son a su vez arrays de dos números. El primer\r\n     * elemento de ese array es el anillo exterior, los siguientes son anillos interiores.\r\n     * @param {TC.cfg.PolygonOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Polygon\r\n     */\r\n    layerProto.addPolygon = function (coords, options) {\r\n        return addFeatureInternal(this, this.addPolygons, coords, options);\r\n    };\r\n\r\n    /**\r\n     * Añade una lista de polígonos a la capa.\r\n     * @method addPolygons\r\n     * @async\r\n     * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addPolygon:method\"}}{{/crossLink}}.\r\n     * @param {TC.cfg.PolygonOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Polygon\r\n     */\r\n    layerProto.addPolygons = function (coordsArray, options) {\r\n        return addFeaturesInternal(this, coordsArray, 'Polygon', TC.Consts.geom.POLYGON, options);\r\n    };\r\n\r\n    layerProto.addMultiPolygon = function (coords, options) {\r\n        return addFeatureInternal(this, this.addMultiPolygons, coords, options);\r\n    };\r\n\r\n\r\n    layerProto.addMultiPolygons = function (coordsArray, options) {\r\n        return addFeaturesInternal(this, coordsArray, 'MultiPolygon', TC.Consts.geom.POLYGON, options);\r\n    };\r\n\r\n    /**\r\n     * Añade un círculo a la capa.\r\n     * @method addCircle\r\n     * @async\r\n     * @param {array|TC.feature.Circle|ol.geom.Circle} coord Si es un array, contiene un array de dos números (la coordenada del centro) y un número (el radio).\r\n     * @param {TC.cfg.PolygonStyleOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.feature.Circle\r\n     */\r\n    layerProto.addCircle = function (coord, options) {\r\n        return addFeatureInternal(this, this.addCircles, coord, options);\r\n    };\r\n\r\n    /**\r\n     * Añade una lista de círculos a la capa.\r\n     * @method addCircles\r\n     * @async\r\n     * @param {array} coordsArray Los elementos de esta lista son cualquiera de los que acepta el método {{#crossLink \"TC.layer.Vector/addCircle:method\"}}{{/crossLink}}.\r\n     * @param {TC.cfg.PolygonStyleOptions} [options]\r\n     * @return {jQuery promise} La promesa al resolverse devuelve un array de objetos de la clase TC.feature.Circle\r\n     */\r\n    layerProto.addCircles = function (coordsArray, options) {\r\n        return addFeaturesInternal(this, coordsArray, 'Circle', TC.Consts.geom.POLYGON, options);\r\n    };\r\n    /**\r\n     * Añade una entidad geográfica a la capa.\r\n     * @method addFeature\r\n     * @async\r\n     * @param {TC.Feature} feature \r\n     * @return {jQuery promise} La promesa al resolverse devuelve un objeto de la clase TC.Feature\r\n     */\r\n    layerProto.addFeature = function (feature) {\r\n        const self = this;\r\n        var result;\r\n        if (TC.feature) {\r\n            if (TC.feature.Point && feature instanceof TC.feature.Point || feature.CLASSNAME === \"TC.feature.Point\") {\r\n                result = self.addPoint(feature);\r\n            }\r\n            else if (TC.feature.Polyline && feature instanceof TC.feature.Polyline || feature.CLASSNAME === \"TC.feature.Polyline\") {\r\n                result = self.addPolyline(feature);\r\n            }\r\n            else if (TC.feature.Polygon && feature instanceof TC.feature.Polygon || feature.CLASSNAME === \"TC.feature.Polygon\") {\r\n                result = self.addPolygon(feature);\r\n            }\r\n            else if (TC.feature.MultiPolygon && feature instanceof TC.feature.MultiPolygon || feature.CLASSNAME === \"TC.feature.MultiPolygon\") {\r\n                result = self.addMultiPolygon(feature);\r\n            }\r\n            else if (TC.feature.MultiPolyline && feature instanceof TC.feature.MultiPolyline || feature.CLASSNAME === \"TC.feature.MultiPolyline\") {\r\n                result = self.addMultiPolyline(feature);\r\n            }\r\n            else if (TC.feature.Circle && feature instanceof TC.feature.Circle || feature.CLASSNAME === \"TC.feature.Circle\") {\r\n                result = self.addCircle(feature);\r\n            }\r\n            else {\r\n                result = addFeaturesInternal(self, [feature])\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Elimina una entidad geográfica de la capa.\r\n     * @method removeFeature\r\n     * @param {TC.Feature} feature \r\n     */\r\n    layerProto.removeFeature = function (feature) {\r\n        const self = this;\r\n        if (feature.layer && self.features.indexOf(feature) >= 0) {\r\n            if (self.map) {\r\n                const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                popups.forEach(function (pu) {\r\n                    if (pu.isVisible() && pu.currentFeature === feature) {\r\n                        pu.hide();\r\n                    }\r\n                });\r\n\r\n                const panels = self.map.getControlsByClass('TC.control.ResultsPanel');\r\n                panels.forEach(function (p) {\r\n                    if (p.isVisible() && p.currentFeature === feature) {\r\n                        p.close();\r\n                    }\r\n                });\r\n            }\r\n            self.wrap.removeFeature(feature);\r\n            feature.layer = null;\r\n        }\r\n    };\r\n\r\n    layerProto.getFeatureById = function (id) {\r\n        var result = null;\r\n        var olFeat = this.wrap.getFeatureById(id);\r\n        if (olFeat) {\r\n            result = olFeat._wrap.parent;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Borra todas las entidades geográficas de la capa.\r\n     * @method clearFeatures\r\n     */\r\n    layerProto.clearFeatures = function () {\r\n        var self = this;\r\n        if (self.features && self.wrap) {\r\n            if (self.map) {\r\n                const popups = self.map.getControlsByClass('TC.control.Popup');\r\n                popups.forEach(function (pu) {\r\n                    if (pu.isVisible() && self.features.indexOf(pu.currentFeature) >= 0) {\r\n                        pu.hide();\r\n                    }\r\n                });\r\n            }\r\n            self.features.length = 0;\r\n            self.wrap.clearFeatures();\r\n        }\r\n    };\r\n\r\n    layerProto.describeFeatureType = function (callback, error) {\r\n        const self = this;\r\n        const promise = new Promise(function (resolve, reject) {\r\n            TC.ajax({\r\n                url: self.wrap.getDescribeFeatureTypeUrl(),\r\n                method: 'GET',\r\n                responseType: TC.Consts.mimeType.XML\r\n            })\r\n                .then(function (response) {\r\n                    const data = response.data;\r\n                    var ns = 'http://www.w3.org/2001/XMLSchema';\r\n                    var complexType = data.getElementsByTagNameNS(ns, 'complexType')[0];\r\n                    if (complexType) {\r\n                        var elements = complexType.getElementsByTagNameNS(ns, 'element');\r\n                        var result = new Array(elements.length);\r\n                        for (var i = 0, len = elements.length; i < len; i++) {\r\n                            var element = elements[i];\r\n                            result[i] = {\r\n                                name: element.getAttribute('name'),\r\n                                type: element.getAttribute('type'),\r\n                                nillable: element.getAttribute('nillable') === 'true' ? true : false,\r\n                                minOccurs: parseInt(element.getAttribute('minOccurs')),\r\n                                maxOccurs: parseInt(element.getAttribute('maxOccurs'))\r\n                            }\r\n                        }\r\n                        resolve(result);\r\n                    }\r\n                    else {\r\n                        var exception = data.getElementsByTagName('Exception')[0];\r\n                        if (exception) {\r\n                            reject(exception.getElementsByTagName('ExceptionText')[0].innerHTML);\r\n                        }\r\n                    }\r\n                })\r\n                .catch(function (jqXHR, textStatus, errorThrown) {\r\n                    reject(Error(errorThrown));\r\n                });\r\n        });\r\n        promise.then(\r\n            function (data) {\r\n                if (TC.Util.isFunction(callback)) {\r\n                    callback(data);\r\n                }\r\n            },\r\n            function (errorText) {\r\n                if (TC.Util.isFunction(error)) {\r\n                    error(errorText);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    layerProto.import = function (options) {\r\n        this.wrap.import(options);\r\n    };\r\n\r\n    layerProto.setNodeVisibility = function (id, visible) {\r\n        var self = this;\r\n\r\n        self.state = TC.Layer.state.LOADING;\r\n        self.map.trigger(TC.Consts.event.BEFOREUPDATE);\r\n        self.map.trigger(TC.Consts.event.BEFORELAYERUPDATE, { layer: self });\r\n\r\n        if (!self.tree) {\r\n            self.tree = self.getTree();\r\n        }\r\n\r\n        var node = self.findNode(id, self.tree);\r\n        if (node === self.tree) {\r\n            self.setVisibility(visible);\r\n        }\r\n        else {\r\n            var cache = self._cache.visibilityStates;\r\n            cache[id] = visible ? TC.Consts.visibility.VISIBLE : TC.Consts.visibility.NOT_VISIBLE;\r\n\r\n            var found = false;\r\n            var i;\r\n            var f;\r\n            for (i = 0; i < self.features.length; i++) {\r\n                f = self.features[i];\r\n                if (f.id == id) {\r\n                    found = true;\r\n                    f.setVisibility(visible);\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                for (i = 0; i < self.features.length; i++) {\r\n                    f = self.features[i];\r\n                    if (f._path === undefined) {\r\n                        f._path = '/' + f.getPath().join('/');\r\n                    }\r\n                    if (f._path === id) {\r\n                        f.setVisibility(visible);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        self.state = TC.Layer.state.IDLE;\r\n        self.map.trigger(TC.Consts.event.LAYERUPDATE, { layer: self });\r\n        self.map.trigger(TC.Consts.event.UPDATE);\r\n    };\r\n\r\n    layerProto.getNodeVisibility = function (id) {\r\n        var self = this;\r\n        var result = TC.Layer.prototype.getNodeVisibility.call(self, id);\r\n        if (!self.tree) {\r\n            self.tree = self.getTree();\r\n        }\r\n\r\n        var node = self.findNode(id, self.tree);\r\n        if (node === self.tree) {\r\n            result = self.getVisibility() ? TC.Consts.visibility.VISIBLE : TC.Consts.visibility.NOT_VISIBLE;\r\n        }\r\n        else {\r\n            var cache = self._cache.visibilityStates;\r\n            var r = cache[id];\r\n            if (r !== undefined) {\r\n                result = r;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n\r\n    layerProto.setModifiable = function (modifiable) {\r\n        this.wrap.setModifiable(modifiable);\r\n    };\r\n\r\n    layerProto.applyEdits = function (inserts, updates, deletes) {\r\n        return this.wrap.sendTransaction(inserts, updates, deletes);\r\n    };\r\n\r\n    layerProto.refresh = function () {\r\n        var self = this;\r\n        return this.wrap.reloadSource();\r\n    };\r\n\r\n    layerProto.getFeaturesInCurrentExtent = function (tolerance) {\r\n        var self = this;\r\n\r\n        var extent = self.map.getExtent();\r\n        return this.getFeaturesInExtent(extent, tolerance);\r\n    };\r\n\r\n    layerProto.getFeaturesInExtent = function (extent, tolerance) {\r\n        return this.wrap.getFeaturesInExtent(extent, tolerance);\r\n    };\r\n\r\n    layerProto.setProjection = function (options) {\r\n        const self = this;\r\n        self.wrap.setProjection(options);\r\n        if (options.crs && options.oldCrs) {\r\n            self.map.trigger(TC.Consts.event.BEFORELAYERUPDATE, { layer: self });\r\n            self.features.forEach(function (feat) {\r\n                feat.wrap.setGeometry(TC.Util.reproject(feat.geometry, options.oldCrs, options.crs));\r\n                feat.geometry = feat.wrap.getGeometry();\r\n            });\r\n            self.map.trigger(TC.Consts.event.LAYERUPDATE, { layer: self });\r\n        }\r\n    };\r\n   \r\n\r\n    \r\n\r\n    layerProto.exportState = function (options) {\r\n        const self = this;\r\n        options = options || {};\r\n        const lObj = {\r\n            id: self.id\r\n        };\r\n        if (self.map && self.map.crs !== self.map.options.crs) {\r\n            lObj.crs = self.map.crs;\r\n        }\r\n\r\n        // Aplicamos una precisión un dígito mayor que la del mapa, si no, al compartir algunas parcelas se deforman demasiado\r\n        var precision = Math.pow(10, (self.map.wrap.isGeo() ? TC.Consts.DEGREE_PRECISION : TC.Consts.METER_PRECISION) + 1);\r\n\r\n        const features = options.features || self.features;\r\n        lObj.features = features\r\n            .map(function (f) {\r\n                const fObj = {};\r\n                var layerStyle;\r\n                switch (true) {\r\n                    case TC.feature.Marker && f instanceof TC.feature.Marker:\r\n                        fObj.type = TC.Consts.geom.POINT;\r\n                        layerStyle = self.options.styles && self.options.styles.marker;\r\n                        break;\r\n                    case TC.feature.Point && f instanceof TC.feature.Point:\r\n                        fObj.type = TC.Consts.geom.POINT;\r\n                        layerStyle = self.options.styles && self.options.styles.point;\r\n                        break;\r\n                    //case TC.feature.MultiPoint && f instanceof TC.feature.MultiPoint:\r\n                    //    fObj.type = TC.Consts.geom.MULTIPOINT;\r\n                    //    break;\r\n                    case TC.feature.Polyline && f instanceof TC.feature.Polyline:\r\n                        fObj.type = TC.Consts.geom.POLYLINE;\r\n                        layerStyle = self.options.styles && self.options.styles.line;\r\n                        break;\r\n                    case TC.feature.MultiPolyline && f instanceof TC.feature.MultiPolyline:\r\n                        fObj.type = TC.Consts.geom.MULTIPOLYLINE;\r\n                        layerStyle = self.options.styles && self.options.styles.line;\r\n                        break;\r\n                    case TC.feature.Polygon && f instanceof TC.feature.Polygon:\r\n                        fObj.type = TC.Consts.geom.POLYGON;\r\n                        layerStyle = self.options.styles && self.options.styles.polygon;\r\n                        break;\r\n                    case TC.feature.MultiPolygon && f instanceof TC.feature.MultiPolygon:\r\n                        fObj.type = TC.Consts.geom.MULTIPOLYGON;\r\n                        layerStyle = self.options.styles && self.options.styles.polygon;\r\n                        break;\r\n                    case TC.feature.Circle && f instanceof TC.feature.Circle:\r\n                        fObj.type = TC.Consts.geom.CIRCLE;\r\n                        layerStyle = self.options.styles && self.options.styles.polygon;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                fObj.id = f.id;\r\n                fObj.geom = TC.Util.compactGeometry(f.geometry, precision);\r\n                fObj.data = f.getData();\r\n                fObj.showsPopup = f.showsPopup;\r\n                if (options.exportStyles === undefined || options.exportStyles) {\r\n                    layerStyle = TC.Util.extend({}, layerStyle);\r\n                    for (var key in layerStyle) {\r\n                        var val = layerStyle[key];\r\n                        if (TC.Util.isFunction(val)) {\r\n                            layerStyle[key] = val(f);\r\n                        }\r\n                    }\r\n                    fObj.style = TC.Util.extend(layerStyle, f.getStyle());\r\n                }\r\n                return fObj;\r\n            });\r\n        return lObj;\r\n    };\r\n    \r\n\r\n    layerProto.importState = function (obj) {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            const promises = new Array(obj.features.length);\r\n            obj.features.forEach(function (f, idx) {\r\n                const featureOptions = TC.Util.extend(f.style, { data: f.data, id: f.id, showsPopup: f.showsPopup });\r\n                var addFn;\r\n                switch (f.type) {\r\n                    case TC.Consts.geom.POLYGON:\r\n                        addFn = self.addPolygon;\r\n                        break;\r\n                    case TC.Consts.geom.MULTIPOLYGON:\r\n                        addFn = self.addMultiPolygon;\r\n                        break;\r\n                    case TC.Consts.geom.POLYLINE:\r\n                        addFn = self.addPolyline;\r\n                        break;\r\n                    case TC.Consts.geom.MULTIPOLYLINE:\r\n                        addFn = self.addMultiPolyline;\r\n                        break;\r\n                    case TC.Consts.geom.CIRCLE:\r\n                        addFn = self.addCircle;\r\n                        break;\r\n                    case TC.Consts.geom.POINT:\r\n                        if (f.style && (f.style.url || f.style.className)) {\r\n                            addFn = self.addMarker;\r\n                        }\r\n                        else {\r\n                            addFn = self.addPoint;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                if (addFn) {\r\n                    var geom = TC.Util.explodeGeometry(f.geom);\r\n                    if (obj.crs && self.map.crs !== obj.crs) {\r\n                        promises[idx] = new Promise(function (res, rej) {\r\n                            self.map.one(TC.Consts.event.PROJECTIONCHANGE, function (e) {\r\n                                addFn.call(self, geom, featureOptions).then(\r\n                                    function () {\r\n                                        res();\r\n                                    },\r\n                                    function () {\r\n                                        rej();\r\n                                    }\r\n                                );\r\n                            });\r\n                        });\r\n                    }\r\n                    else {\r\n                        promises[idx] = addFn.call(self, geom, featureOptions);\r\n                    }\r\n                }\r\n            });\r\n            Promise.all(promises).then(\r\n                function () {\r\n                    resolve();\r\n                },\r\n                function (err) {\r\n                    reject(err instanceof Error ? err : Error(err));\r\n                });\r\n        });\r\n    };\r\n})();"]}