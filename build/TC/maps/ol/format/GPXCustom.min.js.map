{"version":3,"sources":["ol/format/GPXCustom.js"],"names":["NAMESPACE_URIS","CUSTOM_NAMESPACE_URIS","array","combi","temp","len","Math","pow","length","i","j","indexOf","push","join","getAllCombinations","slice","customURIS","formatURIS","index","splice","cleanCombinationsByFormat","concat","readDateTime","node","ol","format","xsd","SCHEMA_LOCATION","FEATURE_READER","rte","readRte","trk","readTrk","wpt","readWpt","GPX_PARSERS","xml","makeStructureNS","makeArrayPusher","LINK_PARSERS","text","makeObjectPropertySetter","readString","type","GPX_SERIALIZERS","makeChildAppender","feature","objectStack","options","properties","getProperties","context","geometry","getGeometry","getType","geom","GeometryType","LINE_STRING","lineString","Feature","transformWithOptions","getLayout","getCoordinates","parentNode","orderedKeys","RTE_SEQUENCE","namespaceURI","values","makeSequence","pushSerializeAndPop","RTE_SERIALIZERS","OBJECT_PROPERTY_NODE_FACTORY","MULTI_LINE_STRING","multiLineString","getLineStrings","TRK_SEQUENCE","TRK_SERIALIZERS","POINT","point","writeWptType","RTE_PARSERS","name","cmt","desc","src","link","parseLink","number","readNonNegativeInteger","extensions","parseExtensions","rtept","pushParseAndPop","RTEPT_PARSERS","rteValues","flatCoordinates","layoutOptions","appendCoordinate","ele","readDecimal","time","TRK_PARSERS","trkseg","parseNode","TRKSEG_PARSERS","trkpt","TRKPT_PARSERS","trkValues","WPT_PARSERS","magvar","geoidheight","sym","fix","sat","hdop","vdop","pdop","ageofdgpsdata","dgpsid","LINK_SEQUENCE","LINK_SERIALIZERS","writeStringTextNode","writeLink","writeNonNegativeIntegerTextNode","makeArraySerializer","RTEPT_TYPE_SEQUENCE","TRKSEG_SERIALIZERS","TRKSEG_NODE_FACTORY","makeSimpleNodeFactory","WPT_TYPE_SEQUENCE","WPT_TYPE_SERIALIZERS","writeDecimalTextNode","dateTime","date","Date","string","getUTCFullYear","padNumber","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","appendChild","DOCUMENT","createTextNode","GEOMETRY_TYPE_TO_NODENAME","Point","LineString","MultiLineString","GPX_NODE_FACTORY","value","opt_nodeName","nodeName","createElementNS","parseFloat","getAttribute","hasZ","hasM","applyLayoutOptions","ends","layout","GeometryLayout","XY","stride","XYZM","XYZ","XYM","ii","href","setProperties","coordinates","setAttribute","coordinate","setAttributeNS","String","GPXCustom","GPX","[object Object]","opt_options","super","includes","featureReader","localName","this","getReadOptions","handleReadExtensions_","features","adaptOptions","gpx","XML_SCHEMA_INSTANCE_URI"],"mappings":"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","sourcesContent":["(function () {\r\n    /**\r\n     * @const\r\n     * @type {Array<null|string>}\r\n     */\r\n    let NAMESPACE_URIS = [\r\n        null,\r\n        'http://www.topografix.com/GPX/1/0',\r\n        'http://www.topografix.com/GPX/1/1'\r\n    ];\r\n\r\n\r\n    // GLS: Obtenemos las combinaciones posibles\r\n    const getAllCombinations = function (array) {\r\n        var combi = [];\r\n        var temp = [];\r\n\r\n        var len = Math.pow(2, array.length);\r\n\r\n        for (var i = 0; i < len; i++) {\r\n            temp = [];\r\n            for (var j = 0; j < array.length; j++) {\r\n                if ((i & Math.pow(2, j))) {\r\n                    if (temp.indexOf(array[j]) == -1)\r\n                        temp.push(array[j]);\r\n                }\r\n            }\r\n            if (temp.length > 0) {\r\n                if (combi.indexOf(temp.join(' ')) == -1)\r\n                    combi.push(temp.join(' '));\r\n            }\r\n        }\r\n\r\n        return combi;\r\n    }\r\n\r\n    // GLS: Limpiamos de los nuevos los URIS ya disponibles en el formato\r\n    const cleanCombinationsByFormat = function (customURIS, formatURIS) {\r\n        if (customURIS && customURIS.length > 0) {\r\n            for (var i = 0; i < formatURIS.length; i++) {\r\n                var index = customURIS.indexOf(formatURIS[i]);\r\n                if (index > -1)\r\n                    customURIS.splice(index, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    // GLS: Obtenemos los nuevos URIS para KML\r\n    const CUSTOM_NAMESPACE_URIS = getAllCombinations(NAMESPACE_URIS.slice().slice(1));\r\n    // GLS: Nos quedamos con las combinaciones nuevas\r\n    cleanCombinationsByFormat(CUSTOM_NAMESPACE_URIS, NAMESPACE_URIS);\r\n    NAMESPACE_URIS = NAMESPACE_URIS.concat(CUSTOM_NAMESPACE_URIS);\r\n\r\n    // FLP: No utilizamos directamente ol.format.xsd.readDateTime porque esta función devuelve un timestamp en segundos.\r\n    const readDateTime = function (node) {\r\n        return ol.format.xsd.readDateTime(node) * 1000;\r\n    };\r\n\r\n    /**\r\n     * @const\r\n     * @type {string}\r\n     */\r\n    const SCHEMA_LOCATION = 'http://www.topografix.com/GPX/1/1 ' +\r\n        'http://www.topografix.com/GPX/1/1/gpx.xsd';\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, function(Node, Array<*>): (ol.Feature|undefined)>}\r\n     */\r\n    const FEATURE_READER = {\r\n        'rte': readRte,\r\n        'trk': readTrk,\r\n        'wpt': readWpt\r\n    };\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const GPX_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'rte': ol.xml.makeArrayPusher(readRte),\r\n            'trk': ol.xml.makeArrayPusher(readTrk),\r\n            'wpt': ol.xml.makeArrayPusher(readWpt)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const LINK_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'text': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString, 'linkText'),\r\n            'type': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString, 'linkType')\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const GPX_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'rte': ol.xml.makeChildAppender(writeRte),\r\n            'trk': ol.xml.makeChildAppender(writeTrk),\r\n            'wpt': ol.xml.makeChildAppender(writeWpt)\r\n        });\r\n\r\n    const writeDateTimeTextNode = function (node, dateTime) {\r\n        var date = new Date(dateTime);\r\n        var string = date.getUTCFullYear() + '-' +\r\n            ol.string.padNumber(date.getUTCMonth() + 1, 2) + '-' +\r\n            ol.string.padNumber(date.getUTCDate(), 2) + 'T' +\r\n            ol.string.padNumber(date.getUTCHours(), 2) + ':' +\r\n            ol.string.padNumber(date.getUTCMinutes(), 2) + ':' +\r\n            ol.string.padNumber(date.getUTCSeconds(), 2) + 'Z';\r\n        node.appendChild(ol.xml.DOCUMENT.createTextNode(string));\r\n    };\r\n\r\n    /**\r\n     * @typedef {Object} Options\r\n     * @property {function(Feature, Node)} [readExtensions] Callback function\r\n     * to process `extensions` nodes. To prevent memory leaks, this callback function must\r\n     * not store any references to the node. Note that the `extensions`\r\n     * node is not allowed in GPX 1.0. Moreover, only `extensions`\r\n     * nodes from `wpt`, `rte` and `trk` can be processed, as those are\r\n     * directly mapped to a feature.\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} LayoutOptions\r\n     * @property {boolean} [hasZ]\r\n     * @property {boolean} [hasM]\r\n     */\r\n\r\n    /**\r\n     * @classdesc\r\n     * Feature format for reading and writing data in the GPX format.\r\n     *\r\n     * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first\r\n     * feature of the source.\r\n     *\r\n     * When reading, routes (`<rte>`) are converted into LineString geometries, and\r\n     * tracks (`<trk>`) into MultiLineString. Any properties on route and track\r\n     * waypoints are ignored.\r\n     *\r\n     * When writing, LineString geometries are output as routes (`<rte>`), and\r\n     * MultiLineString as tracks (`<trk>`).\r\n     *\r\n     * @api\r\n     */\r\n    class GPXCustom extends ol.format.GPX {\r\n\r\n        /**\r\n         * @param {Options=} opt_options Options.\r\n         */\r\n        constructor(opt_options) {\r\n            super(opt_options);\r\n        }\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        readFeatureFromNode(node, opt_options) {\r\n            if (!ol.array.includes(NAMESPACE_URIS, node.namespaceURI)) {\r\n                return null;\r\n            }\r\n            const featureReader = FEATURE_READER[node.localName];\r\n            if (!featureReader) {\r\n                return null;\r\n            }\r\n            const feature = featureReader(node, [this.getReadOptions(node, opt_options)]);\r\n            if (!feature) {\r\n                return null;\r\n            }\r\n            this.handleReadExtensions_([feature]);\r\n            return feature;\r\n        }\r\n\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        readFeaturesFromNode(node, opt_options) {\r\n            if (!ol.array.includes(NAMESPACE_URIS, node.namespaceURI)) {\r\n                return [];\r\n            }\r\n            if (node.localName == 'gpx') {\r\n                /** @type {Array<ol.Feature>} */\r\n                const features = ol.xml.pushParseAndPop([], GPX_PARSERS,\r\n                    node, [this.getReadOptions(node, opt_options)]);\r\n                if (features) {\r\n                    this.handleReadExtensions_(features);\r\n                    return features;\r\n                } else {\r\n                    return [];\r\n                }\r\n            }\r\n            return [];\r\n        }\r\n\r\n        writeFeaturesNode(features, opt_options) {\r\n            opt_options = this.adaptOptions(opt_options);\r\n            //FIXME Serialize metadata\r\n            const gpx = ol.xml.createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');\r\n            const xmlnsUri = 'http://www.w3.org/2000/xmlns/';\r\n            gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', ol.xml.XML_SCHEMA_INSTANCE_URI);\r\n            gpx.setAttributeNS(ol.xml.XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATION);\r\n            gpx.setAttribute('version', '1.1');\r\n            gpx.setAttribute('creator', 'OpenLayers');\r\n\r\n            ol.xml.pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\r\n                ({ node: gpx }), GPX_SERIALIZERS, GPX_NODE_FACTORY, features, [opt_options]);\r\n            return gpx;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const RTE_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'name': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'cmt': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'desc': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'src': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'link': parseLink,\r\n            'number': ol.xml.makeObjectPropertySetter(ol.format.xsd.readNonNegativeInteger),\r\n            'extensions': parseExtensions,\r\n            'type': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'rtept': parseRtePt\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const RTEPT_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'ele': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'time': ol.xml.makeObjectPropertySetter(readDateTime)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const TRK_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'name': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'cmt': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'desc': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'src': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'link': parseLink,\r\n            'number': ol.xml.makeObjectPropertySetter(ol.format.xsd.readNonNegativeInteger),\r\n            'type': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'extensions': parseExtensions,\r\n            'trkseg': parseTrkSeg\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const TRKSEG_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'trkpt': parseTrkPt\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const TRKPT_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'ele': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'time': ol.xml.makeObjectPropertySetter(readDateTime)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\r\n     */\r\n    const WPT_PARSERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'ele': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'time': ol.xml.makeObjectPropertySetter(readDateTime),\r\n            'magvar': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'geoidheight': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'name': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'cmt': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'desc': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'src': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'link': parseLink,\r\n            'sym': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'type': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'fix': ol.xml.makeObjectPropertySetter(ol.format.xsd.readString),\r\n            'sat': ol.xml.makeObjectPropertySetter(ol.format.xsd.readNonNegativeInteger),\r\n            'hdop': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'vdop': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'pdop': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'ageofdgpsdata': ol.xml.makeObjectPropertySetter(ol.format.xsd.readDecimal),\r\n            'dgpsid': ol.xml.makeObjectPropertySetter(ol.format.xsd.readNonNegativeInteger),\r\n            'extensions': parseExtensions\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Array<string>}\r\n     */\r\n    const LINK_SEQUENCE = ['text', 'type'];\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const LINK_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'text': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'type': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const RTE_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'rtept'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const RTE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'name': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'cmt': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'desc': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'src': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'link': ol.xml.makeChildAppender(writeLink),\r\n            'number': ol.xml.makeChildAppender(ol.format.xsd.writeNonNegativeIntegerTextNode),\r\n            'type': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'rtept': ol.xml.makeArraySerializer(ol.xml.makeChildAppender(writeWptType))\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const RTEPT_TYPE_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'ele', 'time'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const TRK_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'name', 'cmt', 'desc', 'src', 'link', 'number', 'type', 'trkseg'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const TRK_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'name': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'cmt': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'desc': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'src': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'link': ol.xml.makeChildAppender(writeLink),\r\n            'number': ol.xml.makeChildAppender(ol.format.xsd.writeNonNegativeIntegerTextNode),\r\n            'type': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'trkseg': ol.xml.makeArraySerializer(ol.xml.makeChildAppender(writeTrkSeg))\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {function(*, Array<*>, string=): (Node|undefined)}\r\n     */\r\n    const TRKSEG_NODE_FACTORY = ol.xml.makeSimpleNodeFactory('trkpt');\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const TRKSEG_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'trkpt': ol.xml.makeChildAppender(writeWptType)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Array<string>>}\r\n     */\r\n    const WPT_TYPE_SEQUENCE = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, [\r\n            'ele', 'time', 'magvar', 'geoidheight', 'name', 'cmt', 'desc', 'src',\r\n            'link', 'sym', 'type', 'fix', 'sat', 'hdop', 'vdop', 'pdop',\r\n            'ageofdgpsdata', 'dgpsid'\r\n        ]);\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, Object<string, import(\"../xml.js\").Serializer>>}\r\n     */\r\n    const WPT_TYPE_SERIALIZERS = ol.xml.makeStructureNS(\r\n        NAMESPACE_URIS, {\r\n            'ele': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'time': ol.xml.makeChildAppender(writeDateTimeTextNode),\r\n            'magvar': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'geoidheight': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'name': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'cmt': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'desc': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'src': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'link': ol.xml.makeChildAppender(writeLink),\r\n            'sym': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'type': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'fix': ol.xml.makeChildAppender(ol.format.xsd.writeStringTextNode),\r\n            'sat': ol.xml.makeChildAppender(ol.format.xsd.writeNonNegativeIntegerTextNode),\r\n            'hdop': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'vdop': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'pdop': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'ageofdgpsdata': ol.xml.makeChildAppender(ol.format.xsd.writeDecimalTextNode),\r\n            'dgpsid': ol.xml.makeChildAppender(ol.format.xsd.writeNonNegativeIntegerTextNode)\r\n        });\r\n\r\n\r\n    /**\r\n     * @const\r\n     * @type {Object<string, string>}\r\n     */\r\n    const GEOMETRY_TYPE_TO_NODENAME = {\r\n        'Point': 'wpt',\r\n        'LineString': 'rte',\r\n        'MultiLineString': 'trk'\r\n    };\r\n\r\n\r\n    /**\r\n     * @param {*} value Value.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @param {string=} opt_nodeName Node name.\r\n     * @return {Node|undefined} Node.\r\n     */\r\n    function GPX_NODE_FACTORY(value, objectStack, opt_nodeName) {\r\n        const geometry = /** @type {ol.Feature} */ (value).getGeometry();\r\n        if (geometry) {\r\n            const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];\r\n            if (nodeName) {\r\n                const parentNode = objectStack[objectStack.length - 1].node;\r\n                return ol.xml.createElementNS(parentNode.namespaceURI, nodeName);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Array<number>} flatCoordinates Flat coordinates.\r\n     * @param {LayoutOptions} layoutOptions Layout options.\r\n     * @param {Element} node Node.\r\n     * @param {!Object} values Values.\r\n     * @return {Array<number>} Flat coordinates.\r\n     */\r\n    function appendCoordinate(flatCoordinates, layoutOptions, node, values) {\r\n        flatCoordinates.push(\r\n            parseFloat(node.getAttribute('lon')),\r\n            parseFloat(node.getAttribute('lat')));\r\n        if ('ele' in values) {\r\n            flatCoordinates.push(/** @type {number} */(values['ele']));\r\n            delete values['ele'];\r\n            layoutOptions.hasZ = true;\r\n        } else {\r\n            flatCoordinates.push(0);\r\n        }\r\n        if ('time' in values) {\r\n            flatCoordinates.push(/** @type {number} */(values['time']));\r\n            delete values['time'];\r\n            layoutOptions.hasM = true;\r\n        } else {\r\n            flatCoordinates.push(0);\r\n        }\r\n        return flatCoordinates;\r\n    }\r\n\r\n\r\n    /**\r\n     * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates\r\n     * and ends arrays by shrinking them accordingly (removing unused zero entries).\r\n     *\r\n     * @param {LayoutOptions} layoutOptions Layout options.\r\n     * @param {Array<number>} flatCoordinates Flat coordinates.\r\n     * @param {Array<number>=} ends Ends.\r\n     * @return {ol.geom.GeometryLayout} Layout.\r\n     */\r\n    function applyLayoutOptions(layoutOptions, flatCoordinates, ends) {\r\n        let layout = ol.geom.GeometryLayout.XY;\r\n        let stride = 2;\r\n        if (layoutOptions.hasZ && layoutOptions.hasM) {\r\n            layout = ol.geom.GeometryLayout.XYZM;\r\n            stride = 4;\r\n        } else if (layoutOptions.hasZ) {\r\n            layout = ol.geom.GeometryLayout.XYZ;\r\n            stride = 3;\r\n        } else if (layoutOptions.hasM) {\r\n            layout = ol.geom.GeometryLayout.XYM;\r\n            stride = 3;\r\n        }\r\n        if (stride !== 4) {\r\n            for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {\r\n                flatCoordinates[i * stride] = flatCoordinates[i * 4];\r\n                flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];\r\n                if (layoutOptions.hasZ) {\r\n                    flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];\r\n                }\r\n                if (layoutOptions.hasM) {\r\n                    flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];\r\n                }\r\n            }\r\n            flatCoordinates.length = flatCoordinates.length / 4 * stride;\r\n            if (ends) {\r\n                for (let i = 0, ii = ends.length; i < ii; i++) {\r\n                    ends[i] = ends[i] / 4 * stride;\r\n                }\r\n            }\r\n        }\r\n        return layout;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function parseLink(node, objectStack) {\r\n        const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n        const href = node.getAttribute('href');\r\n        if (href !== null) {\r\n            values['link'] = href;\r\n        }\r\n        ol.xml.parseNode(LINK_PARSERS, node, objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function parseExtensions(node, objectStack) {\r\n        const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n        values['extensionsNode_'] = node;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function parseRtePt(node, objectStack) {\r\n        const values = ol.xml.pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);\r\n        if (values) {\r\n            const rteValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);\r\n            const flatCoordinates = /** @type {Array<number>} */ (rteValues['flatCoordinates']);\r\n            const layoutOptions = /** @type {LayoutOptions} */ (rteValues['layoutOptions']);\r\n            appendCoordinate(flatCoordinates, layoutOptions, node, values);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function parseTrkPt(node, objectStack) {\r\n        const values = ol.xml.pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);\r\n        if (values) {\r\n            const trkValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);\r\n            const flatCoordinates = /** @type {Array<number>} */ (trkValues['flatCoordinates']);\r\n            const layoutOptions = /** @type {LayoutOptions} */ (trkValues['layoutOptions']);\r\n            appendCoordinate(flatCoordinates, layoutOptions, node, values);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function parseTrkSeg(node, objectStack) {\r\n        const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);\r\n        ol.xml.parseNode(TRKSEG_PARSERS, node, objectStack);\r\n        const flatCoordinates = /** @type {Array<number>} */\r\n            (values['flatCoordinates']);\r\n        const ends = /** @type {Array<number>} */ (values['ends']);\r\n        ends.push(flatCoordinates.length);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.Feature|undefined} Track.\r\n     */\r\n    function readRte(node, objectStack) {\r\n        const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (objectStack[0]);\r\n        const values = ol.xml.pushParseAndPop({\r\n            'flatCoordinates': [],\r\n            'layoutOptions': {}\r\n        }, RTE_PARSERS, node, objectStack);\r\n        if (!values) {\r\n            return undefined;\r\n        }\r\n        const flatCoordinates = /** @type {Array<number>} */\r\n            (values['flatCoordinates']);\r\n        delete values['flatCoordinates'];\r\n        const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\r\n        delete values['layoutOptions'];\r\n        const layout = applyLayoutOptions(layoutOptions, flatCoordinates);\r\n        const geometry = new ol.geom.LineString(flatCoordinates, layout);\r\n        ol.format.Feature.transformWithOptions(geometry, false, options);\r\n        const feature = new ol.Feature(geometry);\r\n        feature.setProperties(values, true);\r\n        return feature;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.Feature|undefined} Track.\r\n     */\r\n    function readTrk(node, objectStack) {\r\n        const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (objectStack[0]);\r\n        const values = ol.xml.pushParseAndPop({\r\n            'flatCoordinates': [],\r\n            'ends': [],\r\n            'layoutOptions': {}\r\n        }, TRK_PARSERS, node, objectStack);\r\n        if (!values) {\r\n            return undefined;\r\n        }\r\n        const flatCoordinates = /** @type {Array<number>} */\r\n            (values['flatCoordinates']);\r\n        delete values['flatCoordinates'];\r\n        const ends = /** @type {Array<number>} */ (values['ends']);\r\n        delete values['ends'];\r\n        const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);\r\n        delete values['layoutOptions'];\r\n        const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);\r\n        const geometry = new ol.geom.MultiLineString(flatCoordinates, layout, ends);\r\n        ol.format.Feature.transformWithOptions(geometry, false, options);\r\n        const feature = new ol.Feature(geometry);\r\n        feature.setProperties(values, true);\r\n        return feature;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     * @return {ol.Feature|undefined} Waypoint.\r\n     */\r\n    function readWpt(node, objectStack) {\r\n        const options = /** @type {import(\"./Feature.js\").ReadOptions} */ (objectStack[0]);\r\n        const values = ol.xml.pushParseAndPop({}, WPT_PARSERS, node, objectStack);\r\n        if (!values) {\r\n            return undefined;\r\n        }\r\n        const layoutOptions = /** @type {LayoutOptions} */ ({});\r\n        const coordinates = appendCoordinate([], layoutOptions, node, values);\r\n        const layout = applyLayoutOptions(layoutOptions, coordinates);\r\n        const geometry = new ol.geom.Point(coordinates, layout);\r\n        ol.format.Feature.transformWithOptions(geometry, false, options);\r\n        const feature = new ol.Feature(geometry);\r\n        feature.setProperties(values, true);\r\n        return feature;\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {string} value Value for the link's `href` attribute.\r\n     * @param {Array<*>} objectStack Node stack.\r\n     */\r\n    function writeLink(node, value, objectStack) {\r\n        node.setAttribute('href', value);\r\n        const context = objectStack[objectStack.length - 1];\r\n        const properties = context['properties'];\r\n        const link = [\r\n            properties['linkText'],\r\n            properties['linkType']\r\n        ];\r\n        ol.xml.pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */({ node: node }),\r\n            LINK_SERIALIZERS, ol.xml.OBJECT_PROPERTY_NODE_FACTORY,\r\n            link, objectStack, LINK_SEQUENCE);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeWptType(node, coordinate, objectStack) {\r\n        const context = objectStack[objectStack.length - 1];\r\n        const parentNode = context.node;\r\n        const namespaceURI = parentNode.namespaceURI;\r\n        const properties = context['properties'];\r\n        //FIXME Projection handling\r\n        node.setAttributeNS(null, 'lat', String(coordinate[1]));\r\n        node.setAttributeNS(null, 'lon', String(coordinate[0]));\r\n        const geometryLayout = context['geometryLayout'];\r\n        switch (geometryLayout) {\r\n            case ol.geom.GeometryLayout.XYZM:\r\n                if (coordinate[3] !== 0) {\r\n                    properties['time'] = coordinate[3];\r\n                }\r\n            // fall through\r\n            case ol.geom.GeometryLayout.XYZ:\r\n                if (coordinate[2] !== 0) {\r\n                    properties['ele'] = coordinate[2];\r\n                }\r\n                break;\r\n            case ol.geom.GeometryLayout.XYM:\r\n                if (coordinate[2] !== 0) {\r\n                    properties['time'] = coordinate[2];\r\n                }\r\n                break;\r\n            default:\r\n            // pass\r\n        }\r\n        const orderedKeys = (node.nodeName == 'rtept') ?\r\n            RTEPT_TYPE_SEQUENCE[namespaceURI] :\r\n            WPT_TYPE_SEQUENCE[namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(/** @type {import(\"../xml.js\").NodeStackItem} */\r\n            ({ node: node, 'properties': properties }),\r\n            WPT_TYPE_SERIALIZERS, ol.xml.OBJECT_PROPERTY_NODE_FACTORY,\r\n            values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.Feature} feature Feature.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeRte(node, feature, objectStack) {\r\n        const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[0]);\r\n        const properties = feature.getProperties();\r\n        const context = { node: node };\r\n        context['properties'] = properties;\r\n        const geometry = feature.getGeometry();\r\n        if (geometry.getType() == ol.geom.GeometryType.LINE_STRING) {\r\n            const lineString = /** @type {ol.geom.LineString} */ (ol.format.Feature.transformWithOptions(geometry, true, options));\r\n            context['geometryLayout'] = lineString.getLayout();\r\n            properties['rtept'] = lineString.getCoordinates();\r\n        }\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context,\r\n            RTE_SERIALIZERS, ol.xml.OBJECT_PROPERTY_NODE_FACTORY,\r\n            values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.Feature} feature Feature.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeTrk(node, feature, objectStack) {\r\n        const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[0]);\r\n        const properties = feature.getProperties();\r\n        /** @type {import(\"../xml.js\").NodeStackItem} */\r\n        const context = { node: node };\r\n        context['properties'] = properties;\r\n        const geometry = feature.getGeometry();\r\n        if (geometry.getType() == ol.geom.GeometryType.MULTI_LINE_STRING) {\r\n            const multiLineString = /** @type {ol.geom.MultiLineString} */ (ol.format.Feature.transformWithOptions(geometry, true, options));\r\n            properties['trkseg'] = multiLineString.getLineStrings();\r\n        }\r\n        const parentNode = objectStack[objectStack.length - 1].node;\r\n        const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];\r\n        const values = ol.xml.makeSequence(properties, orderedKeys);\r\n        ol.xml.pushSerializeAndPop(context,\r\n            TRK_SERIALIZERS, ol.xml.OBJECT_PROPERTY_NODE_FACTORY,\r\n            values, objectStack, orderedKeys);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Node} node Node.\r\n     * @param {ol.geom.LineString} lineString LineString.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeTrkSeg(node, lineString, objectStack) {\r\n        /** @type {import(\"../xml.js\").NodeStackItem} */\r\n        const context = { node: node };\r\n        context['geometryLayout'] = lineString.getLayout();\r\n        context['properties'] = {};\r\n        ol.xml.pushSerializeAndPop(context,\r\n            TRKSEG_SERIALIZERS, TRKSEG_NODE_FACTORY,\r\n            lineString.getCoordinates(), objectStack);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param {Element} node Node.\r\n     * @param {ol.Feature} feature Feature.\r\n     * @param {Array<*>} objectStack Object stack.\r\n     */\r\n    function writeWpt(node, feature, objectStack) {\r\n        const options = /** @type {import(\"./Feature.js\").WriteOptions} */ (objectStack[0]);\r\n        const context = objectStack[objectStack.length - 1];\r\n        context['properties'] = feature.getProperties();\r\n        const geometry = feature.getGeometry();\r\n        if (geometry.getType() == ol.geom.GeometryType.POINT) {\r\n            const point = /** @type {ol.geom.Point} */ (ol.format.Feature.transformWithOptions(geometry, true, options));\r\n            context['geometryLayout'] = point.getLayout();\r\n            writeWptType(node, point.getCoordinates(), objectStack);\r\n        }\r\n    }\r\n\r\n    ol.format.GPXCustom = GPXCustom;\r\n\r\n})();\r\n"]}