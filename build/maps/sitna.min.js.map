{"version":3,"sources":["sitna.js"],"names":["SITNA","window","TC","isDebug","Cfg","script","document","currentScript","scripts","getElementsByTagName","length","src","getAttribute","apiLocation","substr","lastIndexOf","url","req","XMLHttpRequest","open","send","head","createElement","type","text","responseText","appendChild","Consts","layout","Map","div","options","map","this","controls","search","allowedSearchTypes","Util","extend","urban","street","number","cadastral","keys","Object","searchCfg","forEach","key","isPlainObject","searchType","NUMBER","CADASTRAL","URBAN","tcSearch","tcSearchLayer","tcMap","addLayer","layer","callback","setBaseLayer","addMarker","coords","zoomToMarkers","loaded","loadJS","control","Search","register","getLayer","then","activeControl","fi","getControlsByClass","activate","getQueryableData","queryable","availableSearchTypes","queryableData","params","request","service","typename","featurePrefix","featureType","version","propertyname","dataIdProperty","Array","concat","outputProperties","join","outputformat","format","JSON","getParamString","ajax","responseType","mimeType","response","responseData","data","features","i","f","id","ip","properties","hasOwnProperty","push","idPropertiesIdentifier","label","lbl","add","trim","outputFormatLabel","tcFormat","sort","a","b","indexOf","removePunctuation","split","filter","value","index","arr","getMunicipalities","mapSearchType","MUNICIPALITY","getUrbanAreas","getCommonwealths","COMMONWEALTH","getCouncils","COUNCIL","searchCommonwealth","searchTyped","searchCouncil","searchUrbanArea","searchMunicipality","idQuery","getUID","query","goToIdFormat","_search","dataLayer","dataRole","removeSearch","getSearchTypeByRole","goTo","syncLoadJS","equalTo","and","getProperties","layerType","WFS","geometryName","outputFormat","styles","bind","addAllowedSearchType","one","event","SEARCHQUERYEMPTY","e","toast","EMPTY_RESULTS_LABEL","msgType","INFO","duration","FEATURESADD","zoomToFeatures","goToResult","searchFeature","field","prefix","tcSrchGenericLayer","layerOptions","stealth","maxFeatures","filters","elm","name","comparison","EQUAL_TO","apply","transformFilter","GENERIC","on","showsPopup","queryableFeatures","LAYERUPDATE","newData","removeFeature","removeLayer","exportImage"],"mappings":"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","sourcesContent":["/**\r\n * @overview API SITNA: API JavaScript para la visualización de datos georreferenciados en aplicaciones web.\r\n * @version 2.1.0\r\n * @copyright 2019 Gobierno de Navarra\r\n * @license BSD-2-Clause\r\n * @author Fernando Lacunza <flacunza@itracasa.es>\r\n */\r\n \r\n/**\r\n * Espacio de nombres donde se encuentran las clases de la API SITNA.\r\n * @namespace\r\n */\r\n\r\nvar SITNA = window.SITNA || {};\r\nvar TC = window.TC || {};\r\nTC.isDebug = true;\r\n\r\n(function () {\r\n    if (!window.TC || !window.TC.Cfg) {\r\n        var script;\r\n        if (document.currentScript) {\r\n            script = document.currentScript;\r\n        }\r\n        else {\r\n            var scripts = document.getElementsByTagName('script');\r\n            script = scripts[scripts.length - 1];\r\n        }\r\n        var src = script.getAttribute('src');\r\n        TC.apiLocation = src.substr(0, src.lastIndexOf('/') + 1);\r\n        var url = TC.apiLocation + (TC.isDebug ? 'tcmap.js' : 'tcmap.min.js');\r\n        var req = new XMLHttpRequest();\r\n        req.open(\"GET\", url, false); // 'false': synchronous.\r\n        req.send(null);\r\n\r\n        var head = document.getElementsByTagName(\"head\")[0];\r\n        script = document.createElement(\"script\");\r\n        script.type = \"text/javascript\";\r\n        script.text = req.responseText;\r\n        head.appendChild(script);\r\n    }\r\n})();\r\n\r\n/**\r\n * Espacio de nombres donde se encuentran las constantes de utilidad.\r\n * @namespace SITNA.Consts\r\n */\r\nSITNA.Consts = TC.Consts;\r\n\r\n/**\r\n * Configuración general de la API. Cualquier llamada a un método o un constructor de la API sin parámetro de opciones toma las opciones de aquí. \r\n * Hay que tener en cuenta que el archivo config.json de una maquetación puede sobreescribir los valores por defecto de las propiedades de este espacio de nombres \r\n * (consultar el tutorial {@tutorial layout_cfg} para ver instrucciones de uso de maquetaciones).\r\n * @member Cfg\r\n * @type MapOptions\r\n * @memberof SITNA\r\n * @example <caption>Configuración de capas base - [Ver en vivo](../examples/Cfg.baseLayers.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Establecer un proxy porque se hacen peticiones a otro dominio.\r\n *     SITNA.Cfg.proxy = \"proxy.ashx?\";\r\n * \r\n *     // Añadir PNOA y establecerla como mapa de fondo por defecto.\r\n *     SITNA.Cfg.baseLayers.push({\r\n *         id: \"PNOA\",\r\n *         url: \"http://www.ign.es/wms-inspire/pnoa-ma\",\r\n *         layerNames: \"OI.OrthoimageCoverage\",\r\n *         isBase: true\r\n *     });\r\n *     SITNA.Cfg.defaultBaseLayer = \"PNOA\";\r\n * \r\n *     var map = new SITNA.Map(\"mapa\");\r\n * </script>\r\n * @example <caption>Configuración de CRS - [Ver en vivo](../examples/Cfg.crs.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // SITNA.Cfg.baseLayers[0] (capa por defecto) no es compatible con WGS 84, lo cambiamos por SITNA.Consts.layer.IDENA_DYNBASEMAP.\r\n *     SITNA.Cfg.baseLayers[0] = SITNA.Consts.layer.IDENA_DYNBASEMAP;\r\n *     SITNA.Cfg.defaultBaseLayer = SITNA.Consts.layer.IDENA_DYNBASEMAP;\r\n *     \r\n *     // WGS 84\r\n *     SITNA.Cfg.crs = \"EPSG:4326\";\r\n *     // Coordenadas en grados decimales, porque el sistema de referencia espacial es WGS 84.\r\n *     SITNA.Cfg.initialExtent = [-2.848205, 41.789124, -0.321350, 43.557898];\r\n *     SITNA.Cfg.maxExtent = [-2.848205, 41.789124, -0.321350, 43.557898];\r\n *     \r\n *     var map = new SITNA.Map(\"mapa\", {\r\n *         // SITNA.Cfg.baseLayers[0] (capa por defecto) no es compatible con WGS 84, establecer la capa SITNA.Consts.layer.IDENA_DYNBASEMAP en el control de mapa de situación.\r\n *         controls: {\r\n *             overviewMap: {\r\n *                 layer: SITNA.Consts.layer.IDENA_DYNBASEMAP\r\n *             }\r\n *         }\r\n *     });\r\n * </script>\r\n * @example <caption>Configuración de capas de trabajo - [Ver en vivo](../examples/Cfg.workLayers.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Establecer un proxy porque se hacen peticiones a otro dominio.\r\n *     SITNA.Cfg.proxy = \"proxy.ashx?\";\r\n * \r\n *     SITNA.Cfg.workLayers = [{\r\n *         id: \"csantiago\",\r\n *         title: \"Camino de Santiago\",\r\n *         url: \"http://www.ign.es/wms-inspire/camino-santiago\",\r\n *         layerNames: \"PS.ProtectedSite,GN.GeographicalNames,AU.AdministrativeUnit\"\r\n *     }];\r\n *     var map = new SITNA.Map(\"mapa\");\r\n * </script>\r\n * @example <caption>Configuración de uso de proxy</caption> {@lang javascript}\r\n * SITNA.Cfg.proxy = \"\"; // Las peticiones a http://www.otrodominio.com se hacen directamente\r\n * \r\n * SITNA.Cfg.proxy = \"/cgi-bin/proxy.cgi?url=\"; // Las peticiones a http://www.otrodominio.com se convierten en peticiones a /cgi-bin/proxy.cgi?url=http://www.otrodominio.com\r\n */\r\nSITNA.Cfg = TC.Cfg;\r\n\r\nSITNA.Cfg.layout = TC.apiLocation + 'TC/layout/responsive';\r\n\r\n/**\r\n * Objeto principal de la API, instancia un mapa dentro de un elemento del DOM. Nótese que la inicialización del mapa es asíncrona, por tanto cualquier código\r\n * que haga uso de este objeto debería estar dentro de una función de callback pasada como parámetro al método [loaded]{@link SITNA.Map#loaded}.\r\n *\r\n * Las opciones de configuración del mapa son una combinación de las opciones de configuración global (definidas en {@link SITNA.Cfg},\r\n * las opciones definidas por la [maquetación]{@tutorial layout_cfg} que utilicemos, y las opciones pasadas como parámetro al\r\n * constructor. Estas opciones están ordenadas de menor a mayor prevalencia, de modo que por ejemplo una opción pasada como parámetro del constructor\r\n * siempre sobreescribirá una opción de la configuración global.\r\n * @class Map\r\n * @memberof SITNA\r\n * @param {HTMLElement|string} div Elemento del DOM en el que crear el mapa o valor de atributo id de dicho elemento.\r\n * @param {MapOptions} [options] Objeto de opciones de configuración del mapa. Sus propiedades sobreescriben las del objeto de configuración global {@link SITNA.Cfg}.\r\n * @see SITNA.Cfg\r\n * @see layout_cfg\r\n * @example <caption>[Ver en vivo](../examples/Map.1.html)</caption> {@lang html}\r\n * <div id=\"mapa\"/>\r\n * <script>\r\n *     // Crear un mapa con las opciones por defecto.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n * </script>\r\n * @example <caption>[Ver en vivo](../examples/Map.2.html)</caption> {@lang html}\r\n * <div id=\"mapa\"/>\r\n * <script>\r\n *     // Crear un mapa en el sistema de referencia WGS 84 con el de mapa de fondo.\r\n *     var map = new SITNA.Map(\"mapa\", {\r\n *         crs: \"EPSG:4326\",\r\n *         initialExtent: [ // Coordenadas en grados decimales, porque el sistema de referencia espacial es WGS 84.\r\n *             -2.84820556640625,\r\n *             41.78912492257675,\r\n *             -0.32135009765625,\r\n *             43.55789822064767\r\n *         ],\r\n *         maxExtent: [\r\n *             -2.84820556640625,\r\n *             41.78912492257675,\r\n *             -0.32135009765625,\r\n *             43.55789822064767\r\n *         ],\r\n *         baselayerExtent: [\r\n *             -2.84820556640625,\r\n *             41.78912492257675,\r\n *             -0.32135009765625,\r\n *             43.55789822064767\r\n *         ],\r\n *         baseLayers: [\r\n *             SITNA.Consts.layer.IDENA_DYNBASEMAP\r\n *         ],\r\n *         defaultBaseLayer: SITNA.Consts.layer.IDENA_DYNBASEMAP,\r\n *         // Establecemos el mapa de situación con una capa compatible con WGS 84\r\n *         controls: {\r\n *             overviewMap: {\r\n *                 layer: SITNA.Consts.layer.IDENA_DYNBASEMAP\r\n *             }\r\n *         }\r\n *     });\r\n * </script>\r\n * @example <caption>[Ver en vivo](../examples/Map.3.html)</caption> {@lang html}\r\n * <div id=\"mapa\"/>\r\n * <script>\r\n *     // Crear un mapa que tenga como contenido las capas de toponimia y mallas cartográficas del WMS de IDENA.\r\n *     var map = new SITNA.Map(\"mapa\", {\r\n *         workLayers: [\r\n *             {\r\n *                 id: \"topo_mallas\",\r\n *                 title: \"Toponimia y mallas cartográficas\",\r\n *                 type: SITNA.Consts.layerType.WMS,\r\n *                 url: \"//idena.navarra.es/ogc/wms\",\r\n *                 layerNames: \"IDENA:TOPONI_Txt_Toponimos,IDENA:mallas\"\r\n *             }\r\n *         ]\r\n *     });\r\n * </script>\r\n */\r\n\r\nSITNA.Map = function (div, options) {\r\n    var map = this;\r\n\r\n    // Por defecto en SITNA todas las búsquedas están habilitadas\r\n    TC.Cfg.controls.search.allowedSearchTypes = TC.Util.extend(TC.Cfg.controls.search.allowedSearchTypes, {\r\n        urban: {},\r\n        street: {},\r\n        number: {},\r\n        cadastral: {}\r\n    });\r\n\r\n    if (options && options.controls && options.controls.search) {\r\n        var keys = Object.keys(options.controls.search);\r\n\r\n        var searchCfg = TC.Util.extend(options.controls.search, { allowedSearchTypes: {} });\r\n\r\n        keys.forEach(function (key) {\r\n            if (typeof (options.controls.search[key]) === \"boolean\" || TC.Util.isPlainObject(options.controls.search[key])) {\r\n                if (options.controls.search[key]) {\r\n\r\n                    switch (true) {\r\n                        case (key === \"postalAddress\"):\r\n                            searchCfg.allowedSearchTypes[TC.Consts.searchType.NUMBER] = TC.Util.isPlainObject(options.controls.search[key]) ? options.controls.search[key] : {};\r\n                            break;\r\n                        case (key === \"cadastralParcel\"):\r\n                            searchCfg.allowedSearchTypes[TC.Consts.searchType.CADASTRAL] = TC.Util.isPlainObject(options.controls.search[key]) ? options.controls.search[key] : {};\r\n                            break;\r\n                        case (key === \"town\"):\r\n                            searchCfg.allowedSearchTypes[TC.Consts.searchType.URBAN] = TC.Util.isPlainObject(options.controls.search[key]) ? options.controls.search[key] : {};\r\n                            break;\r\n                        default:\r\n                            searchCfg.allowedSearchTypes[key] = TC.Util.isPlainObject(options.controls.search[key]) ? options.controls.search[key] : {};\r\n                    }\r\n                }\r\n\r\n                delete searchCfg[key];\r\n            }\r\n        });\r\n\r\n        options.controls.search = searchCfg;\r\n    }\r\n\r\n    var tcMap = new TC.Map(div, options);\r\n    var tcSearch;\r\n    var tcSearchLayer;\r\n\r\n/**\r\n * Añade una capa al mapa. Si se le pasa un objeto del Tipo {@link LayerOptions} como parámetro `layer`\r\n * y tiene definida la propiedad `url`, establece por defecto\r\n * el tipo de capa a {@link SITNA.Consts.layerType.KML} si la URL acaba en _**.kml**_.\r\n * \r\n * El tipo de la capa no puede ser {@link SITNA.Consts.layerType.WFS}.\r\n * @method addLayer\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async\r\n * @param {string|LayerOptions} layer Identificador de capa u objeto de opciones de capa.\r\n * @param {function} [callback] Función a la que se llama tras ser añadida la capa.     \r\n * @example <caption>[Ver en vivo](../examples/Map.addLayer.1.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear un mapa con las opciones por defecto.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     // Cuando esté todo cargado proceder a trabajar con el mapa.\r\n *     map.loaded(function () {\r\n *         // Añadir al mapa la capa de cartografía topográfica de IDENA\r\n *         map.addLayer(SITNA.Consts.layer.IDENA_CARTO);\r\n *     });\r\n * </script>\r\n * @example <caption>[Ver en vivo](../examples/Map.addLayer.2.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear un mapa con las opciones por defecto.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n * \r\n *     // Cuando esté todo cargado proceder a trabajar con el mapa.\r\n *     map.loaded(function () {\r\n *         // Añadir al mapa un documento KML\r\n *         map.addLayer({\r\n *             id: \"capa_kml\",\r\n *             title: \"Museos en Navarra\",\r\n *             type: SITNA.Consts.layerType.KML,\r\n *             url: \"data/MUSEOSNAVARRA.kml\"\r\n *         });\r\n *     });\r\n * </script>\r\n */\r\n    map.addLayer = function (layer, callback) {\r\n        tcMap.addLayer(layer, callback);\r\n    };\r\n\r\n/**\r\n * Hace visible una capa como mapa de fondo. Esta capa debe existir previamente en la lista de mapas de fondo del mapa.\r\n * @method setBaseLayer\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async\r\n * @param {string|LayerOptions} layer Identificador de capa u objeto de opciones de capa. \r\n * @param {function} [callback] Función al que se llama tras ser establecida la capa como mapa de fondo.\r\n * @example <caption>[Ver en vivo](../examples/Map.setBaseLayer.1.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa con opciones por defecto. Esto incluye la capa del catastro de Navarra entre los mapas de fondo.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     // Cuando esté todo cargado establecer como mapa de fondo visible el catastro de Navarra.\r\n *     map.loaded(function () {\r\n *         map.setBaseLayer(SITNA.Consts.layer.IDENA_CADASTER);\r\n *     });\r\n * </script>\r\n * @example <caption>[Ver en vivo](../examples/Map.setBaseLayer.2.html)</caption> {@lang html} \r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa con opciones por defecto.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     // Cuando el mapa esté cargado, añadir la ortofoto de 1956/1957 como mapa de fondo y establecerla como mapa de fondo visible.\r\n *     map.loaded(function () {\r\n *         map.addLayer({\r\n *             id: \"orto_56_57\",\r\n *             title: \"Ortofoto de 1956/1957\",\r\n *             url: \"http://idena.navarra.es/ogc/wms\",\r\n *             layerNames: \"ortofoto_10000_1957\",\r\n *             isBase: true\r\n *         }, function () {\r\n *             map.setBaseLayer(\"orto_56_57\");\r\n *         });\r\n *     });\r\n * </script>\r\n */\r\n    map.setBaseLayer = function (layer, callback) {\r\n        tcMap.setBaseLayer(layer, callback);\r\n    };\r\n\r\n/**\r\n * Añade un marcador (un punto asociado a un icono) al mapa.\r\n * @method addMarker\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @param {array} coords Coordenadas x e y del punto en las unidades del sistema de referencia del mapa.\r\n * @param {MarkerOptions} [options] Objeto de opciones de marcador.\r\n * @example <caption>[Ver en vivo](../examples/Map.addMarker.1.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n * \r\n *     // Cuando esté todo cargado proceder a trabajar con el mapa.\r\n *     map.loaded(function () {\r\n *         // Añadir un marcador.\r\n *         map.addMarker([610749, 4741648]);\r\n *         // Centrar el mapa en el marcador.\r\n *         map.zoomToMarkers();\r\n *     });\r\n * </script> \r\n * @example <caption>[Ver en vivo](../examples/Map.addMarker.2.html)</caption> {@lang html}   \r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     \r\n *     // Cuando esté todo cargado proceder a trabajar con el mapa.\r\n *     map.loaded(function () {\r\n *         // Añadir marcadores al grupo \"Marcadores colgantes\"\r\n *         // cuyo icono se ancle al punto en el centro hacia abajo.\r\n *         // Establecer un icono adecuado.\r\n *         var markerOptions = {\r\n *             group: \"Marcadores colgantes\",\r\n *             url: \"data/colgante.png\",\r\n *             anchor: [0.5, 0]\r\n *         };\r\n *         map.addMarker([610887, 4741244], markerOptions);\r\n *         map.addMarker([615364, 4657556], markerOptions);\r\n *         // Centrar el mapa en los marcadores.\r\n *         map.zoomToMarkers();\r\n *     });\r\n * </script> \r\n * @example <caption>[Ver en vivo](../examples/Map.addMarker.3.html)</caption> {@lang html}\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear un mapa con una capa vectorial, centrado en la Ciudadela de Pamplona.\r\n *     var map = new SITNA.Map(\"mapa\", {\r\n *         initialExtent: [\r\n *             609627,\r\n *             4740225,\r\n *             611191,\r\n *             4741395\r\n *         ],\r\n *         workLayers: [{\r\n *             id: \"markers\",\r\n *             title: \"Marcadores geográficos\",\r\n *             type: SITNA.Consts.layerType.VECTOR\r\n *         }]\r\n *     });\r\n *     // Cuando esté todo cargado proceder a trabajar con el mapa.\r\n *     map.loaded(function () {\r\n *         // Añadir un marcador en la capa \"markers\",\r\n *         // asignarle un grupo para que salga en tabla de contenidos y leyenda.\r\n *         map.addMarker([610431, 4740837], {\r\n *             layer: \"markers\",\r\n *             group: \"Ciudadela\"\r\n *         });\r\n *     });\r\n * </script>\r\n * @example <caption>[Ver en vivo](../examples/Map.addMarker.4.html)</caption> {@lang html}  \r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Añadir información emergente al mapa.\r\n *     SITNA.Cfg.controls.popup = true;\r\n *     \r\n *     // Crear un mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     // Cuando esté todo cargado proceder a trabajar con el mapa.\r\n *     map.loaded(function () {\r\n *         // Añadir un marcador con un icono de 40x40 píxeles definido por la clase CSS kiosko.\r\n *         // Asignarle unos datos asociados que se muestren por defecto.\r\n *         map.addMarker([615366, 4657426], {\r\n *             cssClass: \"kiosko\",\r\n *             width: 40,\r\n *             height: 40,\r\n *             data: {\r\n *                 \"Nombre\": \"Plaza de la Constitución, Tudela\",\r\n *                 \"Sitio web\": \"http://www.tudela.es/\"\r\n *             },\r\n *             showPopup: true\r\n *         });\r\n *         // Centrar el mapa en el marcador.\r\n *         map.zoomToMarkers();\r\n *     });\r\n * </script> \r\n */\r\n    map.addMarker = function (coords, options) {\r\n        tcMap.addMarker(coords, options);\r\n    };\r\n\r\n/**\r\n * Centra y escala el mapa a la extensión que ocupan todos sus marcadores.\r\n * @method zoomToMarkers\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @param {object} [options] Objeto de opciones de zoom.\r\n * @param {number} [options.pointBoundsRadius=30] Radio en metros del área alrededor del marcador que se respetará al hacer zoom. Por defecto es 30.\r\n * @param {number} [options.extentMargin=0.2] Tamaño del margen que se aplicará a la extensión total de todas los marcadores.\r\n * El valor es la relación de crecimiento en ancho y alto entre la extensión resultante y la original. Por ejemplo, el valor por defecto 0,2 indica un crecimiento del 20% de la extensión, 10% por cada lado.\r\n * @example <caption>[Ver en vivo](../examples/Map.zoomToMarkers.html)</caption> {@lang html}  \r\n * <div class=\"controls\">\r\n *     <div><button id=\"addMarkerBtn\">Añadir marcador aleatorio</button></div>\r\n *     <div><input type=\"number\" step=\"1\" id=\"pbrVal\" value=\"30\" /> <label for=\"pbrVal\">pointBoundsRadius</label></div>\r\n *     <div><input type=\"number\" step=\"0.1\" id=\"emVal\" value=\"0.2\" /> <label for=\"emVal\">extentMargin</label></div>\r\n *     <div><button id=\"zoomBtn\">Hacer zoom a los marcadores</button></div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *       \r\n *     // Añadir un marcador en un punto aleatorio\r\n *     var addRandomMarker = function () {\r\n *         var xmin = SITNA.Cfg.initialExtent[0];\r\n *         var ymin = SITNA.Cfg.initialExtent[1];\r\n *         var width = SITNA.Cfg.initialExtent[2] - SITNA.Cfg.initialExtent[0];\r\n *         var height = SITNA.Cfg.initialExtent[3] - SITNA.Cfg.initialExtent[1];\r\n *         map.addMarker([xmin + Math.random() width, ymin + Math.random() height]);\r\n *     };\r\n * \r\n *     // Hacer zoom a los marcadores con las opciones elegidas\r\n *     var zoomToMarkers = function () {\r\n *         map.zoomToMarkers({\r\n *             pointBoundsRadius: parseInt(document.getElementById(\"pbrVal\").value),\r\n *             extentMargin: parseFloat(document.getElementById(\"emVal\").value)\r\n *         });\r\n *     };\r\n *     \r\n *     document.getElementById(\"addMarkerBtn\").addEventListener(\"click\", addRandomMarker);\r\n *     document.getElementById(\"zoomBtn\").addEventListener(\"click\", zoomToMarkers);\r\n * </script> \r\n */\r\n    map.zoomToMarkers = function (options) {\r\n        tcMap.zoomToMarkers(options);\r\n    };\r\n\r\n/**\r\n * Añade una función de callback que se ejecutará cuando el mapa, sus controles y todas sus capas se hayan cargado.\r\n * @method loaded\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async\r\n * @param {function} callback Función a la que se llama tras la carga del mapa.\r\n * @example {@lang javascript}\r\n * // Notificar cuando se haya cargado el mapa.\r\n * map.loaded(function () { \r\n *     console.log(\"Código del mapa y de sus controles cargado, cargando datos...\");\r\n * });\r\n */\r\n    map.loaded = function (callback) {\r\n        tcMap.loaded(callback);\r\n    };\r\n\r\n    // Si existe el control featureInfo lo activamos.\r\n    tcMap.loaded(function () {\r\n\r\n        TC.loadJS(\r\n            !TC.control.Search,\r\n            TC.apiLocation + 'TC/control/Search',\r\n            function () {\r\n                tcSearch = new TC.control.Search();\r\n                tcSearch.register(tcMap);\r\n\r\n                tcSearch.getLayer().then(function (layer) {\r\n                    tcSearchLayer = layer;\r\n                });\r\n            }\r\n        );\r\n\r\n        if (!tcMap.activeControl) {\r\n            var fi = tcMap.getControlsByClass('TC.control.FeatureInfo')[0];\r\n            if (fi) {\r\n                fi.activate();\r\n            }\r\n        }\r\n    });\r\n/**\r\n * Objeto proporcionado en las respuestas a peticiones de datos de búsqueda ({@link SITNA.Map#getMunicipalities}, etc.).\r\n * @typedef SITNA.Map~SearchResultItem\r\n * @see SITNA.Map#getCommonwealths\r\n * @see SITNA.Map#getCouncils\r\n * @see SITNA.Map#getMunicipalities\r\n * @see SITNA.Map#getUrbanAreas\r\n * @property {string} id - Identificador del elemento a buscar.\r\n * @property {string} label - Texto descriptivo del elemento a buscar que se mostrará en la lista de sugerencias de resultados de búsqueda.\r\n */\r\n\r\n/**\r\n * Función de callback que gestiona las respuestas a peticiones de datos de búsqueda ({@link SITNA.Map#getMunicipalities}, etc.).\r\n * @callback SITNA.Map~SearchDataCallback\r\n * @param {SITNA.Map~SearchResultItem[]} data - Lista de elementos de búsqueda. Cada elemento tiene un identificador y un texto descriptivo.\r\n */\r\n\r\n/**\r\n * Función de callback que gestiona las respuestas a búsquedas por identfificador ({@link SITNA.Map#searchMunicipality}, etc.).\r\n * @callback SITNA.Map~SearchByIdCallback\r\n * @param {string} queryId - Identificador de consulta realizada. Su valor es `undefined` si no hay resultado.\r\n */\r\n\r\n    /*\r\n      Obtiene los valores ({@link SITNA.Map~SearchResultItem}) de las entidades geográficas disponibles en la capa de IDENA que corresponda según el parámetro searchType. \r\n      Puede consultar también online el [ejemplo 1](../examples/Map.getQueryableData.html). \r\n    \r\n     method getQueryableData\r\n     async\r\n     param {string|SITNA.consts.MapSearchType} searchType Fuente de datos del cual obtendremos los valores disponibles para buscar posteriormente.\r\n     param {function} [callback] Función a la que se llama tras obtener los datos.  \r\n     example\r\n        <div class=\"instructions divSelect\">\r\n            <div>\r\n                Municipios\r\n                <select id=\"municipality\" onchange=\"applyFilter(this)\">\r\n                    <option value=\"-1\">Seleccione...</option>\r\n                </select>\r\n                <br />\r\n                <br />\r\n                Concejos\r\n                <select id=\"council\" onchange=\"applyFilter(this)\">\r\n                    <option value=\"-1\">Seleccione...</option>\r\n                </select>\r\n                <br />\r\n                <br />\r\n                Casco Urbano\r\n                <select id=\"urban\" onchange=\"applyFilter(this)\">\r\n                    <option value=\"-1\">Seleccione...</option>\r\n                </select>\r\n                <br />\r\n                <br />\r\n                Manconmunidad\r\n                <select id=\"commonwealth\" onchange=\"applyFilter(this)\">\r\n                    <option value=\"-1\">Seleccione...</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div id=\"mapa\"></div>\r\n        <script>\r\n        // Crear mapa.\r\n        var map = new SITNA.Map(\"mapa\");\r\n\r\n        map.loaded(function () {\r\n            // completamos el desplegable de municipios\r\n            map.getQueryableData(SITNA.Consts.mapSearchType.MUNICIPALITY, function (data) {\r\n                var fragment = document.createDocumentFragment();\r\n                data.forEach(function (value) {\r\n                    var option = document.createElement(\"option\");\r\n                    option.setAttribute(\"value\", value.id);\r\n                    option.textContent = value.label;\r\n                    fragment.appendChild(option);\r\n                });\r\n                document.querySelector(\"#municipality\").appendChild(fragment);\r\n            });\r\n\r\n            // completamos el desplegable de concejos\r\n            map.getQueryableData(SITNA.Consts.mapSearchType.COUNCIL, function (data) {\r\n                var fragment = document.createDocumentFragment();\r\n                data.forEach(function (value) {\r\n                    var option = document.createElement(\"option\");\r\n                    option.setAttribute(\"value\", value.id);\r\n                    option.textContent = value.label;\r\n                    fragment.appendChild(option);\r\n                });\r\n                document.querySelector(\"#council\").appendChild(fragment);\r\n            });\r\n\r\n            // completamos el desplegable de cascos urbanos\r\n            map.getQueryableData(SITNA.Consts.mapSearchType.URBAN, function (data) {\r\n                var fragment = document.createDocumentFragment();\r\n                data.forEach(function (value) {\r\n                    var option = document.createElement(\"option\");\r\n                    option.setAttribute(\"value\", value.id);\r\n                    option.textContent = value.label;\r\n                    fragment.appendChild(option);\r\n                });\r\n                document.querySelector(\"#urban\").appendChild(fragment);\r\n            });\r\n\r\n            // completamos el desplegable de mancomunidades de residuos\r\n            map.getQueryableData(SITNA.Consts.mapSearchType.COMMONWEALTH, function (data) {\r\n                var fragment = document.createDocumentFragment();\r\n                data.forEach(function (value) {\r\n                    var option = document.createElement(\"option\");\r\n                    option.setAttribute(\"value\", value.id);\r\n                    option.textContent = value.label;\r\n                    fragment.appendChild(option);\r\n                });\r\n                document.querySelector(\"#commonwealth\").appendChild(fragment);\r\n            });\r\n        });\r\n\r\n        // Establecer como filtro del mapa el valor seleccionado del desplegable que lance el evento change\r\n        function applyFilter(target) {\r\n            if (target) {\r\n                var municipalitySelect = document.querySelector(\"#municipality\");\r\n                var councilSelect = document.querySelector(\"#council\");\r\n                var urbanSelect = document.querySelector(\"#urban\");\r\n                var commonwealthSelect = document.querySelector(\"#commonwealth\");\r\n                var id = target.querySelector('option:checked').value;\r\n                var searchType;\r\n                switch (true) {\r\n                    case target.id == SITNA.Consts.mapSearchType.MUNICIPALITY:\r\n                        searchType = SITNA.Consts.mapSearchType.MUNICIPALITY;\r\n\r\n                        councilSelect.value = -1;\r\n                        urbanSelect.value = -1;\r\n                        commonwealthSelect.value = -1;\r\n                        break;\r\n                    case target.id == SITNA.Consts.mapSearchType.COUNCIL:\r\n                        searchType = SITNA.Consts.mapSearchType.COUNCIL;\r\n\r\n                        municipalitySelect.value = -1;\r\n                        urbanSelect.value = -1;\r\n                        commonwealthSelect.value = -1;\r\n                        break;\r\n                    case target.id == SITNA.Consts.mapSearchType.URBAN:\r\n                        searchType = SITNA.Consts.mapSearchType.URBAN;\r\n\r\n                        municipalitySelect.value = -1;\r\n                        councilSelect.value = -1;\r\n                        commonwealthSelect.value = -1;\r\n                        break;\r\n                    case target.id == SITNA.Consts.mapSearchType.COMMONWEALTH:\r\n                        searchType = SITNA.Consts.mapSearchType.COMMONWEALTH;\r\n\r\n                        municipalitySelect.value = -1;\r\n                        councilSelect.value = -1;\r\n                        urbanSelect.value = -1;\r\n                        break;\r\n                }\r\n\r\n                if (id == -1)\r\n                    map.removeSearch();\r\n                else {\r\n                    map.searchTyped(searchType, id, function (idQuery) {\r\n                        if (idQuery == null) {\r\n                            alert('No se han encontrado resultados');\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        </script>\r\n    */\r\n    map.getQueryableData = function (searchType, callback) {\r\n        var queryable = tcSearch.availableSearchTypes[searchType];\r\n\r\n        if (queryable.queryableData) {\r\n            if (callback)\r\n                callback(queryable.queryableData);\r\n        } else {\r\n            var params = {\r\n                request: 'GetFeature',\r\n                service: 'WFS',\r\n                typename: queryable.featurePrefix + ':' + queryable.featureType,\r\n                version: queryable.version,\r\n                propertyname: (!(queryable.dataIdProperty instanceof Array) ? [queryable.dataIdProperty] : queryable.dataIdProperty)\r\n                    .concat((!(queryable.outputProperties instanceof Array) ? [queryable.outputProperties] : queryable.outputProperties)).join(','),\r\n                outputformat: TC.Consts.format.JSON\r\n            };\r\n\r\n            var url = queryable.url + '?' + TC.Util.getParamString(params);\r\n            TC.ajax({\r\n                url: url,\r\n                responseType: TC.Consts.mimeType.JSON\r\n            }).then(function (response) {\r\n                const responseData = response.data;\r\n                queryable.queryableData = [];\r\n\r\n                if (responseData.features) {\r\n                    var features = responseData.features;\r\n\r\n                    for (var i = 0; i < features.length; i++) {\r\n                        var f = features[i];\r\n                        var data = {};\r\n\r\n                        data.id = [];\r\n                        if (!(queryable.dataIdProperty instanceof Array))\r\n                            queryable.dataIdProperty = [queryable.dataIdProperty];\r\n\r\n                        for (var ip = 0; ip < queryable.dataIdProperty.length; ip++) {\r\n                            if (f.properties.hasOwnProperty(queryable.dataIdProperty[ip])) {\r\n                                data.id.push(f.properties[queryable.dataIdProperty[ip]]);\r\n                            }\r\n                        }\r\n\r\n                        data.id = queryable.idPropertiesIdentifier ? data.id.join(queryable.idPropertiesIdentifier) : data.id.join('');\r\n\r\n                        data.label = [];\r\n                        if (!(queryable.outputProperties instanceof Array))\r\n                            queryable.outputProperties = [queryable.outputProperties];\r\n\r\n                        for (var lbl = 0; lbl < queryable.outputProperties.length; lbl++) {\r\n                            if (f.properties.hasOwnProperty(queryable.outputProperties[lbl])) {\r\n                                data.label.push(f.properties[queryable.outputProperties[lbl]]);\r\n                            }\r\n                        }\r\n\r\n                        var add = (data.label instanceof Array && data.label.join('').trim().length > 0) || (!(data.label instanceof Array) && data.label.trim().length > 0);\r\n                        data.label = queryable.outputFormatLabel ? queryable.outputFormatLabel.tcFormat(data.label) : data.label.join('-');\r\n\r\n                        if (add)\r\n                            queryable.queryableData.push(data);\r\n                    }\r\n                }\r\n\r\n                queryable.queryableData = queryable.queryableData.sort(function (a, b) {\r\n                    if (queryable.idPropertiesIdentifier ? a.id.indexOf(queryable.idPropertiesIdentifier) == -1 : false) {\r\n                        if (tcSearch.removePunctuation(a.label) < tcSearch.removePunctuation(b.label))\r\n                            return -1;\r\n                        else if (tcSearch.removePunctuation(a.label) > tcSearch.removePunctuation(b.label))\r\n                            return 1;\r\n                        else\r\n                            return 0;\r\n                    } else {\r\n                        if (tcSearch.removePunctuation(a.label.split(' ')[0]) < tcSearch.removePunctuation(b.label.split(' ')[0]))\r\n                            return -1;\r\n                        else if (tcSearch.removePunctuation(a.label.split(' ')[0]) > tcSearch.removePunctuation(b.label.split(' ')[0]))\r\n                            return 1;\r\n                        else\r\n                            return 0;\r\n                    }\r\n                });\r\n                queryable.queryableData = queryable.queryableData.filter(function (value, index, arr) {\r\n                    if (index < 1)\r\n                        return true;\r\n                    else\r\n                        return value.id !== arr[index - 1].id && value.label !== arr[index - 1].label;\r\n                });\r\n\r\n                if (callback)\r\n                    callback(queryable.queryableData);\r\n            });\r\n        }\r\n    };\r\n/**\r\n * Obtiene los valores ({@link SITNA.Map~SearchResultItem}) de los municipios disponibles en la capa de IDENA.\r\n * @method getMunicipalities\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async  \r\n * @param {SITNA.Map~SearchDataCallback} callback - Función a la que se llama tras obtener los datos.\r\n * @example <caption>[Ver en vivo](../examples/Map.getMunicipalities.html)</caption> {@lang html} \r\n * <div class=\"instructions divSelect\">\r\n *     <div>\r\n *         Municipios\r\n *         <select id=\"municipality\" onchange=\"applyFilter()\">\r\n *             <option value=\"-1\">Seleccione...</option>\r\n *         </select>\r\n *     </div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n * \r\n *     map.loaded(function () {\r\n *         // completamos el desplegable\r\n *         map.getMunicipalities(function (data) {\r\n *             var fragment = document.createDocumentFragment();\r\n *             data.forEach(function (value) {\r\n *                 var option = document.createElement(\"option\");\r\n *                 option.setAttribute(\"value\", value.id);\r\n *                 option.textContent = value.label;\r\n *                 fragment.appendChild(option);\r\n *             });\r\n *             document.querySelector(\"#municipality\").appendChild(fragment);\r\n *         });\r\n *     });\r\n *\r\n *     // Establecer como filtro del mapa el valor seleccionado del desplegable que lance el evento change\r\n *     function applyFilter() {\r\n *         var id = document.querySelector(\"#council\").querySelector(\"option:checked\").value;\r\n *         if (id == -1)\r\n *             map.removeSearch();\r\n *         else {\r\n *             map.searchMunicipality(id, function (idQuery) {\r\n *                 if (idQuery == null) {\r\n *                     alert(\"No se han encontrado resultados\");\r\n *                 }\r\n *             });\r\n *         }\r\n *     };\r\n * </script> \r\n */\r\n    map.getMunicipalities = function (callback) {\r\n        map.getQueryableData(SITNA.Consts.mapSearchType.MUNICIPALITY, callback);\r\n    };\r\n/**\r\n * Obtiene los valores ({@link SITNA.Map~SearchResultItem}) de los cascos urbanos disponibles en la capa de IDENA.\r\n * @method getUrbanAreas\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async  \r\n * @param {SITNA.Map~SearchDataCallback} callback - Función a la que se llama tras obtener los datos.  \r\n * @example <caption>[Ver en vivo](../examples/Map.getUrbanAreas.html)</caption> {@lang html} \r\n * <div class=\"instructions divSelect\">\r\n *     <div>\r\n *         Cascos urbanos\r\n *         <select id=\"urban\" onchange=\"applyFilter()\">\r\n *             <option value=\"-1\">Seleccione...</option>\r\n *         </select>\r\n *     </div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     \r\n *     map.loaded(function () {\r\n *         // completamos el desplegable\r\n *         map.getUrbanAreas(function (data) {\r\n *             var fragment = document.createDocumentFragment();\r\n *             data.forEach(function (value) {\r\n *                 var option = document.createElement(\"option\");\r\n *                 option.setAttribute(\"value\", value.id);\r\n *                 option.textContent = value.label;\r\n *                 fragment.appendChild(option);\r\n *             });\r\n *             document.querySelector(\"#urban\").appendChild(fragment);\r\n *         });\r\n *     });\r\n *\r\n *     // Establecer como filtro del mapa el valor seleccionado del desplegable que lance el evento change\r\n *     function applyFilter() {\r\n *         var id = document.querySelector(\"#urban\").querySelector(\"option:checked\").value;\r\n *         if (id == -1)\r\n *             map.removeSearch();\r\n *         else {\r\n *             map.searchUrbanArea(id, function (idQuery) {\r\n *                 if (idQuery == null) {\r\n *                     alert('No se han encontrado resultados');\r\n *                 }\r\n *             });\r\n *         }\r\n *     };\r\n * </script>\r\n */\r\n    map.getUrbanAreas = function (callback) {\r\n        map.getQueryableData(SITNA.Consts.mapSearchType.URBAN, callback);\r\n    };\r\n/**\r\n * Obtiene los valores ({@link SITNA.Map~SearchResultItem}) de las mancomunidades de residuos disponibles en la capa de IDENA. \r\n * @method getCommonwealths\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async  \r\n * @param {SITNA.Map~SearchDataCallback} callback - Función a la que se llama tras obtener los datos.  \r\n * @example <caption>[Ver en vivo](../examples/Map.getCommonwealths.html)</caption> {@lang html} \r\n * <div class=\"instructions divSelect\">\r\n *     <div>\r\n *         Mancomunidades de residuos\r\n *         <select id=\"commonwealths\" onchange=\"applyFilter()\">\r\n *             <option value=\"-1\">Seleccione...</option>\r\n *         </select>\r\n *     </div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     \r\n *     map.loaded(function () {\r\n *         // completamos el desplegable\r\n *         map.getCommonwealths(function (data) {\r\n *             var fragment = document.createDocumentFragment();\r\n *             data.forEach(function (value) {\r\n *                 var option = document.createElement(\"option\");\r\n *                 option.setAttribute(\"value\", value.id);\r\n *                 option.textContent = value.label;\r\n *                 fragment.appendChild(option);\r\n *             });\r\n *             document.querySelector(\"#commonwealths\").appendChild(fragment);\r\n *         });\r\n *     });\r\n *         \r\n *     // Establecer como filtro del mapa el valor seleccionado del desplegable que lance el evento change\r\n *     function applyFilter() {\r\n *         var id = document.querySelector(\"#commonwealths\").querySelector(\"option:checked\").value;\r\n *         if (id == -1)\r\n *             map.removeSearch();\r\n *         else {\r\n *             map.searchCommonwealth(id, function (idQuery) {\r\n *                 if (idQuery == null) {\r\n *                     alert(\"No se han encontrado resultados\");\r\n *                 }\r\n *             });\r\n *         }\r\n *     };\r\n * </script>     \r\n */\r\n    map.getCommonwealths = function (callback) {\r\n        map.getQueryableData(SITNA.Consts.mapSearchType.COMMONWEALTH, callback);\r\n    };\r\n/**\r\n * Obtiene los valores ({@link SITNA.Map~SearchResultItem}) de los concejos disponibles en la capa de IDENA. \r\n * @method getCouncils\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async  \r\n * @param {SITNA.Map~SearchDataCallback} callback - Función a la que se llama tras obtener los datos.  \r\n * @example <caption>[Ver en vivo](../examples/Map.getCouncils.html)</caption> {@lang html} \r\n * <div class=\"instructions divSelect\">\r\n *     <div>\r\n *         Concejos\r\n *         <select id=\"council\" onchange=\"applyFilter()\">\r\n *             <option value=\"-1\">Seleccione...</option>\r\n *         </select>\r\n *     </div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     \r\n *     map.loaded(function () {\r\n *         // completamos el desplegable\r\n *         map.getCouncils(function (data) {\r\n *             var fragment = document.createDocumentFragment();\r\n *             data.forEach(function (value) {\r\n *                 var option = document.createElement(\"option\");\r\n *                 option.setAttribute(\"value\", value.id);\r\n *                 option.textContent = value.label;\r\n *                 fragment.appendChild(option);\r\n *             });\r\n *             document.querySelector(\"#council\").appendChild(fragment);\r\n *         });\r\n *     });\r\n *     \r\n *     // Establecer como filtro del mapa el valor seleccionado del desplegable que lance el evento change\r\n *     function applyFilter() {\r\n *         var id = document.querySelector(\"#council\").querySelector(\"option:checked\").value;\r\n *         if (id == -1)\r\n *             map.removeSearch();\r\n *         else {\r\n *             map.searchCouncil(id, function (idQuery) {\r\n *                 if (idQuery == null) {\r\n *                     alert(\"No se han encontrado resultados\");\r\n *                 }\r\n *             });\r\n *         }\r\n *     };\r\n * </script>\r\n */\r\n    map.getCouncils = function (callback) {\r\n        map.getQueryableData(SITNA.Consts.mapSearchType.COUNCIL, callback);\r\n    };\r\n/**\r\n * Busca la mancomunidad de residuos y pinta en el mapa la entidad geográfica encontrada que corresponda al identificador indicado.\r\n * @method searchCommonwealth\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async\r\n * @param {string} id Identificador de la entidad geográfica a pintar.\r\n * @param {SITNA.Map~SearchByIdCallback} [callback] Función a la que se llama tras aplicar el filtro.  \r\n * @example <caption>[Ver en vivo](../examples/Map.searchCommonwealth.html)</caption> {@lang html} \r\n * <div class=\"instructions searchCommonwealth\">    \r\n *     <div><button id=\"searchPamplonaBtn\">Buscar Mancomunidad de la Comarca de Pamplona</button></div>    \r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     map.loaded(function () {\r\n *         document.getElementById(\"searchPamplonaBtn\").addEventListener(\"click\", search);\r\n *     });\r\n *           \r\n *     var search = function () {\r\n *         map.removeSearch();\r\n *         map.searchCommonwealth(\"8\", function (idQuery) {\r\n *             if (idQuery == null) {\r\n *                 alert(\"No se ha encontrado la mancomunidad con código 8.\");\r\n *             }\r\n *         });\r\n *     };\r\n * </script>\r\n */\r\n    map.searchCommonwealth = function (id, callback) {\r\n        map.searchTyped(SITNA.Consts.mapSearchType.COMMONWEALTH, id, callback);\r\n    };\r\n/**\r\n * Busca el concejo que corresponda con el identificador pasado como parámetro y pinta la entidad geográfica encontrada en el mapa.\r\n * @method searchCouncil\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async    \r\n * @param {string} id - Identificador de la entidad geográfica a pintar.\r\n * @param {SITNA.Map~SearchByIdCallback} [callback] - Función a la que se llama tras aplicar el filtro.  \r\n * @example <caption>[Ver en vivo](../examples/Map.searchCouncil.html)</caption> {@lang html} \r\n * <div class=\"instructions search\">    \r\n *     <div><button id=\"searchBtn\">Buscar concejo Esquíroz (Galar)</button></div>    \r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     map.loaded(function () {\r\n *         document.getElementById(\"searchBtn\").addEventListener(\"click\", search);\r\n *     });\r\n *     \r\n *     var search = function () {\r\n *         map.removeSearch();\r\n *         map.searchCouncil(\"109#5\", function (idQuery) {\r\n *             if (idQuery == null) {\r\n *                 alert(\"No se ha encontrado el concejo con código 109#5.\");\r\n *             }\r\n *         });\r\n *     };    \r\n * </script>    \r\n */\r\n    map.searchCouncil = function (id, callback) {\r\n        map.searchTyped(SITNA.Consts.mapSearchType.COUNCIL, id, callback);\r\n    };\r\n/**\r\n * Busca el casco urbano que corresponda con el identificador pasado como parámetro y pinta la entidad geográfica encontrada en el mapa.\r\n * @method searchUrbanArea\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async    \r\n * @param {string} id Identificador de la entidad geográfica a pintar.\r\n * @param {SITNA.Map~SearchByIdCallback} [callback] Función a la que se llama tras aplicar el filtro.  \r\n * @example <caption>[Ver en vivo](../examples/Map.searchUrbanArea.html)</caption> {@lang html} \r\n * <div class=\"instructions search\">\r\n *     <div><button id=\"searchBtn\">Buscar casco urbano de Arbizu</button></div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     map.loaded(function () {\r\n *         document.getElementById(\"searchBtn\").addEventListener(\"click\", search);\r\n *     });\r\n *     var search = function () {\r\n *         map.removeSearch();\r\n *         map.searchUrbanArea(\"27\", function (idQuery) {\r\n *             if (idQuery == null) {\r\n *                 alert(\"No se ha encontrado el casco urbano con código 27.\");\r\n *             }\r\n *         });\r\n *     };\r\n * </script>\r\n */\r\n    map.searchUrbanArea = function (id, callback) {\r\n        map.searchTyped(SITNA.Consts.mapSearchType.URBAN, id, callback);\r\n    };\r\n/**\r\n * Busca el municipio que corresponda con el identificador pasado como parámetro y pinta la entidad geográfica encontrada en el mapa.\r\n * @method searchMunicipality\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async    \r\n * @param {string} id Identificador de la entidad geográfica a pintar.\r\n * @param {SITNA.Map~SearchByIdCallback} [callback] Función a la que se llama tras aplicar el filtro.  \r\n * @example <caption>[Ver en vivo](../examples/Map.searchMunicipality.html)</caption> {@lang html} \r\n * <div class=\"instructions search\">\r\n *     <div><button id=\"searchBtn\">Buscar Arbizu</button></div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *     map.loaded(function () {\r\n *         document.getElementById(\"searchBtn\").addEventListener(\"click\", search);\r\n *     });\r\n *          \r\n *     var search = function () {\r\n *         map.removeSearch();\r\n *         map.searchMunicipality(\"27\", function (idQuery) {\r\n *             if (idQuery == null) {\r\n *                 alert(\"No se ha encontrado el municipio con código 27.\");\r\n *             }\r\n *         });\r\n *     };\r\n * </script>\r\n */\r\n    map.searchMunicipality = function (id, callback) {\r\n        map.searchTyped(SITNA.Consts.mapSearchType.MUNICIPALITY, id, callback);\r\n    };\r\n\r\n    // Busca en la configuración que corresponda según el parámetro searchType el identificador pasado como parámetro\r\n    map.searchTyped = function (searchType, id, callback) {\r\n        var idQuery = TC.getUID();\r\n        var query = tcSearch.availableSearchTypes[searchType];\r\n\r\n        if (id instanceof Array && query.goToIdFormat)\r\n            id = query.goToIdFormat.tcFormat(id);\r\n\r\n        tcSearch._search.data = tcSearch._search.data || [];\r\n        tcSearch._search.data.push({\r\n            dataLayer: query.featureType,\r\n            dataRole: searchType,\r\n            id: id,\r\n            label: \"\",\r\n            text: \"\"\r\n        });\r\n\r\n        map.removeSearch();\r\n\r\n        if (tcSearch.availableSearchTypes[searchType] && !tcSearch.getSearchTypeByRole(searchType)) {\r\n\r\n            if (!tcSearch.availableSearchTypes[searchType].goTo) {\r\n                tcSearch.availableSearchTypes[searchType].goTo = function (id) {\r\n                    var getProperties = function (id) {\r\n\r\n                        if (!TC.filter) {\r\n                            TC.syncLoadJS(TC.apiLocation + 'TC/Filter');\r\n                        }\r\n\r\n                        var filter = [];\r\n                        if (query.idPropertiesIdentifier) id = id.split(query.idPropertiesIdentifier);\r\n                        if (!(id instanceof Array)) id = [id];\r\n                        for (var i = 0; i < query.dataIdProperty.length; i++) {\r\n                            filter.push(\r\n                                new TC.filter.equalTo(query.dataIdProperty[i], id[i].trim())\r\n                            );\r\n                        }\r\n\r\n                        if (filter.length > 1) {\r\n                            filter = new TC.filter.and(filter);\r\n                        } else {\r\n                            filter = filter[0];\r\n                        }\r\n\r\n                        return filter;\r\n                    };\r\n                    var properties = getProperties(id);\r\n\r\n                    return {\r\n                        params: {\r\n                            type: TC.Consts.layerType.WFS,\r\n                            url: this.url,\r\n                            version: this.version,\r\n                            geometryName: this.geometryName,\r\n                            featurePrefix: this.featurePrefix,\r\n                            featureType: this.featureType,\r\n                            properties: properties,\r\n                            outputFormat: this.outputFormat,\r\n                            styles: this.styles\r\n                        }\r\n                    };\r\n                }.bind(query);\r\n            }\r\n\r\n            tcSearch.addAllowedSearchType(searchType, tcSearch.availableSearchTypes[searchType], tcSearch);\r\n        }\r\n\r\n        tcMap.one(TC.Consts.event.SEARCHQUERYEMPTY, function (e) {\r\n            tcMap.toast(tcSearch.EMPTY_RESULTS_LABEL, {\r\n                type: TC.Consts.msgType.INFO, duration: 5000\r\n            });\r\n\r\n            if (callback)\r\n                callback(null);\r\n        });\r\n\r\n        tcMap.one(TC.Consts.event.FEATURESADD, function (e) {\r\n            if (e.layer == tcSearchLayer && e.layer.features && e.layer.features.length > 0)\r\n                tcMap.zoomToFeatures(e.layer.features);\r\n\r\n            map.search = {\r\n                layer: e.layer, type: searchType\r\n            };\r\n\r\n            if (callback)\r\n                callback(e.layer.id !== idQuery ? e.layer.id : idQuery);\r\n        });\r\n\r\n        tcSearch.goToResult(id, searchType);\r\n    };\r\n/**\r\n * Busca y pinta en el mapa la entidad geográfica encontrada correspondiente al identificador establecido.\r\n * @method searchFeature\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async\r\n * @param {string} layer - Nombre de la capa de IDENA en la cual buscar.\r\n * @param {string} field - Campo de la capa de IDENA en el cual buscar.\r\n * @param {string} id - Identificador de la entidad geográfica por el cual filtrar.\r\n * @param {IDENA.Map~SearchByIdCallback} [callback] - Función a la que se llama tras aplicar el filtro.  \r\n * @example <caption>[Ver en vivo](../examples/Map.searchFeature.html)</caption> {@lang html} \r\n * <div class=\"instructions query\">\r\n *     <div><label>Capa</label><input type=\"text\" id=\"capa\" placeholder=\"Nombre capa de IDENA\" /> </div>\r\n *     <div><label>Campo</label><input type=\"text\" id=\"campo\" placeholder=\"Nombre campo\" /> </div>\r\n *     <div><label>Valor</label><input type=\"text\" id=\"valor\" placeholder=\"Valor a encontrar\" /> </div>\r\n *     <div><button id=\"searchBtn\">Buscar</button></div>\r\n *     <div><button id=\"removeBtn\">Eliminar filtro</button></div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n * \r\n *     map.loaded(function () {\r\n *         document.getElementById(\"searchBtn\").addEventListener(\"click\", search);\r\n *         document.getElementById(\"removeBtn\").addEventListener(\"click\", remove);\r\n *     });\r\n *     \r\n *     var search = function () {\r\n *         var capa = document.getElementById(\"capa\").value;\r\n *         capa = capa.trim();\r\n *         \r\n *         var campo = document.getElementById(\"campo\").value;\r\n *         campo = campo.trim();\r\n *         \r\n *         var valor = document.getElementById(\"valor\").value;\r\n *         valor = valor.trim();\r\n *         \r\n *         map.searchFeature(capa, campo, valor, function (idQuery) {\r\n *             if (idQuery == null) {\r\n *                 alert(\"No se han encontrado resultados en la capa: \" + capa + \" en el campo: \" + campo + \" el valor: \" + valor + \".\");\r\n *             }\r\n *         });\r\n *     };\r\n *     \r\n *     // Limpiar el mapa \r\n *     var remove = function () {\r\n *         map.removeSearch();\r\n *     };\r\n * </script>\r\n */\r\n    map.searchFeature = function (layer, field, id, callback) {\r\n        var idQuery = TC.getUID();\r\n        var prefix = tcSearch.featurePrefix;\r\n\r\n        map.removeSearch();\r\n\r\n        layer = (layer || '').trim(); field = (field || '').trim(); id = (id || '').trim();\r\n        if (layer.length == 0 || field.length == 0 || id.length == 0) {\r\n            tcMap.toast(tcSearch.EMPTY_RESULTS_LABEL, {\r\n                type: TC.Consts.msgType.INFO, duration: 5000\r\n            });\r\n\r\n            if (callback)\r\n                callback(null);\r\n        } else {\r\n\r\n            if (layer.indexOf(':') > -1) {\r\n                prefix = layer.split(':')[0];\r\n                layer = layer.split(':')[1];\r\n            }\r\n\r\n            var transformFilter = function (properties) {\r\n                var self = this;\r\n\r\n                if (!TC.filter) {\r\n                    TC.syncLoadJS(TC.apiLocation + 'TC/Filter');\r\n                }\r\n\r\n                if (properties && properties instanceof Array) {\r\n                    var filters = properties.map(function (elm) {\r\n                        if (elm.hasOwnProperty(\"type\")) {\r\n                            switch (true) {\r\n                                case elm.type == TC.Consts.comparison.EQUAL_TO: {\r\n                                    return new TC.filter.equalTo(elm.name, elm.value);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return new TC.filter.equalTo(elm.name, elm.value);\r\n                        }\r\n                    });\r\n\r\n                    if (filters.length > 1) {\r\n                        return TC.filter.and.apply(null, filters);\r\n                    } else {\r\n                        return filters[0];\r\n                    }\r\n                }\r\n            }\r\n\r\n            var layerOptions = {\r\n                id: idQuery,\r\n                type: SITNA.Consts.layerType.WFS,\r\n                url: tcSearch.url,\r\n                version: tcSearch.version,\r\n                stealth: true,\r\n                geometryName: 'the_geom',\r\n                featurePrefix: prefix,\r\n                featureType: layer,\r\n                maxFeatures: 1,\r\n                properties: transformFilter([{\r\n                    name: field, value: id, type: TC.Consts.comparison.EQUAL_TO\r\n                }]),\r\n                outputFormat: TC.Consts.format.JSON\r\n            };\r\n\r\n            var tcSrchGenericLayer;\r\n            tcMap.addLayer(layerOptions).then(function (layer) {\r\n                tcSrchGenericLayer = layer;\r\n\r\n                map.search = {\r\n                    layer: layer, type: SITNA.Consts.mapSearchType.GENERIC\r\n                };\r\n            });\r\n\r\n            tcMap.on(TC.Consts.event.FEATURESADD, function (e) {\r\n                const layer = e.layer;\r\n                if (layer == tcSrchGenericLayer && layer.features && layer.features.length > 0) {\r\n\r\n                    for (var i = 0; i < layer.features.length; i++) {\r\n                        if (layer.features[i].showsPopup != tcSearch.queryableFeatures)\r\n                            layer.features[i].showsPopup = tcSearch.queryableFeatures;\r\n                    }\r\n\r\n                    tcMap.zoomToFeatures(layer.features);\r\n                }\r\n            });\r\n\r\n            tcMap.on(TC.Consts.event.LAYERUPDATE, function (e) {\r\n                const layer = e.layer;\r\n                const newData = e.newData;\r\n                if (layer == tcSrchGenericLayer && newData && newData.features && newData.features.length == 0)\r\n                    tcMap.toast(tcSearch.EMPTY_RESULTS_LABEL, {\r\n                        type: TC.Consts.msgType.INFO, duration: 5000\r\n                    });\r\n\r\n                if (callback)\r\n                    callback(layer == tcSrchGenericLayer && newData && newData.features && newData.features.length == 0 ? null : idQuery);\r\n            });\r\n        }\r\n    };\r\n/**\r\n * Elimina del mapa la entidad geográfica encontrada en la última búsqueda. \r\n * @method removeSearch\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @async   \r\n * @param {function} [callback] Función a la que se llama tras eliminar la entidad geográfica.  \r\n * @example <caption>[Ver en vivo](../examples/Map.removeSearch.html)</caption> {@lang html} \r\n * <div class=\"instructions query\">\r\n *     <div><label>Capa</label><input type=\"text\" id=\"capa\" placeholder=\"Nombre capa de IDENA\" /> </div>\r\n *     <div><label>Campo</label><input type=\"text\" id=\"campo\" placeholder=\"Nombre campo\" /> </div>\r\n *     <div><label>Valor</label><input type=\"text\" id=\"valor\" placeholder=\"Valor a encontrar\" /> </div>\r\n *     <div><button id=\"searchBtn\">Buscar</button></div>\r\n *     <div><button id=\"removeBtn\">Eliminar filtro</button></div>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear mapa.\r\n *     var map = new SITNA.Map(\"mapa\");\r\n *         \r\n *     map.loaded(function () {\r\n *         document.getElementById(\"addFilterBtn\").addEventListener(\"click\", addFilter);\r\n *         document.getElementById(\"removeFilterBtn\").addEventListener(\"click\", removeFilter);\r\n *     });\r\n *         \r\n *     // Establecer como filtro del mapa el municipio Valle de Egüés\r\n *     var addFilter = function () {\r\n *         var capa = document.getElementById(\"capa\").value;\r\n *         capa = capa.trim();\r\n *         \r\n *         var campo = document.getElementById(\"campo\").value;\r\n *         campo = campo.trim();\r\n *         \r\n *         var valor = document.getElementById(\"valor\").value;\r\n *         valor = valor.trim();\r\n *         \r\n *         map.searchFeature(capa, campo, valor, function (idQuery) {\r\n *             if (idQuery == null) {\r\n *                 alert(\"No se han encontrado resultados en la capa: \" + capa + \" en el campo: \" + campo + \" el valor: \" + valor + \".\");\r\n *             }\r\n *         });\r\n *     };\r\n *     \r\n *     // Limpiar el mapa del filtro\r\n *     var remove = function () {\r\n *         map.removeSearch();\r\n *     };\r\n * </script>\r\n */\r\n    map.removeSearch = function (callback) {\r\n        if (map.search) {\r\n            if (!tcSearch.availableSearchTypes[map.search.type] || !tcSearch.availableSearchTypes[map.search.type].hasOwnProperty('goTo')) {\r\n                tcMap.removeLayer(map.search.layer).then(function () {\r\n                    map.search = null;\r\n                });\r\n            } else {\r\n                for (var i = 0; i < map.search.layer.features.length; i++) {\r\n                    map.search.layer.removeFeature(map.search.layer.features[i]);\r\n                }\r\n                map.search = null;\r\n            }\r\n        }\r\n\r\n        if (callback)\r\n            callback();\r\n    };\r\n\r\n    /**\r\n * Exporta el mapa a una imagen PNG. Para poder utilizar este método hay que establecer la opción `crossOrigin` al instanciar {@link SITNA.Map}. \r\n * @method exportImage\r\n * @memberof SITNA.Map\r\n * @instance\r\n * @return {string} Imagen en un [data URI](https://developer.mozilla.org/es/docs/Web/HTTP/Basics_of_HTTP/Datos_URIs).\r\n * @see [Atributos de configuración CORS]{@link https://developer.mozilla.org/es/docs/Web/HTML/Atributos_de_configuracion_CORS}\r\n * @example <caption>[Ver en vivo](../examples/Map.exportImage.html)</caption> {@lang html} \r\n * <div id=\"controls\" class=\"controls\">\r\n *     <button id=\"imageBtn\">Exportar imagen</button>\r\n * </div>\r\n * <div id=\"mapa\"></div>\r\n * <script>\r\n *     // Crear un mapa con la opción de imágenes CORS habilitada.\r\n *     var map = new SITNA.Map(\"mapa\", { crossOrigin: \"anonymous\" });\r\n *     \r\n *     var exportImage = function () {\r\n *         var dataUrl = map.exportImage();\r\n *         var image = document.createElement(\"img\");\r\n *         image.setAttribute(\"src\", dataUrl);\r\n *         image.style.width = '25vw';\r\n *         var div = document.createElement(\"div\");\r\n *         div.appendChild(image);\r\n *         document.getElementById(\"controls\").appendChild(div);\r\n *     };\r\n *     \r\n *     document.getElementById(\"imageBtn\").addEventListener(\"click\", exportImage);\r\n * </script>\r\n     */\r\n    map.exportImage = function () {\r\n        return tcMap.exportImage();\r\n    };\r\n\r\n    map.search = null;\r\n};\r\n"]}